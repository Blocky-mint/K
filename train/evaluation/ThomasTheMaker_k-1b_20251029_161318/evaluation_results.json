{
  "model_name": "ThomasTheMaker/k-1b",
  "timestamp": "2025-10-29T16:13:18.843400",
  "date": "2025-10-29",
  "time": "16:13:18",
  "total_tests": 282,
  "completed_tests": 282,
  "code_extraction_success": 282,
  "code_extraction_rate": "100.0%",
  "render_success": 222,
  "render_success_rate": "78.7%",
  "visual_similarity_success": 75,
  "visual_similarity_rate": "26.6%",
  "average_tokens_generated": "53",
  "results": [
    {
      "object": "cylinder",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 58,
      "code": "// Realistic 3D-printable kitchen appliance - \"Mini-Fryer\"\n// Medium complexity, 120mm length, 40mm width, 50mm height\n\n$fa = 1; $fs = 0.5; $pr = 1;\n\n// Base module\nmodule base() {\n    difference() {\n        cube([120, 40, 25]);\n        translate([2, 2, 2])\n            cube([116, 36, 24]);\n    }\n}\n\n// Handle assembly\nmodule handle() {\n    translate([0, -10, 12])\n        cube([80, 4, 20]);\n}\n\n// Control panel\nmodule control_panel() {\n    translate([-30, -5, 30])\n        cube([20, 6, 8]);\n}\n\n// Lid\nmodule lid() {\n    translate([0, -12, 50])\n        cube([100, 4, 12]);\n}\n\n// Control buttons\nmodule buttons() {\n    for (x = [-40, 0, 40]) {\n        translate([x, -6, 25])\n            cylinder(h=1, r=3, $fn=32);\n    }\n}\n\n// Power cord\nmodule power_cord() {\n    difference() {\n        translate([0, -20, -50])\n            cylinder(h=20, r=1.5, $fn=32);\n        translate([0, -10, 0])\n            cylinder(h=4, r=0.5, $fn=32);\n    }\n}\n\n// Fryer body\nmodule fryer_body() {\n    difference() {\n        cube([116, 4, 25]);\n        translate([2, 2, 2])\n            cube([114, 36, 24]);\n    }\n}\n\n// Heating coils\nmodule coils() {\n    for (x = [-30, 0, 30]) {\n        translate([x, 0, 15])\n            cylinder(h=8, r=1.5, $fn=32);\n    }\n}\n\n// Fryer basket\nmodule basket() {\n    difference() {\n        translate([0, 0, 0])\n            cube([100, 40, 25]);\n        translate([10, 10, 10])\n            cube([90, 36, 20]);\n    }\n}\n\n// Fryer legs\nmodule legs() {\n    for (x = [-35, 35]) {\n        translate([x, -15, -12])\n            cylinder(h=4, r=2, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    \n    // Handle\n    handle();\n    \n    // Control panel\n    control_panel();\n    \n    // Lid\n    lid();\n    \n    // Fryer body\n    fryer_body();\n    \n    // Power cord\n    power_cord();\n    \n    // Heating coils\n    coils();\n    \n    // Fryer basket\n    basket();\n    \n    // Legs\n    legs();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "cube",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 90,
      "code": "// Realistic 3D-print-friendly model of a medium-complexity chair\n// Overall footprint 90 x 80 mm, height 100 mm, seat height 40 mm\n\n$fn = 30;  // Good balance between smoothness and printing speed\n\nmodule chair() {\n    // Main seat frame (rectangular prism)\n    difference() {\n        cube([90, 80, 40], center = true);\n        translate([0, 0, 2]) cube([86, 76, 36], center = true);\n    }\n\n    // Seat cushion\n    difference() {\n        cube([86, 76, 40], center = true);\n        translate([0, 0, 2]) cube([84, 74, 36], center = true);\n    }\n\n    // Backrest with structural joints\n    difference() {\n        translate([0, 0, -15]) {\n            cube([80, 60, 45], center = true);\n            translate([0, 0, -10]) cube([78, 58, 48], center = true);\n        }\n        translate([0, 0, 25]) {\n            cube([78, 58, 48], center = true);\n            translate([0, 0, -10]) cube([76, 56, 46], center = true);\n        }\n    }\n\n    // Left armrest\n    difference() {\n        translate([30, 30, 25]) {\n            cube([20, 20, 40], center = true);\n            translate([0, 0, 2]) cube([18, 18, 36], center = true);\n        }\n    }\n\n    // Right armrest\n    difference() {\n        translate([-30, 30, 25]) {\n            cube([20, 20, 40], center = true);\n            translate([0, 0, 2]) cube([18, 18, 36], center = true);\n        }\n    }\n\n    // Base frame\n    difference() {\n        cube([100, 100, 8], center = true);\n        translate([0, 0, 4]) cube([96, 96, 6], center = true);\n    }\n\n    // Legs with caster wheels\n    for (x = [-30, 30]) {\n        for (y = [-30, 30]) {\n            translate([x, y, -32]) {\n                difference() {\n                    cylinder(h = 12, r = 3, center = true);\n                    cylinder(h = 10, r = 2, center = true);\n                }\n            }\n        }\n    }\n\n    // Support slats under seat\n    for (x = [-40, 40]) {\n        for (y = [-40, 40]) {\n            translate([x, y, 0]) {\n                cube([86, 76, 2], center = true);\n            }\n        }\n    }\n\n    // Backrest slats\n    for (x = [-30, 30]) {\n        for (y = [-30, 30]) {\n            translate([x, y, 75]) {\n                cube([80, 60, 1], center = true);\n            }\n        }\n    }\n\n    // Tabletop\n    difference() {\n        cube([80, 70, 8], center = true);\n        translate([0, 0, 4]) cube([76, 66, 6], center = true);\n    }\n}\n\n// Position the chair\nchair();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "sphere",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 68,
      "code": "// Realistic Medium-Complexity 3D-Printable Model of a Traditional Japanese Katana (Sori-zume)\n\n// Overall scale: ~120 mm long, ~40 mm high, ~15 mm deep\n\n// Wall thickness for 2 mm nozzle and 0.4 mm wall thickness for 2 mm bed\nwall = 1.5;\n\nmodule sword_blade() {\n    difference() {\n        union() {\n            // Main blade body\n            cube([20, 35, 5]);\n            \n            // Cut at 45\u00b0 angle for realistic edge bevel\n            translate([0, 0, 5]) {\n                rotate([45, 0, 0]) {\n                    linear_extrude($fn=20)\n                        polygon([\n                            [0, 0],\n                            [10, 0],\n                            [12, 5],\n                            [8, 12],\n                            [0, 12]\n                        ]);\n                }\n            }\n            \n            // Decorative chamfers along spine\n            for (i = [0:3]) {\n                translate([0, -1, -1]) {\n                    linear_extrude($fn=20)\n                        polygon([\n                            [0, 0],\n                            [22, 0],\n                            [24, 35],\n                            [20, 45],\n                            [0, 45]\n                        ]);\n                }\n            }\n        }\n        \n        // Edge bevel for realism\n        translate([0, 0, 5]) {\n            linear_extrude($fn=20)\n                polygon([\n                    [0, 0],\n                    [10, 0],\n                    [12, 5],\n                    [8, 12],\n                    [0, 12]\n                ]);\n        }\n    }\n}\n\nmodule sword_hilt() {\n    difference() {\n        cube([35, 8, 5]);\n        translate([0, 0, 2.5]) {\n            cube([22, 5, 3.5]);\n            for (i = [0:3]) {\n                rotate([0, 0, i*90]) {\n                    translate([8, 0, -1.5]) {\n                        cube([3, 2, 1.5]);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule wooden_handle() {\n    difference() {\n        cube([25, 6, 4]);\n        translate([0, 0, 2.5]) {\n            cube([23, 4, 3.5]);\n            for (i = [0:3]) {\n                rotate([0, 0, i*90]) {\n                    translate([0, 0, 2.5]) {\n                        cube([2.5, 2, 1.5]);\n                    }\n                }\n            }\n        }\n    }\n}\n\nmodule decorative_guard() {\n    difference() {\n        cylinder(h=2, r=5);\n        translate([0, 0, 2.5]) {\n            cylinder(h=1, r=4);\n            translate([0, 0, 2.5]) {\n                cube([12, 2, 3]);\n            }\n        }\n    }\n}\n\nmodule belt_string() {\n    difference() {\n        cylinder(h=2, r=3);\n        translate([0, 0, 2.5]) {\n            cylinder(h=0.5, r=3.5);\n            translate([0, 0, 2.5]) {\n                cube([12, 2, 3]);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main sword\n    translate([0, 0, 0]) {\n        sword_blade();\n    }\n    \n    // Handle\n    translate([0, 0, 0]) {\n        wooden_handle();\n    }\n    \n    // Decorative details\n    translate([0, 0, -0.1]) {\n        decorative_guard();\n    }\n    \n    // Belt\n    translate([0, 0, -1.5]) {\n        belt_string();\n    }\n    \n    // Blade end\n    translate([0, 0, 3]) {\n        sword_blade();\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "cone",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 64,
      "code": "// Realistic 3D-printable wooden spoon \u2013 medium complexity\n// Designed for FDM printing with no support marks and 2 mm walls\n\n$fn = 36;          // Good resolution for printing\n\n// Main parameters\nspoon_length = 80;    // Length of the spoon in mm\nspoon_width = 35;     // Width of the spoon at widest point\nspoon_height = 8;     // Height of the spoon\nwall_thickness = 2;   // Wall thickness for 2 mm walls\nhandle_length = 15;   // Length of handle\nhandle_diameter = 12; // Diameter of handle\nblade_length = 10;   // Length of the blade\nblade_width = 3;     // Width of the blade\n\nmodule handle() {\n    // Tapered handle with ergonomic grip\n    difference() {\n        // Main handle body\n        translate([0, 0, handle_length/2])\n            cylinder(h = handle_length/2, d1 = handle_diameter, d2 = handle_diameter, center = false);\n        \n        // Grip grooves\n        for(i = [0:5]) {\n            translate([0, 0, handle_length/2 + i * handle_length/2 + 0.1])\n                cylinder(h = 1, d1 = handle_diameter - 1, d2 = handle_diameter - 2, center = false);\n        }\n    }\n}\n\nmodule blade() {\n    // Curved wooden blade with realistic texture\n    difference() {\n        // Main blade body\n        translate([0, 0, handle_length/2 - blade_length/2])\n            rotate([0, 0, 0])\n                cylinder(h = blade_length, d = blade_width);\n        \n        // Tooth cutouts for realism\n        for(i = [0:6]) {\n            translate([0, 0, handle_length/2 - blade_length/2 - i * blade_length/3])\n                cube([blade_width * 0.3, blade_width * 0.3, 0.2], center = true);\n        }\n        \n        // Tapered end for better printability\n        translate([0, 0, handle_length/2 - blade_length/2])\n            sphere(d = blade_width * 0.3, $fn = 36);\n    }\n}\n\nmodule blade_grip() {\n    // Wooden grip pattern on blade\n    for(i = [0:4]) {\n        translate([0, 0, handle_length/2 - i * blade_length/3 - 1])\n            rotate([0, 0, 15])\n            cylinder(h = 0.5, d1 = blade_width * 0.8, d2 = blade_width * 0.6, center = true);\n    }\n}\n\nmodule spoon_blade() {\n    // Tapered wooden spoon blade\n    difference() {\n        // Main blade body\n        translate([0, 0, handle_length/2 - blade_length/2 + blade_length/2])\n            rotate([0, 0, 0])\n                cylinder(h = blade_length, d = blade_width);\n        \n        // Tapered edges for realistic shape\n        for(i = [0:2]) {\n            translate([0, 0, -blade_length/2 + i * blade_length/3])\n                rotate([0, 0, 0])\n                    cylinder(h = 1.5, d1 = blade_width * 0.4, d2 = blade_width * 0.35, center = true);\n        }\n        \n        // Tooth cutouts\n        for(i = [0:6]) {\n            translate([0, 0, handle_length/2 - blade_length/2 - i * blade_length/3])\n                rotate([0, 0, 0])\n                    cylinder(h = 1.5, d = blade_width * 0.3);\n        }\n        \n        // Tapered end for printability\n        translate([0, 0, handle_length/2 - blade_length/2 + blade_length/2])\n            sphere(d = blade_width * 0.3, $fn = 36);\n    }\n}\n\n// Assembly\nunion() {\n    // Main wooden spoon\n    translate([0, 0, handle_length/2]) {\n        handle();\n    }\n    \n    // Blade\n    translate([0, 0, handle_length/2 + blade_length/2 - blade_length/2]) {\n        blade();\n    }\n    \n    // Spoons (separate for printing)\n    translate([0, 0, handle_length - blade_length - handle_length - 2]) {\n        translate([0, 0, 0])\n            spoon_blade();\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "torus",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 8,
      "code": "// Realistic 3D-printable cylinder with rounded top and bottom\n// Overall height \u2248 85 mm, diameter \u2248 40 mm\n\n// Parameters\n$fn = 40;               // Smooth curves\nwall = 1.2;              // Wall thickness\ntop_r = 15;               // Top radius\nbottom_r = 15;             // Bottom radius\ntop_h = 30;\nbottom_h = 30;\n\ndifference() {\n    // Main cylinder body\n    cylinder(h = top_h, r = top_r, center = false);\n\n    // Rounded top/bottom\n    translate([0, 0, -top_h/2])\n        rotate([90, 0, 0])\n            cylinder(h = bottom_h - top_h, r1 = top_r * cos(90), r2 = bottom_r * sin(90), center = true);\n\n    // Bottom edge fillet\n    translate([0, 0, -bottom_h/2])\n        rotate([90, 0, 0])\n            cylinder(h = bottom_h - top_h, r1 = bottom_r, r2 = bottom_r * cos(90), center = true);\n\n    // Top edge fillet\n    translate([0, 0, top_h/2])\n        rotate([90, 0, 0])\n            cylinder(h = bottom_h - top_h, r1 = top_r * sin(90), r2 = top_r * cos(90), center = true);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "octahedron",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 72,
      "code": "// Octahedron model \u2013 2D representation for 3D printing and realistic appearance\n\n// Overall scale: 1:1000; height 10mm; base width 100mm; base depth 100mm\n\n// Main body shape \u2013 2D pyramid with rounded edges\ndifference() {\n    cube([80, 80, 80], center=true);\n    translate([0, 0, 10]) cube([80, 80, 80], center=true);\n}\n\n// Triangular faces\nmodule triangle(a, b, c) {\n    linear_extrude(height=1) polygon(points=[a, b, c]);\n}\n\n// Central vertex\ntranslate([0, 0, 0]) triangle([10, 10, 10]);\n\n// Edges\nmodule edge(v1, v2) {\n    linear_extrude(height=1) polygon(points=[v1, v2]);\n}\n\n// Base support\ntranslate([0, 0, 0]) rotate([0, 0, 30]) {\n    difference() {\n        cube([100, 100, 2], center=true);\n        translate([0, 0, 1]) cube([100, 100, 2], center=true);\n    }\n}\n\n// Support legs\nfor (x = [-40, 0, 40], y = [-40, 0, 40]) {\n    translate([x, y, -20]) rotate([0, 45, 0]) {\n        // Leg base\n        translate([0, 0, 0]) cube([4, 4, 3], center=true);\n        // Leg top\n        translate([0, 0, 0]) cube([4, 4, 3], center=true);\n    }\n}\n\n// Central vertex\ntranslate([0, 0, 15]) rotate([0, 0, 45]) {\n    // Central vertex\n    translate([0, 0, 0]) sphere(d=10);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "pyramid",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 30,
      "code": "// Realistic 3D-print friendly medium-complexity toy-style furniture item\n// Designed for FDM printing, 2 mm walls, 0.4 mm footprint\n\n// Overall dimensions\ntable_length = 120;\ntable_width = 80;\ntable_height = 40;\nleg_height = 25;\nleg_diameter = 3;\nshelf_width = 40;\nshelf_thickness = 4;\nwall_thickness = 2;\n\n// Colors\ntable_color = [0.85, 0.75, 0.9];\nleg_color = [0.3, 0.2, 0.1];\nshelf_color = [0.95, 0.95, 0.9];\n\n// Main table top\nmodule table_top() {\n    difference() {\n        // Main top plate\n        cube([table_length, table_width, table_height], center=true);\n        // Chamfer edge\n        translate([0, 0, table_height/2 - 1])\n            cube([table_length, table_width, 2], center=true);\n    }\n}\n\n// Four wooden legs\nmodule legs() {\n    for (x = [0, table_length/2 - 4, table_length/2 - 4, table_length/2 - 4]) {\n        for (y = [0, table_width/2 - 4, table_width/2 - 4, table_width/2 - 4]) {\n            translate([x, y, -leg_height/2 - 2])\n                cylinder(h=leg_height, d=leg_diameter, $fn=16);\n        }\n    }\n}\n\n// 4 wooden legs with joints\nmodule legs_joints() {\n    for (x = [0, table_length/2 - 4, table_length/2 - 4, table_length/2 - 4]) {\n        for (y = [0, table_width/2 - 4, table_width/2 - 4, table_width/2 - 4]) {\n            translate([x, y, 0])\n                rotate([0, 0, 15])\n                    cylinder(h=leg_height, d=leg_diameter, $fn=16);\n        }\n    }\n}\n\n// Shelf with 3mm fillet\nmodule shelf() {\n    difference() {\n        cube([shelf_width, shelf_thickness, shelf_height], center=true);\n        // Rounded edges\n        translate([0, 0, shelf_height/2 - 1])\n            cube([shelf_width - 4, shelf_thickness, shelf_height - 2], center=true);\n    }\n}\n\n// Side support brackets\nmodule support_brackets() {\n    for (x = [0, table_length/2 - 4, table_length/2 - 4]) {\n        translate([x, -table_width/2, 0])\n            cube([3, 2, 2], center=true);\n    }\n}\n\n// Decorative drawer front\nmodule drawer_front() {\n    difference() {\n        cube([15, 12, 3], center=true);\n        // Drawer handle holes\n        translate([0, 0, -0.1])\n            cylinder(h=1.5, r=1.2, $fn=32);\n    }\n}\n\n// Drawer\nmodule drawer() {\n    difference() {\n        cube([10, 12, 2], center=true);\n        // Drawer front\n        translate([0, 0, 0.1])\n            cube([10, 12, 2], center=true);\n        // Drawer front\n        translate([0, 0, -0.1])\n            cube([10, 12, 2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main furniture\n    translate([0, 0, -10])\n        table_top();\n\n    // Legs\n    translate([table_length/2 - 4, 0, -leg_height/2 - 2])\n        legs();\n\n    // Shelf\n    translate([0, 0, table_height - shelf_height - 2])\n        shelf();\n\n    // Support brackets\n    translate([table_length/2 - 4, 0, -10])\n        support_brackets();\n\n    // Drawer\n    translate([0, 0, -15])\n        drawer();\n\n    // Drawer front\n    translate([0, 0, 15])\n        drawer_front();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "tetrahedron",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 86,
      "code": "// Realistic 3D-printable model of a modern wooden chair\n// Size: 120mm x 80mm x 90mm (L x W x H)\n// Wall thickness: 2mm\n\n// Global parameters\nchair_width = 120;\nchair_depth = 80;\nchair_height = 90;\nseat_height = 45;\nleg_height = 50;\narmrest_height = 40;\nbackrest_height = 70;\n\n// Seat frame\nmodule seat_frame() {\n    difference() {\n        // Main seat block\n        cube([chair_width, chair_depth, 20], center=true);\n        \n        // Cutout for seat cushion\n        translate([0, 0, 2])\n            cube([chair_width - 4, chair_depth - 4, 15], center=true);\n    }\n}\n\n// Leg assembly\nmodule leg_assembly() {\n    // Front legs\n    translate([0, 0, -chair_height/2 + leg_height/2]) {\n        cube([leg_height, leg_height * 1.2, 2], center=true);\n        translate([0, 0, 2])\n            cube([leg_height * 1.2, leg_height * 1.2, 15], center=true);\n    }\n    \n    // Back legs\n    translate([-chair_width/2 + leg_height/2, 0, -chair_height/2 + leg_height/2]) {\n        cube([leg_height, leg_height * 1.2, 2], center=true);\n        translate([0, 0, 2])\n            cube([leg_height * 1.2, leg_height * 1.2, 15], center=true);\n    }\n}\n\n// Backrest frame\nmodule backrest_frame() {\n    difference() {\n        cube([chair_width * 0.8, chair_depth * 0.8, backrest_height], center=true);\n        translate([0, 0, 2])\n            cube([chair_width * 0.8 - 4, chair_depth * 0.8 - 4, backrest_height - 2], center=true);\n    }\n}\n\n// Backrest\nmodule backrest() {\n    difference() {\n        cube([chair_width * 0.8, chair_depth * 0.8, backrest_height], center=true);\n        translate([0, 0, 2])\n            cube([chair_width * 0.8 - 4, chair_depth * 0.8 - 4, backrest_height - 2], center=true);\n        // Backrest cushion\n        translate([0, 0, backrest_height/2 - 5])\n            cube([chair_width * 0.8 - 4, chair_depth * 0.8 - 4, 3], center=true);\n    }\n}\n\n// Armrests\nmodule armrests() {\n    // Left armrest\n    translate([chair_width/2 - 2, chair_depth * 0.4, 15]) {\n        difference() {\n            cube([6, 20, 15], center=true);\n            translate([0, 0, -15])\n                cube([4, 20, 15], center=true);\n        }\n        // Armrest support\n        translate([0, 0, 10])\n            cube([6, 20, 1], center=true);\n    }\n    \n    // Right armrest\n    translate([-chair_width/2 + 2, chair_depth * 0.4, 15]) {\n        mirror([1, 0, 0])\n            armrests();\n    }\n}\n\n// Chair legs\nmodule legs() {\n    // Front left leg\n    translate([0, 0, -chair_height/2 - leg_height/2]) {\n        cube([leg_height * 1.2, leg_height * 1.2, 2], center=true);\n        translate([0, 0, 2])\n            cube([leg_height * 1.2, leg_height * 1.2, 15], center=true);\n    }\n    \n    // Front right leg\n    translate([chair_width/2 - leg_height * 1.2, 0, -chair_height/2 - leg_height/2]) {\n        cube([leg_height * 1.2, leg_height * 1.2, 2], center=true);\n        translate([0, 0, 2])\n            cube([leg_height * 1.2, leg_height * 1.2, 15], center=true);\n    }\n    \n    // Back left leg\n    translate([-chair_width/2 + leg_height * 1.2, 0, -chair_height/2 - leg_height * 1.2]) {\n        cube([leg_height * 1.2, leg_height * 1.2, 2], center=true);\n        translate([0, 0, 2])\n            cube([leg_height * 1.2, leg_height * 1.2, 15], center=true);\n    }\n    \n    // Back right leg\n    translate([chair_width/2 - leg_height * 1.2, 0, -chair_height/2 - leg_height * 1.2]) {\n        cube([leg_height * 1.2, leg_height * 1.2, 2], center=true);\n        translate([0, 0, 2])\n            cube([leg_height * 1.2, leg_height * 1.2, 15], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat\n    seat_frame();\n    \n    // Legs\n    translate([0, 0, 0]) {\n        leg_assembly();\n    }\n    \n    // Backrest\n    translate([0, 0, 0]) {\n        backrest();\n    }\n    \n    // Armrests\n    armrests();\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: ERROR: Recursion detected calling module 'armrests' in file tetrahedron.scad, line 65\nTRACE: called by 'armrests' in file tetrahedron.scad, line 81\nTRACE: called by 'mirror' in file tetrahedron.scad, ",
      "vlm_response": null
    },
    {
      "object": "pentagon",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 78,
      "code": "// Realistic medium-complexity OpenSCAD 3D-printable model of a realistic-looking steel tool \u2013 a standard crowbar\n\n// Overall dimensions for printing \u2013 ~80 mm long\n\n// Blade thickness 2 mm, handle length 70 mm\n\n// Wall thickness for 2 mm nozzle for FDM printing\nwall = 2;\n\n// Handle length\nhandle_len = 70;\n\n// Blade width\nblade_wid = 10;\n\n// Main grip shape using cylinders\ngrip_profile = 45;  // mm\ngrip_radius = handle_len/2 - (handle_len/2 - 10);  // mm\n\n// Blade profile for realistic appearance \u2013 tapered\nblade_taper = 0.8;  // mm, taper from base to tip\n\n// Add some material for overhangs\noverhang = 2;\n\n// Main blade body\nmodule blade_body() {\n    difference() {\n        // Tapered blade shape\n        linear_extrude(height = blade_wid, scale = [1,1]) {\n            polygon(points = [\n                [0,0],\n                [blade_wid,0],\n                [blade_wid*0.3,0],\n                [blade_wid*0.6,0],\n                [blade_wid*0.8,0],\n                [0,blade_wid],\n                [0,0]\n            ]);\n        }\n        \n        // Cut out blade width\n        linear_extrude() {\n            translate([0,0,-0.1]) {\n                polygon(points = [\n                    [blade_wid - handle_len/2 - 0.1, 0],\n                    [blade_wid - handle_len/2, 0],\n                    [blade_wid - handle_len/2 + 0.1, 0],\n                    [0, blade_wid - handle_len/2 + 0.1],\n                    [blade_wid - handle_len/2 - 0.1, 0],\n                    [0, blade_wid - handle_len/2 + 0.1],\n                    [0, 0]\n                ]);\n            }\n    }\n}\n\n// Handle with ergonomic grip\nmodule handle() {\n    difference() {\n        union() {\n            // Main handle\n            cylinder(h = handle_len, r = handle_wid/2, center = false);\n            \n            // Grip grooves\n            for (i = [0:15]) {\n                translate([0, -handle_wid/2 + 1, i * handle_len/3]) {\n                    rotate([0, 0, 45]) {\n                        cylinder(h = 2, r = handle_wid/4, center = true);\n                    }\n                }\n            }\n        }\n        \n        // Cutout for blade\n        translate([0, 0, -1]) {\n            difference() {\n                cylinder(h = handle_len + 0.1, r = handle_wid/2, center = false);\n            }\n        }\n    }\n}\n\n// Reinforcement collar on handle\nmodule handle_collar() {\n    difference() {\n        cylinder(h = handle_len*0.8, r = handle_wid/2 - 1.5, center = true);\n        translate([0,0,-0.1]) {\n            cylinder(h = handle_len*0.8, r = handle_wid/2 + 0.5, center = true);\n        }\n    }\n}\n\n// Assembly\nmodule crowbar() {\n    union() {\n        // Handle\n        handle();\n        \n        // Blade\n        translate([0, 0, handle_len/2]) {\n            blade_body();\n        }\n        \n        // Collar\n        handle_collar();\n        \n        // Reinforcement\n        translate([0, 0, handle_len/2 + 0.1]) {\n            rotate([0, 0, 0]) {\n                cylinder(h = 1, r = handle_wid/2 - 1, center = true);\n            }\n        }\n    }\n}\n\n// Main assembly\ncrowbar();",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: ERROR: Parser error: syntax error in file evaluation/ThomasTheMaker_k-1b_20251029_161318/pentagon.scad, line 120\nCan't parse file 'evaluation/ThomasTheMaker_k-1b_20251029_161318/pentagon.scad'!\n\n",
      "vlm_response": null
    },
    {
      "object": "hexagon",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 85,
      "code": "// Medium-complexity hexagonal body with rounded front and top edges\n// All dimensions in mm for 3D printing\n\nmodule hexagonal_body() {\n    difference() {\n        // Main hexagonal body\n        union() {\n            // Central hexagon\n            scale([1, 1, 1])\n                cylinder(h=5, d1=12, d2=6, $fn=16);\n            \n            // Rounded front edge\n            translate([0, 0, 2])\n                difference() {\n                    cylinder(h=2, d=12, $fn=16);\n                    translate([0, 0, 2])\n                        cylinder(h=2, d=10, $fn=16);\n                }\n            \n            // Rounded top edge\n            translate([0, 0, 5])\n                difference() {\n                    cylinder(h=2, d=12, $fn=16);\n                    translate([0, 0, 2])\n                        cylinder(h=2, d=10, $fn=16);\n                }\n        }\n        \n        // Add small cutouts for visual detail\n        translate([3, 3, 1.5])\n            cylinder(h=1, d=4, $fn=16);\n        translate([-3, 3, 1.5])\n            cylinder(h=1, d=4, $fn=16);\n        translate([3, -3, 1.5])\n            cylinder(h=1, d=4, $fn=16);\n        translate([-3, -3, 1.5])\n            cylinder(h=1, d=4, $fn=16);\n    }\n}\n\n// Render the hexagonal body\ntranslate([0, 0, 0])\n    hexagonal_body();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "octagon",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 30,
      "code": "// Realistic 3D-Printable Octagonal Model\n// Medium complexity with 2mm wall thickness\n\n// Overall dimensions\nouter_radius = 40;\nouter_width = 35;\nouter_height = 40;\n\n// Wall thickness\nwall_thickness = 2;\n\n// Main octagonal body\ndifference() {\n    union() {\n        // Central body\n        cylinder(h=outer_height, r=outer_radius, $fn=6);\n        \n        // Top chamfer\n        translate([0,0,outer_height/2+1])\n            cylinder(h=2, r=outer_radius, $fn=6);\n        \n        // Bottom chamfer\n        translate([0,0,-1])\n            cylinder(h=2, r=outer_radius-wall_thickness, $fn=6);\n    }\n    \n    // Hollow interior\n    translate([0,0,0])\n        cylinder(h=outer_height-wall_thickness*2, r=outer_radius-wall_thickness, $fn=6);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "heptagon",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 6,
      "code": "// Realistic 1000 mm tablet with 15 mm thickness and 12 mm diameter screen\n// Designed for 3D printing with no overhangs\n\n$fa = 1; $fs = 0.5;\n\n// Main tablet body\ndifference() {\n    hull() {\n        // Main body block\n        translate([0, 0, 0])\n            scale([1, 0.8, 0.7])\n            sphere(d = 12);\n        \n        // Screen cutout\n        translate([0, 0, 1.5])\n            scale([0.9, 0.75, 0.6])\n            sphere(d = 15);\n    }\n    \n    // Ventilation slots\n    for (i = [0:3]) {\n        translate([0, 0, 1.3 + i * 0.3])\n            rotate([0, 0, 45])\n            scale([0.9, 0.6, 0.7])\n            cylinder(h = 1.5, d = 2.5, $fn = 8);\n    }\n}\n\n// Screen glass\ndifference() {\n    hull() {\n        // Screen frame\n        translate([0, 0, 0.1])\n            cube([12, 12, 1.5], center = true);\n        \n        // Screen glass\n        translate([0, 0, 0.15])\n            cube([12.5, 12.5, 1.7], center = true);\n        \n        // Screen lettering\n        translate([0, 0, 0.1])\n            cube([12, 12, 1.2], center = true);\n    }\n    \n    // Screen backlight\n    translate([0, 0, 0.15])\n        cube([12.5, 12.5, 0.3], center = true);\n}\n\n// Side buttons\nfor (i = [-1, 1]) {\n    translate([i * 2, 0, 0.1])\n        cylinder(h = 1, d = 3, $fn = 12);\n}\n\n// Front camera\ntranslate([0, 0, 1.3])\n    cube([4, 4, 0.5], center = true);\n\n// Speaker grilles\nfor (i = [0:3]) {\n    translate([0, 0, 0.3 + i * 0.2])\n        cube([1.5, 1.5, 0.3], center = true);\n}\n\n// USB-C port\ntranslate([0, 0, 0.35])\n    cylinder(h = 1.5, d = 2.5, $fn = 8);",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no. the image shows an image of two spheres placed on a flat surface, with the left sphere appearing larger and positioned behind the smaller one that is in front of it. this is not a geometric figure such as a heptagon. a heptagon would have seven sides."
    },
    {
      "object": "nonagon",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 94,
      "code": "// Toy Quadcopter with realistic proportions\n\n// Overall dimensions\nwidth = 50;\nheight = 30;\nlength = 45;\nbody_diameter = 12;\nwing_span = 35;\n\n// Main body\nmodule body() {\n    difference() {\n        // Main body block\n        cube([length, width, height], center = true);\n        \n        // Engine cavities\n        translate([-length/2, -width/2, -height/2])\n            cylinder(h=1, d=10);\n        translate([length/2, -width/2, -height/2])\n            cylinder(h=1, d=10);\n        translate([-length/2, width/2, -height/2])\n            cylinder(h=1, d=10);\n        translate([length/2, width/2, -height/2])\n            cylinder(h=1, d=10);\n    }\n}\n\n// Engine\nmodule engine() {\n    difference() {\n        cube([8, 4, 6], center = true);\n        translate([0, 0, 2])\n            cube([6, 3, 4], center = true);\n    }\n}\n\n// Main rotor\nmodule rotor() {\n    difference() {\n        cylinder(h=5, d=wing_span/2);\n        translate([0, 0, -5])\n            cylinder(h=3, d=wing_span/2 - 10);\n    }\n}\n\n// Tail boom\nmodule boom() {\n    difference() {\n        cylinder(h=15, d=wing_span/2);\n        translate([0, -wing_span/2 - 5, 0])\n            cylinder(h=3, d=wing_span/2 - 10);\n    }\n}\n\n// Propeller\nmodule propeller() {\n    difference() {\n        cylinder(h=2, d=wing_span/4);\n        translate([0, 0, -1])\n            cylinder(h=3, d=wing_span/4 - 10);\n    }\n}\n\n// Landing gear\nmodule landing_gear() {\n    // Front wheels\n    translate([-15, -width/2, 0])\n        rotate([0, -20, 0])\n            cylinder(h=3, d=8);\n    translate([15, -width/2, 0])\n        rotate([0, -20, 0])\n            cylinder(h=3, d=8);\n    \n    // Rear wheels\n    translate([-15, width/2, 0])\n        rotate([0, -20, 0])\n            cylinder(h=3, d=8);\n    translate([15, width/2, 0])\n        rotate([0, -20, 0])\n            cylinder(h=3, d=8);\n}\n\n// Stabilizer\nmodule stabilizer() {\n    difference() {\n        cube([3, 3, 2]);\n        translate([0, 0, -0.5])\n            cube([2, 2, 2.5]);\n    }\n}\n\n// Camera\nmodule camera() {\n    translate([length/2 - 5, width/2 - 5, 0])\n        sphere(d=3);\n}\n\n// Roof details\nmodule roof() {\n    difference() {\n        cube([length - 2, width - 4, height - 2], center = true);\n        translate([0, 0, -1])\n            cube([length - 2, width - 4, height - 2], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    body();\n    \n    // Components\n    translate([0, 0, length/2])\n        rotate([0, 0, -15])\n            rotor();\n    translate([0, 0, height/2])\n        boom();\n    translate([0, 0, length/2 + height/2])\n        landing_gear();\n    translate([0, 0, height/2 + height/2])\n        propeller();\n    translate([0, 0, length/2])\n        stabilizer();\n    translate([0, 0, height/2 + height/2])\n        camera();\n    \n    // Details\n    roof();\n    translate([0, 0, 0])\n        camera();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "decagon",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 18,
      "code": "// Decagon furniture item - a realistic 3D-printable coffee table\n// Overall height ~120 mm, base diameter ~50 mm, wall thickness ~2 mm\n\n// Parameters\nbase_diameter = 50;\nbase_thickness = 3;\nleg_height = 50;\nleg_width = 12;\ntop_diameter = 48;\ntop_thickness = 4;\nsupport_hole_diameter = 4;\nsupport_hole_depth = 3;\nwall_thickness = 2;\n\n// Main assembly\nunion() {\n    // Base\n    difference() {\n        cylinder(h=base_thickness, d1=base_diameter, d2=base_diameter);\n        translate([0, 0, -0.1]) cylinder(h=base_thickness + 0.2, d=base_diameter - 4);\n    }\n\n    // Legs\n    translate([0, 0, -base_thickness/2 + leg_height/2 - base_thickness/2]) {\n        difference() {\n            cylinder(h=leg_height, d=leg_width);\n            translate([0, 0, -leg_height/2 - base_thickness/2]) cylinder(h=leg_height, d=leg_width - wall_thickness);\n        }\n        translate([0, 0, -leg_height/2 - base_thickness/2 - 1]) {\n            cylinder(h=leg_height + 1, d=leg_width - 4);\n        }\n    }\n\n    // Support legs\n    translate([-1, -1, -leg_height/2 - base_thickness/2 - leg_height/2]) {\n        difference() {\n            cylinder(h=leg_height/2, d=leg_width);\n            translate([0, 0, -leg_height/2 - base_thickness/2 - leg_height/2 - 1]) cylinder(h=leg_height/2, d=leg_width - wall_thickness);\n        }\n        translate([0, 0, -leg_height/2 - base_thickness/2 - leg_height/2]) {\n            cylinder(h=leg_height/2 + 1, d=leg_width - 4);\n        }\n    }\n\n    // Top support\n    translate([0, 0, 0]) {\n        difference() {\n            cylinder(h=top_thickness, d=top_diameter);\n            cylinder(h=top_thickness + 0.2, d=top_diameter - 2);\n        }\n    }\n\n    // Decorative corner feet\n    for (x = [-1, 1], y = [-1, 1]) {\n        translate([x * base_diameter/2, y * base_diameter/2, 0]) {\n            difference() {\n                cylinder(h=1.5, d=leg_width);\n                translate([0, 0, -1]) cylinder(h=1.5, d=leg_width - 2);\n            }\n        }\n    }\n\n    // Screw holes for furniture support\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * leg_width/2, y * leg_width/2, 0]) {\n                cylinder(h=leg_height/2, d=support_hole_diameter, $fn=16);\n            }\n        }\n    }\n\n    // Drawer (for visual representation - optional)\n    difference() {\n        // Main drawer body\n        cylinder(h=4, d=48, center=true);\n        translate([0, 0, 2]) cube([38, 38, 4], center=true);\n    }\n}\n\n// Optional surface texture for printing\nmodule texture() {\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            if (x == 0 || y == 0) {\n                translate([x * leg_width/2, y * leg_width/2, 2]) {\n                    rotate([90, 0, 0]) {\n                        scale([1, 1, 0.5]) sphere(d=1.5);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Render the model\ndifference() {\n    scale([1, 1, 1.2]) {\n        texture();\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "dodecagon",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 78,
      "code": "// Realistic medium-complexity 3D-printable dodecagon\n// Approx. 80 mm diameter, 8 mm thick, no overhangs, no sharp edges\n// Wall thickness used for 3D printing (0.4 mm)\n\n$fn = 30;               // Smooth curves\nscale = 1.0;             // Scale for printing\nwall = 0.4;               // 0.4 mm wall thickness for 3D printing\n\n// Main body\nmodule body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h = 80, r = 40);\n        // Hollow center\n        cylinder(h = 82, r = 36);\n    }\n}\n\n// Base\nmodule base() {\n    difference() {\n        cylinder(h = 4, r = 30);\n        translate([0, 0, -0.1]) cylinder(h = 5, r = 28);\n    }\n}\n\n// Central point\nmodule center() {\n    sphere(d = 12);\n}\n\n// Three rings\nmodule rings() {\n    for (i = [0:3]) {\n        rotate([0, 0, i * 360 / 4]) {\n            difference() {\n                cylinder(h = 1, r = 40);\n                translate([0, 0, 1]) cylinder(h = 2, r = 36);\n            }\n        }\n    }\n}\n\n// Top and bottom plates\nmodule plates() {\n    difference() {\n        translate([0, 0, 40]) {\n            cylinder(h = 2, r = 38);\n            translate([0, 0, 1]) cylinder(h = 2, r = 36);\n        }\n        translate([0, 0, -40]) {\n            cylinder(h = 2, r = 38);\n            translate([0, 0, 1]) cylinder(h = 2, r = 36);\n        }\n    }\n}\n\n// Decorative ring pattern\nmodule ring_pattern() {\n    for (i = [0:3]) {\n        rotate([0, 0, i * 360 / 4]) {\n            difference() {\n                cylinder(h = 1, r = 36);\n                translate([0, 0, 1]) cylinder(h = 2, r = 36);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    translate([0, 0, 0]) base();\n    translate([0, 0, 80]) rings();\n    translate([0, 0, 120]) center();\n    plates();\n    ring_pattern();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "triangular prism",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 73,
      "code": "// Realistic 3D-Printable Triangular Prism (medium complexity)\n// Designed for FDM 3D printing with 1.2mm wall thickness and no steep overhangs\n\n$fa = 1; $fs = 0.5; $pr = 4; $pr_h = 2; $pr_w = 1.5; $pr_l = 1;\n\n// Main body dimensions\nbody_w = 100; body_h = 80; body_l = 60;\nwall = 1.2;\n\n// Triangular base with rounded edges\nmodule base() {\n    difference() {\n        // Main triangular base\n        linear_extrude(height = 2.5)\n            polygon([\n                [-body_w/2 + body_l/2, -body_h/2 + body_w/2],\n                [body_w/2 - body_l/2, body_h/2],\n                [-body_w/2 + body_l/2, -body_h/2 + body_w/2],\n                [body_w/2 - body_l/2, body_h/2],\n                [-body_w/2 + body_l/2, body_h/2],\n                [body_w/2 - body_l/2, body_h/2],\n                [-body_w/2 + body_l/2, -body_h/2 + body_w/2]\n            ])\n        }\n        // Rounded top edges\n        translate([0, 0, 2.5])\n            scale([1, 1, 1.2])\n                linear_extrude(height = 1.5)\n                    polygon([\n                        [-body_w/2 + body_l/2, body_h/2],\n                        [body_w/2 - body_l/2, body_h/2],\n                        [-body_w/2 + body_l/2, body_h/2],\n                        [body_w/2 - body_l/2, body_h/2],\n                        [-body_w/2 + body_l/2, body_h/2],\n                        [body_w/2 - body_l/2, body_h/2],\n                        [body_w/2 - body_l/2, -body_h/2 + body_w/2]\n                    ])\n    }\n\n// Triangular prism body\nmodule prism_body() {\n    difference() {\n        // Main body\n        linear_extrude(height = body_h)\n            polygon([\n                [body_w/2 - body_l/2, body_h/2 - body_w/2],\n                [body_w/2 - body_l/2, body_h/2 - body_w/2],\n                [body_w/2 - body_l/2, body_h/2 - body_w/2],\n                [body_w/2 - body_l/2, body_h/2 - body_w/2],\n                [body_w/2 - body_l/2, body_h/2 - body_w/2],\n                [body_w/2 - body_l/2, body_h/2 - body_w/2],\n                [body_w/2 - body_l/2, body_h/2 - body_w/2]\n            ])\n        }\n        // Remove bottom to create triangular shape\n        translate([0, 0, -body_h/2])\n            scale([1, 1, 1.2])\n                linear_extrude(height = 1.5)\n                    polygon([\n                        [-body_w/2 + body_l/2, body_h/2 - body_w/2],\n                        [body_w/2 - body_l/2, body_h/2 - body_w/2],\n                        [-body_w/2 + body_l/2, body_h/2 - body_w/2],\n                        [body_w/2 - body_l/2, body_h/2 - body_w/2],\n                        [-body_w/2 + body_l/2, body_h/2 - body_w/2],\n                        [body_w/2 - body_l/2, body_h/2 - body_w/2],\n                        [body_w/2 - body_l/2, body_h/2 - body_w/2]\n            ])\n    }\n}\n\n// Central support block\nmodule central_block() {\n    difference() {\n        // Main block\n        linear_extrude(height = body_h - 5)\n            polygon([\n                [body_w/2 - body_l/2, body_h - 5],\n                [body_w/2 - body_l/2, body_h - 5],\n                [body_w/2 - body_l/2, body_h - 5],\n                [body_w/2 - body_l/2, body_h - 5],\n                [body_w/2 - body_l/2, body_h - 5],\n                [body_w/2 - body_l/2, body_h - 5],\n                [body_w/2 - body_l/2, body_h - 5]\n            ])\n        }\n        // Cut out for triangular prism body\n        translate([0, 0, body_h - 10])\n            scale([1, 1, 1.2])\n                linear_extrude(height = 2.5)\n                    polygon([\n                        [-body_w/2 + body_l/2, body_h - 5],\n                        [body_w/2 - body_l/2, body_h - 5],\n                        [-body_w/2 + body_l/2, body_h - 5],\n                        [body_w/2 - body_l/2, body_h - 5],\n                        [-body_w/2 + body_l/2, body_h - 5],\n                        [body_w/2 - body_l/2, body_h - 5],\n                        [body_w/2 - body_l/2, body_h - 5]\n            ])\n    }\n}\n\n// Base\nmodule base() {\n    difference() {\n        // Main base\n        linear_extrude(height = 2.5)\n            polygon([\n                [-body_w/2 + body_l/2, -body_h/2 + body_w/2],\n                [body_w/2 - body_l/2, body_h/2],\n                [-body_w/2 + body_l/2, -body_h/2 + body_w/2],\n                [body_w/2 - body_l/2, body_h/2],\n                [-body_w/2 + body_l/2, -body_h/2 + body_w/2],\n                [body_w/2 - body_l/2, body_h/2],\n                [body_w/2 - body_l/2, body_h/2 - body_w/2]\n            ])\n        }\n        // Rounded edges\n        translate([0, 0, body_h - 2.5])\n            scale([1, 1, 1.2])\n                linear_extrude(height = 1.5)\n                    polygon([\n                        [-body_w/2 + body_l/2, body_h/2 - body_w/2],\n                        [body_w/2 - body_l/2, body_h/2 - body_w/2],\n                        [-body_w/2 + body_l/2, body_h/2 - body_w/2],\n                        [body_w/2 - body_l/2, body_h/2 - body_w/2],\n                        [-body_w/2 + body_l/2, body_h/2 - body_w/2],\n                        [body_w/2 - body_l/2, body_h/2 - body_w/2],\n                        [body_w/2 - body_l/2, body_h/2 - body_w/2]\n            ])\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        central_block();\n        base();\n        prism_body();\n        central_block();\n    }\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: ERROR: Parser error: syntax error in file evaluation/ThomasTheMaker_k-1b_20251029_161318/triangular_prism.scad, line 24\nCan't parse file 'evaluation/ThomasTheMaker_k-1b_20251029_161318/triangular_pris",
      "vlm_response": null
    },
    {
      "object": "square prism",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 11,
      "code": "// Realistic Medium-Complexity House - OpenSCAD code\n\n// Overall dimensions (mm)\nhouse_width = 60;\nhouse_depth = 45;\nhouse_height = 35;\nroof_pitch = 40;\n\n// Wall thickness\nwall_thickness = 2;\n\n// Door frame dimensions\ndoor_height = 8;\ndoor_width = 20;\n\n// Window dimensions\nwindow_height = 6;\nwindow_width = 18;\n\n// Roof dimensions\nroof_overhang = 2;\nroof_length = 50;\nroof_height = 20;\n\n// Base dimensions\nbase_depth = 15;\nbase_width = 30;\n\n// Base details\nbase_columns = 4;\nbase_pillars = 6;\n\n// Main walls\nmodule main_walls() {\n    difference() {\n        cube([house_width, house_depth, house_height]);\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([house_width - 2*wall_thickness, house_depth - 2*wall_thickness, house_height - wall_thickness]);\n    }\n}\n\n// Roof\nmodule roof() {\n    difference() {\n        cube([roof_length, roof_width, roof_height]);\n        translate([0, 0, -0.1])\n            cube([roof_length - 2*wall_thickness, roof_width - 2*wall_thickness, roof_height + 0.2]);\n    }\n}\n\n// Door\nmodule door() {\n    difference() {\n        cube([door_width, door_height, door_height + 0.2]);\n        translate([door_width/2, door_height/2 - 0.1, door_height/2 - 0.1])\n            cube([door_width, door_height + 0.2, door_height]);\n    }\n}\n\n// Windows\nmodule windows() {\n    difference() {\n        cube([window_width, window_height, window_height]);\n        translate([0, 0, wall_thickness])\n            cube([window_width - 2*wall_thickness, window_height - 2*wall_thickness, window_height]);\n    }\n}\n\n// Base details\nmodule base() {\n    difference() {\n        cube([base_width, base_depth, base_height]);\n        for(x = [0:base_width/2 - base_depth/2]) {\n            for(y = [0:base_depth/2 - base_height/2]) {\n                translate([x, y, -base_height/2 - 0.1])\n                    cube([base_width - 2*wall_thickness, base_depth - 2*wall_thickness, 1]);\n            }\n        }\n    }\n}\n\n// Main structure\nmodule structure() {\n    // Left side\n    translate([-house_width/2 - base_width/2 - 0.1, 0, 0])\n        main_walls();\n    // Right side\n    translate([house_width/2 + base_width/2 + 0.1, 0, 0])\n        main_walls();\n    // Bottom\n    translate([0, 0, base_height/2])\n        difference() {\n            cube([house_width, house_depth, base_height]);\n            translate([0, 0, base_height/2])\n                cube([house_width, house_depth, base_height - 0.2]);\n        }\n    // Back\n    translate([0, 0, house_height - base_height/2])\n        main_walls();\n    // Front\n    translate([house_width/2 + base_width/2 + 0.1, 0, 0])\n        main_walls();\n}\n\n// Roof with stairs\nmodule roof_with_stairs() {\n    difference() {\n        cube([roof_length, roof_width, roof_height]);\n        translate([0, 0, roof_height - wall_thickness])\n            cube([roof_length - 2*wall_thickness, roof_width - 2*wall_thickness, roof_height - wall_thickness]);\n    }\n}\n\n// Base\nmodule base() {\n    difference() {\n        cube([base_width, base_depth, base_height]);\n        translate([0, 0, -0.1])\n            cube([base_width - 2*wall_thickness, base_depth - 2*wall_thickness, base_height - wall_thickness]);\n    }\n}\n\n// Door\nmodule door() {\n    translate([house_width/2 + 1, house_depth/2 + 1, base_height - door_height])\n        rotate([0, 90, 0])\n            rotate([0, 0, 90])\n                door();\n}\n\n// Roof details\nmodule roof_details() {\n    translate([0, 0, roof_height])\n        difference() {\n            cube([roof_length, roof_width, roof_height]);\n            translate([0, 0, wall_thickness])\n                cube([roof_length - 2*wall_thickness, roof_width - 2*wall_thickness, roof_height - wall_thickness]);\n        }\n}\n\n// Main house\ntranslate([0, 0, 0])\n    difference() {\n        difference() {\n            translate([0, 0, -base_height/2])\n                base();\n            translate([0, 0, -base_height/2 - 0.1])\n                base();\n        }\n    }\n\n// Roof with stairs\ntranslate([0, 0, roof_height])\n    roof_details();\n\n// Door\ntranslate([0, 0, roof_height])\n    rotate([0, 0, 90])\n        rotate([0, 90, 0])\n            door();\n\n// Base\ntranslate([0, 0, 0])\n    difference() {\n        base();\n        translate([0, 0, base_height - wall_thickness])\n            base();\n    }",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: WARNING: Ignoring unknown variable 'base_height' in file square_prism.scad, line 145\nWARNING: undefined operation (-undefined) in file square_prism.scad, line 145\nWARNING: undefined operation (undefin",
      "vlm_response": null
    },
    {
      "object": "pentagonal prism",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 65,
      "code": "// Pentagonal Prism - Realistic Style, Medium Complexity\n\n// Overall dimensions: 80 mm height, 60 mm width, 40 mm depth\n\n// Base plate\nmodule base_plate() {\n    difference() {\n        cube([76, 56, 4], center=true);\n        translate([0, 0, 2]) cube([72, 52, 3], center=true);\n    }\n}\n\n// Triangular prism base\nmodule triangular_base() {\n    difference() {\n        cube([76, 56, 4], center=true);\n        translate([0, 0, 2]) cube([72, 52, 3], center=true);\n    }\n}\n\n// Pentagonal prism edges\nmodule pentagonal_edges() {\n    // Main pentagon\n    difference() {\n        cube([60, 40, 4], center=true);\n        translate([0, 0, 2]) cube([56, 36, 3], center=true);\n    }\n    \n    // Top and bottom pentagonal faces\n    difference() {\n        cube([60, 40, 4], center=true);\n        translate([0, 0, 2]) cube([60, 40, 3], center=true);\n    }\n    \n    // Side pentagon edges\n    for (x = [-20, -10, 0, 10, 20]) {\n        for (y = [-20, -10, 0, 10, 20]) {\n            translate([x, y, 0]) rotate([0, 45, 0]) polygon(points=[\n                [x, y, 0], [x, 0, 0], [0, y, 0], [10, y, 0], [10, 0, 0]\n            ]);\n        }\n    }\n}\n\n// Front face with pentagonal prism\nmodule front_face() {\n    difference() {\n        cube([60, 40, 4], center=true);\n        translate([0, 0, 2]) cube([56, 36, 3], center=true);\n    }\n}\n\n// Rear face\nmodule rear_face() {\n    difference() {\n        cube([60, 40, 4], center=true);\n        translate([0, 0, 2]) cube([56, 36, 3], center=true);\n    }\n}\n\n// Triangular prisms for support\nmodule triangular_supports() {\n    // Left triangular support\n    difference() {\n        translate([-20, -20, 0]) cube([12, 12, 4], center=true);\n        translate([-10, -5, 0]) cube([12, 12, 3], center=true);\n    }\n    \n    // Right triangular support\n    difference() {\n        translate([20, 20, 0]) cube([12, 12, 4], center=true);\n        translate([10, 10, 0]) cube([12, 12, 3], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    base_plate();\n    triangular_base();\n    pentagonal_edges();\n    front_face();\n    rear_face();\n    triangular_supports();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no. the image does not show a pentagonal prism. it is two separate images of objects in a dark space, one on top of the other, which are unrelated to each other and do not form a recognizable shape like a pentagonal prism."
    },
    {
      "object": "hexagonal prism",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 18,
      "code": "// Realistic 3D-printable hexagonal prism with 2mm wall thickness and no overhangs\n// Scale: 1:1:1 (realistic proportions)\n\n// Main parameters\nwidth = 20;          // overall width\nheight = 15;         // overall height\ndepth = 12;           // overall depth\nwall = 2;             // 2mm wall thickness everywhere\n\n// Hexagonal profile using two rectangular prisms\nmodule hex_profile(h) {\n    difference() {\n        // Outer hexagonal base\n        linear_extrude(height = h)\n            polygon(points=[\n                [0, 0],\n                [width/2, 0],\n                [width/3, height],\n                [width/2, height],\n                [0, height/2]\n            ]);\n        // Inner hollow space\n        linear_extrude(height = h - wall * 2)\n            polygon(points=[\n                [0, 0],\n                [width/2, 0],\n                [width/3, 0],\n                [width/2, 0],\n                [0, 0]\n            ]);\n    }\n}\n\n// Central prism with 6 faces\nmodule prism() {\n    difference() {\n        // Main body\n        translate([0, 0, 0])\n            hex_profile(height);\n        \n        // Remove inner cavity\n        translate([0, 0, 0])\n            difference() {\n                cylinder(h = height - 2 * wall, r = width/2, $fn = 64);\n                translate([0, 0, -0.1])\n                    cylinder(h = height - 2 * wall + 0.2, r = width/2 - wall, $fn = 64);\n            }\n        \n        // Top and bottom hexagonal faces\n        translate([0, 0, 0])\n            hex_profile(height * 0.75);\n        translate([0, 0, 0])\n            hex_profile(height * 0.75);\n    }\n}\n\n// Optional: Small support block at bottom for print stability\nmodule support() {\n    difference() {\n        cube([width * 1.5, height * 1.5, 2]);\n        translate([0, 0, -0.1]) cube([width * 1.3, height * 1.3, 2]);\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        prism();\n        support();\n        \n        // Add support block to bottom\n        translate([0, 0, -0.1])\n            cube([width, height, 2]);\n    }\n}\n\n// Render the model\ntranslate([0, 0, 0])\n    difference() {\n        cube([width, height, depth]);\n        translate([0, 0, 0]) cube([width, height, depth - 2]);\n    }",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "tall box",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 59,
      "code": "// Realistic Medium-Complexity 3D-Printable Model\n// A small office chair with ergonomic design and functional details\n// Overall height: 120 mm, seat width: 60 mm, seat depth: 45 mm\n\n$fn = 32;           // Medium resolution for 3D printing\n\nmodule chair() {\n    // Main seat frame\n    frame();\n\n    // Seat cushion\n    seat();\n\n    // Backrest\n    back();\n\n    // Armrests\n    armrest(0);\n    armrest(1);\n}\n\nmodule frame() {\n    // Main frame box\n    difference() {\n        cube([80, 45, 40]);\n        translate([0, 0, 5]) cube([76, 41, 38]);\n        translate([0, 0, 5]) cube([78, 42, 39]);\n    }\n\n    // Front legs\n    translate([20, 0, 0]) {\n        cylinder(h=18, r=6, $fn=6);\n    }\n    translate([80, 0, 0]) {\n        cylinder(h=18, r=6, $fn=6);\n    }\n\n    // Side legs\n    translate([20, 35, 0]) {\n        cylinder(h=18, r=6, $fn=6);\n    }\n    translate([80, 35, 0]) {\n        cylinder(h=18, r=6, $fn=6);\n    }\n\n    // Backrest support\n    translate([0, 15, 40]) {\n        cube([25, 5, 40], center=true);\n    }\n}\n\nmodule seat() {\n    // Seat cushion\n    difference() {\n        translate([-25, 0, -10]) cube([40, 42, 40]);\n        translate([-27, 0, -12]) cube([38, 38, 48]);\n    }\n\n    // Cushion top\n    difference() {\n        translate([-25, 0, -10]) cube([40, 42, 40]);\n        translate([-27, 0, -12]) cube([38, 38, 48]);\n    }\n}\n\nmodule back() {\n    // Backrest frame\n    difference() {\n        cube([42, 4, 42]);\n        translate([0, 0, 42]) cube([38, 4, 38]);\n    }\n\n    // Backrest slats\n    for (x = [1:3]) {\n        translate([x, 0, 42]) {\n            difference() {\n                cube([36, 4, 36]);\n                translate([0, 0, 0]) cube([36, 4, 36]);\n            }\n        }\n    }\n\n    // Headrest\n    translate([0, 28, 42]) {\n        difference() {\n            cube([8, 4, 8]);\n            translate([0, 0, 0]) cube([6, 4, 6]);\n        }\n    }\n}\n\nmodule armrest(side) {\n    // Left armrest\n    translate([35, side * 25, 30]) {\n        difference() {\n            cube([20, 5, 20]);\n            translate([0, 0, 0]) cube([18, 5, 18]);\n        }\n    }\n    // Right armrest\n    translate([35, -side * 25, 30]) {\n        difference() {\n            cube([20, 5, 20]);\n            translate([0, 0, 0]) cube([18, 5, 18]);\n        }\n    }\n}\n\nmodule frame_details() {\n    // Cable management slot\n    translate([0, 0, 15]) {\n        cube([6, 4, 10]);\n    }\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: Geometries in cache: 1\nGeometry cache size in bytes: 0\nCGAL Polyhedrons in cache: 0\nCGAL cache size in bytes: 0\nTotal rendering time: 0:00:00.000\nCurrent top level object is empty.\n",
      "vlm_response": null
    },
    {
      "object": "wide box",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 69,
      "code": "// Realistic wooden chest with 3D-printable dimensions\n// 120 mm long, 100 mm wide, 80 mm high\n\nmodule chest_body() {\n    difference() {\n        // Main wooden box\n        cube([120, 100, 80], center=true);\n        \n        // Hollow out interior\n        translate([0, 0, 2])\n            cube([120 - 2*4, 100 - 2*4, 80 - 2*4], center=true);\n        \n        // Front panel with hinge\n        translate([-40, 0, -20])\n            cube([40, 80, 40], center=true);\n        \n        // Back panel with hinge\n        translate([40, 0, -20])\n            cube([40, 80, 40], center=true);\n    }\n}\n\nmodule lid() {\n    difference() {\n        cube([100, 80, 20], center=true);\n        translate([0, 0, 0])\n            cube([100, 80, 20], center=true);\n        \n        // Lid top\n        translate([0, 0, 0])\n            cube([100, 80, 20], center=true);\n    }\n    \n    // Handle\n    difference() {\n        cube([20, 60, 10], center=true);\n        translate([0, 0, 5])\n            cube([20, 60, 10], center=true);\n    }\n}\n\nmodule feet() {\n    for(x = [-35, 35]) {\n        for(y = [-35, 35]) {\n            translate([x, y, -40])\n                cylinder(h=8, r=3);\n        }\n    }\n}\n\nmodule hinges() {\n    for(x = [-10, 10]) {\n        for(y = [-10, 10]) {\n            translate([x, y, -35])\n                cube([4, 4, 6], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    chest_body();\n    lid();\n    feet();\n    hinges();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "thin box",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 8,
      "code": "// Realistic Medium-Complexity 3D-Printable Kitchen Scale\n// Scale: 200 lbs with 0.5 lb resolution\n// Overall dimensions: 120mm x 80mm x 50mm\n\n$fn = 32;\n\n// Main body\nmodule body() {\n    difference() {\n        // Main box\n        cube([120, 80, 50], center = true);\n        \n        // Hollow out interior\n        translate([0, 0, -1])\n            cube([120 - 2 * 20, 80 - 2 * 20, 50 - 2 * 20], center = true);\n        \n        // Rounded front edge for print-friendliness\n        for (x = [-40, 40])\n            for (y = [-40, 40])\n                translate([x, y, 0])\n                    cylinder(h = 2, r = 3);\n    }\n}\n\n// Handle with ergonomic grip\nmodule handle() {\n    difference() {\n        // Handle grip\n        cylinder(h = 30, d = 20, center = true);\n        \n        // Engraved scale lines\n        for (x = [-40, 40])\n            for (y = [-40, 40])\n                translate([x, y, 15])\n                    cube([4, 2, 2], center = true);\n    }\n}\n\n// Scale dial with 0-100 lb markings\nmodule scale_dial() {\n    difference() {\n        // Dial base\n        cylinder(h = 4, d = 30, center = true);\n        \n        // Markings\n        for (x = [-40, 40])\n            for (y = [-40, 40])\n                translate([x, y, 3.5])\n                    cube([1, 0.5, 0.5]);\n    }\n}\n\n// Feet for stability\nmodule feet() {\n    for (x = [-30, 0, 30])\n        for (y = [-30, 0, 30])\n            translate([x, y, -5])\n                cylinder(h = 4, d = 5);\n}\n\n// Base support\nmodule base() {\n    difference() {\n        cube([120, 80, 10], center = true);\n        \n        // Support ribs\n        for (x = [-40, 40])\n            for (y = [-40, 40])\n                translate([x, y, -15])\n                    cube([8, 8, 2]);\n    }\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: Geometries in cache: 1\nGeometry cache size in bytes: 0\nCGAL Polyhedrons in cache: 0\nCGAL cache size in bytes: 0\nTotal rendering time: 0:00:00.000\nCurrent top level object is empty.\n",
      "vlm_response": null
    },
    {
      "object": "box",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 99,
      "code": "// OpenSCAD model of a realistic-style potato (medium-sized, 100 mm tall)\n// Designed for 3D printing with no supports and minimal overhangs\n\n$fn = 36;  // Smooth curves\n\nmodule potato() {\n    // Main body - ellipsoid with slight taper\n    scale([1, 0.8, 0.7])\n    translate([0, 0, 2])\n    scale([1.5, 1, 1])\n    sphere(12);\n\n    // Skin texture - small ridges\n    difference() {\n        scale([1, 0.7, 0.6])\n        translate([0, 0, 4])\n        sphere(10);\n        scale([1.5, 0.7, 0.6])\n        translate([0, 0, 5])\n        sphere(8);\n    }\n\n    // Stem\n    translate([0, 0, 12])\n    cylinder(h = 30, d = 2, center = true);\n\n    // Leaves\n    for (i = [0:3]) {\n        rotate([0, 0, 45*i])\n        translate([0, 0, 8 + i*15])\n        rotate([90, 0, 0])\n        scale([0.3, 0.3, 0.4])\n        cylinder(h = 10, r = 0.8, center = true);\n    }\n\n    // Eyes\n    translate([25, 0, 0])\n    sphere(1.5);\n    translate([-25, 0, 0])\n    sphere(1.5);\n\n    // Mouth (simple indentation)\n    translate([28, 0, -2])\n    scale([0.4, 0.4, 0.3])\n    sphere(4);\n\n    // Starch inside\n    color(\"brown\")\n    translate([0, 0, 2])\n    cube([12, 12, 4], center = true);\n}\n\npotato();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "box with rounded corners",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 7,
      "code": "// Roundbox (rounded edges for 3D printing)\n// All corners are 45 degrees for rounded edges\n\n// Main rounded box body\nmodule rounded_box(width, height, depth) {\n    difference() {\n        // Outer rounded box\n        minkowski() {\n            cube([width, height, depth]);\n            sphere(r=1);\n        }\n        \n        // Cutouts for walls\n        translate([2, 2, 2]) cube([width-4, height-4, depth-4]);\n        translate([-2, 2, 2]) cube([width+2, height+2, depth+2]);\n        translate([2, -2, 2]) cube([width-2, height-2, depth-2]);\n        translate([-2, -2, 2]) cube([width+2, height+2, depth-2]);\n        translate([2, 2, -2]) cube([width-2, height-2, depth-2]);\n        translate([-2, 2, -2]) cube([width+2, height+2, depth-2]);\n    }\n}\n\n// Rounded bottom corners\nmodule rounded_bottom(x, y, z, r) {\n    difference() {\n        cube([r*r, r*r, r*r]);\n        sphere(r);\n    }\n}\n\n// Rounded top corners\nmodule rounded_top(x, y, z, r) {\n    difference() {\n        cube([r*r, r*r, r*r]);\n        sphere(r);\n    }\n}\n\n// Side walls for 3D printing\nmodule side_walls(w, h, d) {\n    difference() {\n        cube([w, h, d]);\n        translate([0, 0, 0]) rotate([90, 0, 0]) cylinder(h=d, r=0.5);\n        translate([w, 0, 0]) rotate([90, 0, 0]) cylinder(h=d, r=0.5);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base\n    rounded_box(width=30, height=30, depth=40);\n    \n    // Bottom\n    rounded_bottom(x=width/2, y=height/2, z=depth/2, r=2);\n    \n    // Top\n    rounded_top(x=width/2, y=height/2, z=depth/2, r=2);\n    \n    // Side walls\n    side_walls();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "rectangular prism",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 62,
      "code": "// Toy-sized robotic arm with realistic proportions\n// Overall dimensions: 80mm length, 35mm width, 25mm height\n\n// Main body with rounded edges\nmodule body() {\n    difference() {\n        hull() {\n            translate([0, 0, 0]) sphere(r=12);\n            translate([0, 0, 0]) sphere(r=12);\n        }\n        // Hollow interior for toy\n        translate([0, 0, 0]) sphere(r=8);\n    }\n}\n\n// Grip module with 3-D printed fingers\nmodule grip(side) {\n    // Main finger segments\n    for (side = [1, 2]) {\n        for (i = [0:5]) {\n            translate([0, 0, -side * (i * 3 + 3.5)]) {\n                sphere(r=2);\n            }\n        }\n    }\n}\n\n// Shoulder joint\nmodule shoulder() {\n    difference() {\n        union() {\n            translate([0, 0, 0]) sphere(r=12);\n            translate([0, 0, -1]) cube([10, 12, 2]);\n        }\n        // Hollow out for 3D printing\n        translate([0, 0, 0]) sphere(r=10);\n    }\n}\n\n// Elbow joint\nmodule elbow() {\n    difference() {\n        union() {\n            translate([0, 0, 0]) sphere(r=12);\n            translate([0, 0, 0]) cube([8, 8, 4]);\n        }\n        // Hollow\n        translate([0, 0, 0]) sphere(r=10);\n    }\n}\n\n// Wrist joint\nmodule wrist() {\n    difference() {\n        union() {\n            translate([0, 0, 0]) sphere(r=12);\n            translate([0, 0, 0]) cube([6, 6, 3]);\n        }\n        // Hollow\n        translate([0, 0, 0]) sphere(r=10);\n    }\n}\n\n// Main assembly\nbody();\n\n// Shoulder joint\nshoulder();\n\n// Elbow joint\nelbow();\n\n// Wrist joint\nwrist();\n\n// Grips on sides\ngrip(1);\ngrip(-1);",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "hollow box",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 84,
      "code": "// Realistic medium-complexity furniture item - Coffee Table\n// Overall dimensions: ~120mm x 80mm x 120mm\n\n$fn = 32;  // Good for curves\n\n// Main dimensions\ntable_top_length = 120;\ntable_top_width = 80;\ntable_top_thickness = 12;\nleg_height = 40;\nleg_diameter = 6;\nbase_diameter = 80;\nbase_width = 80;\nbase_height = 40;\n\n// Wall thickness\nwall_thickness = 2;\n\n// Leg module\nmodule leg(x_pos, y_pos, z_pos) {\n    // Main leg body\n    translate([x_pos, y_pos, z_pos])\n        cube([leg_diameter, leg_diameter, leg_height], center=true);\n    \n    // Foot pad\n    translate([x_pos, y_pos, -leg_height/2 + 2])\n        cylinder(h=1, r1=leg_diameter/2, r2=leg_diameter/2, center=true);\n}\n\n// Table leg\nmodule table_leg() {\n    // Leg body\n    translate([0, 0, 0])\n        cube([leg_diameter, leg_diameter, leg_height], center=true);\n    \n    // Foot pad\n    translate([0, 0, 0])\n        cylinder(h=1, r1=leg_diameter/2, r2=leg_diameter/2, center=true);\n}\n\n// Table leg\ntable_leg();\n\n// Table top\nmodule table_top() {\n    // Main top surface\n    cube([table_top_length - 4, table_top_width - 4, table_top_thickness], center=true);\n    \n    // Top edge chamfers\n    for (x = [0, table_top_length - 4])\n        for (y = [0, table_top_width - 4])\n            translate([x, y, table_top_thickness/2 + 1])\n                cube([table_top_length - 4, 2, 2], center=true);\n}\n\n// Table top\ntable_top();\n\n// Table support base\nmodule table_base() {\n    // Base frame\n    difference() {\n        // Main base block\n        translate([0, 0, -table_top_thickness/2 + base_height/2])\n            cube([base_width, base_height, base_height], center=true);\n        \n        // Central support post\n        translate([0, 0, -table_top_thickness/2 - base_height/2 + 2])\n            cylinder(h=base_height - 2, r=leg_diameter/2);\n    }\n    \n    // Base pad\n    translate([0, 0, -base_height/2 - 1])\n        cube([base_width - 4, base_height - 4, 2], center=true);\n}\n\n// Table support base\ntable_base();\n\n// Assembly\nunion() {\n    // Table top\n    table_top();\n    \n    // Table legs\n    translate([table_top_length/2 - 4, 0, table_top_thickness/2 - 1])\n        table_leg();\n    translate([table_top_length/2 + 4, 0, table_top_thickness/2 - 1])\n        table_leg();\n    \n    // Table legs\n    translate([table_top_length/2 - 4, 0, table_top_thickness/2 - 1])\n        table_leg();\n    translate([table_top_length/2 + 4, 0, table_top_thickness/2 - 1])\n        table_leg();\n    \n    // Table legs\n    translate([table_top_length/2 - 4, 0, table_top_thickness/2 - 1])\n        table_leg();\n    translate([table_top_length/2 + 4, 0, table_top_thickness/2 - 1])\n        table_leg();\n    \n    // Table top\n    table_top();\n    \n    // Table base\n    table_base();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "box with holes",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 40,
      "code": "// Realistic 3D-Printable Toy Box (Medium Complexity)\n// Overall size: 120mm x 80mm x 60mm\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body\nmodule main_body() {\n    difference() {\n        // Main box\n        translate([0, 0, 0])\n        scale([1.2, 1.2, 1])\n        cube([120, 80, 60], center=true);\n        \n        // Hollow interior\n        translate([0, 0, -wall/2])\n        scale([1.1, 1.1, 1.1])\n        cube([116, 76, 56], center=true);\n        \n        // Top lip\n        translate([0, 0, 0])\n        difference() {\n            cube([116, 76, 60], center=true);\n            cube([114, 74, 58], center=true);\n        }\n    }\n}\n\n// Handle\nmodule handle() {\n    // Tapered handle\n    difference() {\n        cylinder(h=40, r1=25, r2=20);\n        cylinder(h=42, r1=20, r2=15);\n    }\n    \n    // Grip texture\n    color(\"burlywood\")\n    translate([0, 0, 40])\n    difference() {\n        cylinder(h=1, r=25);\n        cylinder(h=2, r=20);\n    }\n}\n\n// Front panel with logo\nmodule front_panel() {\n    difference() {\n        // Panel\n        translate([0, 0, 20])\n        cube([100, 70, 10], center=true);\n        \n        // Logo cutout\n        translate([0, 0, 20])\n        cube([60, 50, 5], center=true);\n    }\n}\n\n// Decorative trim\nmodule decorative_trim() {\n    // Top edge\n    translate([0, 0, 60])\n    difference() {\n        cube([120, 80, 4], center=true);\n        cube([116, 76, 3], center=true);\n    }\n    \n    // Bottom edge\n    translate([0, 0, -4])\n    difference() {\n        cube([120, 80, 4], center=true);\n        cube([116, 76, 3], center=true);\n    }\n}\n\n// Base feet\nmodule base_feet() {\n    // Four feet\n    for(x = [-30, -20, -10, 0, 10, 20, 30]) {\n        for(y = [-20, -10, 0, 10, 20, 30]) {\n            translate([x, y, -25])\n            cylinder(h=5, r=3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    main_body();\n    \n    // Handle\n    handle();\n    \n    // Front panel\n    front_panel();\n    \n    // Decorative trim\n    decorative_trim();\n    \n    // Base\n    base_feet();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "short cylinder",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 49,
      "code": "// Medium-complexity realistic wooden table\n// Overall size: 120 mm \u00d7 45 mm \u00d7 45 mm\n\n$fn = 32;\n\n// Tabletop thickness\ntable_thickness = 4;\n\n// Leg thickness\nleg_thickness = 2;\n\n// Corner radius\ncorner_radius = 2;\n\n// Leg height\nleg_height = 40;\n\n// Top surface thickness\ntop_thickness = 1.5;\n\n// Screw hole diameter\nscrew_diameter = 1.5;\n\nmodule leg() {\n    // Tapered leg with rounded top\n    difference() {\n        union() {\n            // Main cylindrical leg\n            cylinder(h = leg_height, r = leg_thickness, center = false);\n            \n            // Rounded top\n            translate([0, 0, -leg_height/2])\n                cylinder(h = 1, r = corner_radius, center = false);\n        }\n        \n        // Screw hole\n        cylinder(h = 1, r = screw_diameter/2, center = false);\n    }\n}\n\nmodule leg_assembly() {\n    // Four legs\n    for (x = [-40, 40]) {\n        for (y = [-20, 20]) {\n            translate([x, y, leg_height/2]) {\n                leg();\n            }\n        }\n    }\n}\n\nmodule top() {\n    // Solid wooden top surface\n    difference() {\n        cube([120, 45, 45], center = true);\n        translate([0, 0, -1])\n            cube([120 - 2*leg_height, 45 - 2*leg_height, 45 - 2*leg_height], center = true);\n    }\n}\n\nmodule corner_detail() {\n    // Small decorative corner support\n    translate([0, 0, leg_height/2 + corner_radius/2]) {\n        cylinder(h = 2, r = corner_radius);\n    }\n}\n\nmodule screw_hole() {\n    // Center hole for screws\n    translate([0, 0, leg_height/2 + screw_diameter/2 - 1]) {\n        rotate([90, 0, 0])\n            cylinder(h = 1, r = screw_diameter/2);\n    }\n}\n\n// Assemble the table\nunion() {\n    // Main parts\n    leg_assembly();\n    top();\n    corner_detail();\n    screw_hole();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "tall cylinder",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 28,
      "code": "// Realistic wooden chair with 3D-printable support frame\n// Dimensions: 60mm x 60mm x 85mm, wall thickness 2mm, no overhangs\n\n$fn = 32; // Smooth curves for realistic appearance\n\n// Main seat cushion\nmodule seat_cushion() {\n    difference() {\n        // Main cushion shape - slightly tapered for realism\n        scale([1, 1.1, 0.7]) \n        sphere(d = 50);\n        \n        // Hollow interior for weight reduction\n        scale([0.8, 0.8, 0.8]) \n        sphere(d = 46);\n    }\n}\n\n// Seat post\nmodule seat_post() {\n    difference() {\n        // Post\n        cylinder(h = 40, d = 6);\n        \n        // Support ring\n        translate([0, 0, 10])\n        cylinder(h = 2, d = 6);\n    }\n}\n\n// Backrest\nmodule back_rest() {\n    difference() {\n        // Main backrest block\n        cube([30, 30, 55], center = true);\n        \n        // Hollow out for structural integrity\n        translate([0, 0, 10])\n        cube([20, 20, 52], center = true);\n    }\n}\n\n// Armrests\nmodule armrests() {\n    // Left armrest\n    difference() {\n        translate([0, 0, 20])\n        cube([8, 8, 20], center = true);\n        \n        // Rounded front\n        translate([0, 0, 0])\n        cube([10, 10, 20], center = true);\n    }\n    \n    // Right armrest\n    mirror([0, 0, 1])\n    difference() {\n        translate([0, 0, 20])\n        cube([8, 8, 20], center = true);\n        \n        translate([0, 0, 0])\n        cube([10, 10, 20], center = true);\n    }\n}\n\n// Leg structure\nmodule leg_structure() {\n    // Four legs\n    translate([-15, -15, -25])\n    cube([4, 4, 40]);\n    translate([-15, -15, -25])\n    cube([4, 4, 40]);\n    translate([15, -15, -25])\n    cube([4, 4, 40]);\n    translate([15, -15, -25])\n    cube([4, 4, 40]);\n}\n\n// Support frame\nmodule support_frame() {\n    difference() {\n        // Main frame\n        cube([80, 80, 60], center = true);\n        \n        // Corner reinforcement\n        for (x = [-20, 20])\n            for (y = [-20, 20])\n                translate([x, y, 0])\n                cube([4, 4, 40], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat base\n    union() {\n        // Base\n        translate([0, 0, 0])\n        cube([80, 80, 20], center = true);\n        \n        // Seat cushion\n        translate([0, 0, 20])\n        seat_cushion();\n        \n        // Backrest\n        translate([0, 25, 20])\n        back_rest();\n        \n        // Armrests\n        translate([30, 25, 50])\n        armrests();\n        translate([30, 25, 50])\n        armrests();\n        \n        // Legs\n        leg_structure();\n    }\n    \n    // Support frame\n    support_frame();\n    \n    // Assembly\n    union() {\n        translate([0, 0, -25])\n        support_frame();\n        translate([0, 0, 20])\n        seat_cushion();\n        translate([0, 0, 20])\n        back_rest();\n        translate([0, 0, 20])\n        armrests();\n        translate([0, 0, 20])\n        armrests();\n        \n        // Corner reinforcements\n        for (x = [-20, 20])\n            for (y = [-20, 20])\n                translate([x, y, 0])\n                cube([4, 4, 40], center = true);\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "thick cylinder",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 13,
      "code": "// Medium-complexity 3D-printable box for holding small electronics\n// Overall dimensions: 100 x 50 x 50 mm (length x width x height)\n\n// Parameters\nbox_w = 100;\nbox_l = 50;\nbox_h = 50;\nwall_t = 2;          // Minimum wall thickness for 3D printing\nwall_h = 2;           // Thickness of the box\n\n// Base plate\nmodule base_plate() {\n    difference() {\n        cube([box_w, box_l, box_h], center=true);\n        translate([0, 0, -wall_h/2]) cube([box_w+4, box_l+4, box_h+4], center=true);\n    }\n}\n\n// Top plate\nmodule top_plate() {\n    difference() {\n        cube([box_w, box_l, box_h], center=true);\n        translate([0, 0, wall_h/2]) cube([box_w+4, box_l+4, box_h+4], center=true);\n    }\n}\n\n// Side panels\nmodule side_panels() {\n    for (x = [-box_w/2 + wall_t, box_w/2 - wall_t]) {\n        translate([x, 0, 0]) {\n            difference() {\n                cube([box_w, box_l, box_h], center=true);\n                translate([0, 0, -wall_h/2]) cube([box_w+4, box_l+4, box_h+4], center=true);\n            }\n        }\n    }\n}\n\n// Bottom panel\nmodule bottom_panel() {\n    difference() {\n        cube([box_w, box_l, box_h], center=true);\n        translate([0, 0, -wall_h/2]) cube([box_w+4, box_l+4, box_h+4], center=true);\n    }\n}\n\n// Front panel\nmodule front_panel() {\n    difference() {\n        cube([box_w, box_l, box_h], center=true);\n        translate([0, 0, -wall_h/2]) cube([box_w+4, box_l+4, box_h+4], center=true);\n    }\n}\n\n// Front face\nmodule front_face() {\n    difference() {\n        cube([box_w, box_l, box_h], center=true);\n        translate([0, 0, -wall_h/2]) cube([box_w+4, box_l+4, box_h+4], center=true);\n    }\n}\n\n// Rear panel\nmodule rear_panel() {\n    difference() {\n        cube([box_w, box_l, box_h], center=true);\n        translate([0, 0, -wall_h/2]) cube([box_w+4, box_l+4, box_h+4], center=true);\n    }\n}\n\n// Mounting holes\nmodule mounting_holes() {\n    for (x = [-box_w/2 + wall_t, box_w/2 - wall_t]) {\n        for (y = [-box_l/2 + wall_t, box_l/2 - wall_t]) {\n            translate([x, y, 0]) {\n                cylinder(h=wall_h, r=wall_t/2, center=true);\n            }\n        }\n    }\n}\n\n// Ventilation slots (top)\nmodule ventilation_slots() {\n    for (z = [box_h/2 - 5, box_h - 5]) {\n        translate([0, 0, z]) {\n            cube([box_w*0.7, box_l*0.7, 2], center=true);\n        }\n    }\n}\n\n// Power vent\nmodule power_vent() {\n    difference() {\n        cube([box_w*0.7, box_l*0.7, 6], center=true);\n        translate([0, 0, 2]) cube([box_w*0.7, box_l*0.7, 4], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    difference() {\n        translate([0, 0, 0]) {\n            base_plate();\n        }\n        translate([0, 0, -box_h/2]) {\n            top_plate();\n        }\n        side_panels();\n        bottom_panel();\n        front_panel();\n        rear_panel();\n        mount_holes();\n        ventilation_slots();\n        power_vent();\n    }\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: WARNING: Ignoring unknown module 'mount_holes' in file thick_cylinder.scad, line 113\nGeometries in cache: 11\nGeometry cache size in bytes: 7280\nCGAL Polyhedrons in cache: 10\nCGAL cache size in bytes: ",
      "vlm_response": null
    },
    {
      "object": "frustum",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 99,
      "code": "// Realistic 3D-printable water bottle \u2013 medium complexity, ~80 mm tall\n\n// Overall dimensions: ~100 mm high, ~70 mm diameter, ~35 mm thick\n\n// Wall thickness: 1 mm for 3D-printing without support\nwall = 1;\n\n// Bottle body walls \u2013 thin shell for printing\nbody_walls = 2;\n\n// Neck/handle detail\nneck_diameter = 12;\nneck_height = 35;\n\n// Bottle opening \u2013 slight taper for realistic shape\nopening_diameter = 11;\n\n// Base details \u2013 decorative ring\nbase_ring_height = 4;\nbase_ring_diameter = 70;\n\n// Main body\nmodule body() {\n    difference() {\n        // Outer shell\n        union() {\n            // Main cylindrical body\n            cylinder(h = body_walls, r = 25);\n            \n            // Rounded top edge\n            translate([0, 0, body_walls])\n                cylinder(h = 5, r1 = 25, r2 = 25);\n        }\n        \n        // Hollow out for 3D printing\n        scale([1, 1, 1.2])\n            body();\n    }\n}\n\n// Neck/handle\nmodule neck() {\n    difference() {\n        // Neck tube\n        cylinder(h = neck_height, r1 = 20, r2 = 18);\n        \n        // Handle grip\n        translate([0, 0, neck_height * 0.4])\n            cylinder(h = 10, r1 = 16, r2 = 12);\n    }\n}\n\n// Base ring for water resistance\nmodule base_ring() {\n    difference() {\n        cylinder(h = base_ring_height, r = 20);\n        cylinder(h = 2, r1 = 20, r2 = 20);\n    }\n}\n\n// Water reservoir details\nmodule water_reservoir() {\n    difference() {\n        // Main reservoir cylinder\n        cylinder(h = 20, r = 20);\n        \n        // Fill line\n        translate([0, 0, 20])\n            cylinder(h = 4, r1 = 20, r2 = 18);\n    }\n}\n\n// Bottle opening\nmodule bottle_opening() {\n    difference() {\n        translate([0, 0, body_walls + 10])\n            cylinder(h = 15, r1 = 11, r2 = 7);\n        \n        // Wall thickness\n        cylinder(h = 15, r1 = 11, r2 = 7);\n    }\n}\n\n// Bottom details \u2013 decorative ring\nmodule bottom_details() {\n    difference() {\n        cylinder(h = 2, r = 20);\n        translate([0, 0, -1])\n            cylinder(h = 3, r1 = 20, r2 = 20);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    neck();\n    base_ring();\n    water_reservoir();\n    bottle_opening();\n    bottom_details();\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: ERROR: Recursion detected calling module 'body' in file frustum.scad, line 23\nTRACE: called by 'body' in file frustum.scad, line 37\nTRACE: called by 'scale' in file frustum.scad, line 36\nTRACE: called",
      "vlm_response": null
    },
    {
      "object": "cone",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 16,
      "code": "// Realistic Medium-Complexity Kitchen Utensil \u2013 Wooden Spoon\n// Designed for 3D printing with proper wall thickness and no steep overhangs\n\n// Overall dimensions\nspoon_height = 60;\nhandle_length = 80;\nhandle_diameter = 12;\ntine_height = 15;\ntine_diameter = 18;\nfork_length = 35;\n\n// Wall thickness for 2mm walls\nwall_thickness = 2;\n\n// Main body module\nmodule spoon_body() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h=spoon_height, d1=20, d2=22);\n        \n        // Hollow out center for thinner walls\n        translate([0, 0, 1])\n            cylinder(h=spoon_height - 10, d1=20, d2=20);\n    }\n}\n\n// Wooden handle with grip texture\nmodule handle() {\n    difference() {\n        // Main handle shaft\n        cylinder(h=25, d=handle_diameter, $fn=32);\n        \n        // Grip texture grooves\n        for(i=[0:8]) {\n            translate([0, 0, i*5])\n                cylinder(h=1, d1=handle_diameter*0.7, d2=handle_diameter*0.8);\n        }\n        \n        // Mouth cavity\n        translate([0, 0, -10])\n            cylinder(h=10, d=handle_diameter);\n    }\n}\n\n// Tine assembly with ergonomic grip\nmodule tine() {\n    difference() {\n        // Main tine body\n        cylinder(h=tine_height, d=tine_diameter, $fn=32);\n        \n        // Grip texture\n        for(i=[0:4]) {\n            translate([0, 0, i*tine_height/2])\n                cylinder(h=1, d1=tine_diameter*0.8, d2=tine_diameter*0.7);\n        }\n        \n        // Tine head\n        translate([0, 0, 0])\n            cylinder(h=tine_height, d=tine_diameter*0.8);\n    }\n}\n\n// Fork assembly\nmodule fork() {\n    // Main fork shaft\n    cylinder(h=5, d=fork_length, $fn=32);\n    \n    // Tines\n    for(i=[0:4]) {\n        translate([0, 0, i*tine_height/2 - 15])\n            tine();\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    spoon_body();\n    \n    // Handle\n    translate([0, 0, -handle_length/2])\n        handle();\n    \n    // Tines\n    translate([0, 0, -tine_height/2])\n        tine();\n    \n    // Fork\n    translate([0, 0, 0])\n        fork();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "thin cylinder",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 33,
      "code": "// Realistic Medium-Complexity 3D-Printable Cabbage\n// Features organic curves, realistic leaves, and slight staleness\n\n// Overall dimensions for 2 mm walls\n$fn = 32;\n\n// Main cabbage body\nmodule cabbage_body() {\n    difference() {\n        // Main rounded body\n        hull() {\n            scale([1.2, 1.2, 1]) sphere(d = 30);\n            \n            // Hollow out the center\n            translate([0, 0, -10]) scale([0.8, 0.8, 0.8]) sphere(d = 22);\n        }\n        \n        // Cutouts for leaves\n        for (i = [0:3]) {\n            translate([0, 0, -10 + i * 45]) scale([0.8, 0.8, 0.8]) sphere(d = 25);\n        }\n    }\n}\n\n// Main leaf segments\nmodule cabbage_leaf_segments() {\n    // Start with a large leaf base\n    translate([0, 0, -20]) scale([0.8, 0.8, 0.8]) sphere(d = 25);\n    \n    for (i = [0:4]) {\n        // Create 5 leaf segments\n        translate([0, 0, -20 + i * 10]) rotate([0, -10, 0])\n            scale([0.8, 0.8, 0.8]) sphere(d = 25);\n    }\n}\n\n// Root structure\nmodule root_structure() {\n    difference() {\n        // Main root cylinder\n        cylinder(h = 15, d = 12);\n        \n        // Hollow out the center\n        translate([0, 0, -15]) scale([0.8, 0.8, 0.8]) sphere(d = 15);\n    }\n}\n\n// Leaves\nmodule cabbage_leaves() {\n    for (i = [0:3]) {\n        // Generate 2 leaves per segment\n        leaf_height = 12;\n        leaf_length = 25;\n        \n        for (j = [0:3]) {\n            translate([0, 0, -leaf_height/2 - 5 + j * leaf_length/3])\n                scale([0.8, 0.8, 0.8]) sphere(d = 12);\n        }\n    }\n}\n\n// Stalk\nmodule cabbage_stalk() {\n    // Main stalk cylinder\n    cylinder(h = 18, d = 6);\n    \n    // Add slight staleness detail\n    translate([0, 0, -18]) scale([0.9, 0.9, 0.9]) sphere(d = 4);\n}\n\n// Main assembly\nunion() {\n    cabbage_body();\n    cabbage_leaf_segments();\n    root_structure();\n    cabbage_leaves();\n    cabbage_stalk();\n}",
      "inference_error": null,
      "render_error": "Rendering timeout (>60s)",
      "vlm_response": null
    },
    {
      "object": "star",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 80,
      "code": "// OpenSCAD code for a realistic-looking mushroom with medium complexity\n// Size: 60 mm tall, designed for 3D printing with minimal supports\n\n// Main mushroom body\nmodule mushroom_body() {\n    difference() {\n        // Main rounded dome\n        scale([1, 1.2, 0.8]) sphere(d=12, $fn=32);\n        \n        // Add small indentations for texture\n        for (i = [0:3]) {\n            translate([0, 0, 1.5 + i * 1.5]) rotate([0, 0, 0]) sphere(d=11, $fn=24);\n        }\n    }\n}\n\n// Stem with leaves\nmodule stem() {\n    difference() {\n        union() {\n            // Main stem\n            cylinder(h=8, d1=4, d2=3, $fn=24);\n            \n            // Leaf base\n            translate([0, 0, 2]) sphere(d=3, $fn=32);\n            \n            // Leaf tips\n            for (i = [0:3]) {\n                translate([0, 0, i * 5 + 2]) rotate([0, 10, 0]) sphere(d=1.5, $fn=24);\n            }\n        }\n        \n        // Add veins\n        for (i = [0:3]) {\n            translate([0, 0, i * 4.5 + 0.5]) rotate([0, 0, 0]) \n                scale([1, 0.8, 0.6]) sphere(d=1.8, $fn=24);\n        }\n    }\n}\n\n// Cap with pores\nmodule cap() {\n    difference() {\n        sphere(d=8, $fn=32);\n        \n        // Pores\n        for (i = [0:4]) {\n            translate([-2, -1, 0]) sphere(d=3.5, $fn=32);\n        }\n    }\n}\n\n// Cuticle - textured surface\nmodule cuticle() {\n    difference() {\n        union() {\n            // Main surface\n            translate([0, 0, 5]) sphere(d=4, $fn=32);\n            \n            // Small ridges\n            for (i = [0:1]) {\n                translate([0, 0, 2 - i * 3]) cube([4, 1, 1], center=true);\n            }\n        }\n        \n        // Small crevices\n        for (i = [0:3]) {\n            translate([0, 0, 2 - i * 3.5]) cube([4, 0.8, 0.6], center=true);\n        }\n    }\n}\n\n// Water droplets for realism\nmodule droplets() {\n    // Central water droplet\n    sphere(d=1.5, $fn=32);\n    \n    // Three droplets around base\n    for (i = [0:1]) {\n        translate([0, 0, 3 - i * 3.5]) sphere(d=1.2, $fn=32);\n    }\n}\n\n// Assembly\nunion() {\n    mushroom_body();\n    stem();\n    cap();\n    cuticle();\n    droplets();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "five-pointed star",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 25,
      "code": "// Slinky toy\n// Overall dimensions: ~120mm long\n\n$fn = 36;  // Smooth curves\n\nmodule slinky() {\n    // Main cable\n    linear_extrude(height = 1.5)\n        offset(-length/2 + 5)\n            circle(r = 1.2);\n\n    // End connectors\n    difference() {\n        linear_extrude(height = 1.5)\n            offset(length/2 - 5)\n                circle(r = 1.1);\n\n        // Cable end cap\n        translate([0, 0, 0])\n            cylinder(h = 2, r = 1, $fn = 36);\n    }\n}\n\n// Assembly\nslinky();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "crescent",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 15,
      "code": "// Realistic 3D-Printable Crest - Medium Complexity\n// All dimensions in mm, suitable for FDM printing\n\n// Overall dimensions\ncrest_length = 80;\ncrest_width = 40;\ncrest_height = 10;\n\n// Main crest shape\nmodule crest_plate(width, height, thickness) {\n    difference() {\n        // Main body\n        cube([width, height, thickness]);\n        \n        // Hollow out to avoid overhangs\n        translate([0, 0, thickness/2])\n            cube([width - 2*wall_thickness, height - 2*wall_thickness, thickness - wall_thickness]);\n        \n        // Top edge detail - small triangular cutouts\n        for (x = [-1, 1])\n            for (y = [-1, 1])\n                translate([x * (width/2 - 1), y * (height/2 - 1), -height/2 - 1])\n                    cube([wall_thickness + 0.5, 1, 1], center = true);\n        \n        // Bottom edge detail - small square cuts\n        for (x = [-1, 1])\n            for (y = [-1, 1])\n                translate([x * (width/2 - 1), y * (height/2 - 1), -height/2 - 1])\n                    cube([wall_thickness + 0.5, wall_thickness, wall_thickness], center = true);\n    }\n}\n\n// Royal crest motif - stylized heraldic elements\nmodule heraldic_motif(width, height, thickness, angle_degrees) {\n    // Base for crest\n    difference() {\n        cube([width, height, thickness]);\n        translate([0, 0, -0.1])\n            cube([width - 2*wall_thickness, height - 2*wall_thickness, thickness - 0.1]);\n    }\n\n    // Main crest plate with detailed features\n    for (x = [-1, 1])\n        for (y = [-1, 1])\n            translate([x * (width/2 - 1), y * (height/2 - 1), 0])\n                scale([1, 1, 1])\n                    heraldic_motif(width * 0.8, height * 0.8, thickness * 0.8, angle_degrees);\n}\n\n// Decorative border ring around crest\nmodule border_ring(width, height, thickness) {\n    difference() {\n        cube([width, height, thickness]);\n        translate([0, 0, thickness/2])\n            cube([width - 2*wall_thickness, height - 2*wall_thickness, thickness - 0.1]);\n    }\n}\n\n// Individual crest element\nmodule crest_element(x_pos, y_pos, angle) {\n    translate([x_pos, y_pos, 0])\n        difference() {\n            crest_plate();\n            \n            // Raised crest top\n            translate([0, 0, -crest_height/2 - 0.1])\n                cube([crest_length, crest_width, crest_height/2 - 0.2]);\n            \n            // Crest edges\n            for (i = [-1, 1])\n                translate([i * (crest_length/2 - 1), i * (crest_width/2 - 1), 0])\n                    cube([crest_width, crest_height/2 - 0.2, 0.2]);\n        }\n}\n\n// Main crest assembly\nunion() {\n    // Central crest plate\n    crest_plate();\n    \n    // Decorative border\n    translate([0, 0, -crest_height/2 - 0.1])\n        border_ring(crest_length, crest_width, crest_height);\n    \n    // Crest elements around central crest\n    for (i = [-1, 1])\n        for (j = [-1, 1])\n            crest_element(i * crest_length/2 - crest_length/4, j * crest_width/2 - crest_width/4, 0);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "8-pointed star",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 74,
      "code": "// OpenSCAD model of a realistic 8-pointed star\n// All sizes are in millimeters, optimized for 3D printing\n// No overhangs, 1.5 mm wall thickness for 2 mm nozzle\n\n// Main body\nunion() {\n    // Central body sphere\n    sphere(d = 25, $fn = 64);\n    \n    // Top 4 points\n    for (z = [-10:5:10]) {\n        translate([0, 0, z]) {\n            scale([1, 1, 1]) {\n                sphere(d = 12, $fn = 64);\n            }\n        }\n    }\n    \n    // Bottom 4 points\n    for (z = [-10:5:10]) {\n        translate([0, 0, -z]) {\n            scale([1, 1, 1]) {\n                sphere(d = 12, $fn = 64);\n            }\n        }\n    }\n    \n    // Central apex\n    cylinder(h = 3, r1 = 3, r2 = 3, $fn = 64);\n}",
      "inference_error": null,
      "render_error": "Rendering timeout (>60s)",
      "vlm_response": null
    },
    {
      "object": "6-pointed star",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 66,
      "code": "// Star module (realistic style, 3D-printable)\n// Medium complexity - 3D-print friendly, no overhangs >45\u00b0, no steep slopes >30\u00b0\n\nmodule star_body() {\n    // Central sphere with slight bulge\n    difference() {\n        sphere(d = 12, $fn = 64);\n        translate([0, 0, 2]) sphere(d = 10, $fn = 64);\n    }\n    \n    // Outer ring\n    difference() {\n        cylinder(h = 3, r = 8, $fn = 64);\n        translate([0, 0, -0.1]) cylinder(h = 3.2, r = 7, $fn = 64);\n    }\n    \n    // Points\n    for (i = [0:5]) {\n        // Central point\n        translate([0, 0, 0]) sphere(d = 1.5, $fn = 64);\n        \n        // Top point\n        translate([0, 0, 0]) sphere(d = 1.5, $fn = 64);\n        \n        // Bottom point\n        translate([0, 0, 0]) sphere(d = 1.5, $fn = 64);\n        \n        // Side points (right side)\n        for (side = [-1, 1]) {\n            translate([side * 3.5, 0, 0]) sphere(d = 1.2, $fn = 64);\n        }\n        \n        // Side points (left side)\n        for (side = [-1, 1]) {\n            translate([-side * 3.5, 0, 0]) sphere(d = 1.2, $fn = 64);\n        }\n    }\n}\n\nmodule star_edges() {\n    // Upper ridges\n    for (i = [0:2]) {\n        rotate([0, 0, i * 90]) {\n            translate([0, 0, 0]) cube([2, 1, 2], center = true);\n        }\n    }\n    \n    // Lower ridges\n    for (i = [0:2]) {\n        rotate([0, 0, i * 90]) {\n            translate([0, 0, 0]) cube([2, 1, 2], center = true);\n        }\n    }\n}\n\nmodule star_base() {\n    // Solid base\n    cube([6, 4, 2], center = true);\n    \n    // Inner ring\n    difference() {\n        cylinder(h = 3, r = 8, $fn = 64);\n        translate([0, 0, 2]) cylinder(h = 3.2, r = 7, $fn = 64);\n    }\n    \n    // Bottom plate\n    difference() {\n        cylinder(h = 1.5, r = 7, $fn = 64);\n        translate([0, 0, -0.1]) cylinder(h = 1.5, r = 7, $fn = 64);\n    }\n}\n\nmodule star_point() {\n    // Center point\n    translate([0, 0, 0]) sphere(d = 1.5, $fn = 64);\n}\n\n// Assembly\nscale([1.25, 1.25, 1]) {\n    star_body();\n    star_edges();\n    star_base();\n    star_point();\n}",
      "inference_error": null,
      "render_error": "Rendering timeout (>60s)",
      "vlm_response": null
    },
    {
      "object": "cube with hole",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 63,
      "code": "// Realistic 3D-printable medium-complexity kitchen appliance - Blender\n// Designed for FDM printing (no support needed)\n\n// Overall dimensions (mm)\nbody_w = 40;\nbody_h = 60;\nbody_d = 45;\n\n// Wall thickness for FDM printing (0.4 mm)\nwall = 1.2;\n\n// Main body\ndifference() {\n    // Outer shell\n    cube([body_w, body_d, body_h], center=true);\n\n    // Hollow out interior\n    translate([0, 0, body_h/2])\n    cube([body_w - 2*wall, body_d - 2*wall, body_h - wall], center=true);\n}\n\n// Base with weight distribution\ndifference() {\n    // Base plate\n    cube([body_w + 4, body_d + 4, body_h], center=true);\n\n    // Weight relief ribs\n    for (x = [-body_w/2 + 8:8:body_w/2 - 8])\n        for (y = [-body_d/2 + 8:8:body_d/2 - 8])\n            translate([x, y, -body_h/2 - 1])\n                cylinder(h=2, r=2.5);\n}\n\n// Lid with handle\ndifference() {\n    // Lid shell\n    translate([0, 0, body_h/2 - 1])\n    cube([body_w + 4, body_d + 4, 3], center=true);\n\n    // Handle grip\n    translate([0, -body_d/2 + 1, body_h/2 - 1])\n    cylinder(h=10, r=3, $fn=20);\n}\n\n// Control panel\ndifference() {\n    // Panel front\n    translate([0, body_d/2 + 1, body_h/2 - 1])\n    cube([body_w + 4, 2, 2], center=true);\n\n    // Buttons\n    for (i = [0:3]) {\n        translate([-body_w/2 - 2, body_d/2 + 1, body_h/2 - 1 - i * 1.5])\n            cube([2, 1, 1], center=true);\n    }\n\n    // Buttons\n    translate([-body_w/2 - 2, body_d/2 + 1, body_h/2 - 1 - i * 1.5])\n        cube([2, 1, 1], center=true);\n}\n\n// Turntable\ndifference() {\n    // Base\n    translate([0, body_d/2, -body_h/2])\n    cube([body_w + 4, body_d + 4, body_h], center=true);\n\n    // Turntable arm\n    translate([0, body_d/2, -body_h/2])\n    cylinder(h=3, r=2);\n}\n\n// Water jar\ndifference() {\n    // Jar body\n    translate([0, -body_d/2 + 3, -body_h/2 + 2])\n    cube([body_w + 2, body_d + 4, 6], center=true);\n\n    // Jar base\n    translate([0, -body_d/2 + 3, -body_h/2 + 2])\n    cube([body_w + 4, body_d + 4, 3], center=true);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "donut",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 8,
      "code": "// Scone model - realistic style, medium complexity\n// All walls are 2mm thick for 3D printing\n\nmodule scone_base() {\n    difference() {\n        // Main rounded base disc\n        cylinder(h=2, r1=40, r2=30, $fn=50);\n        // Rounded bottom edge\n        translate([0,0,2]) cylinder(h=2, r1=30, r2=20, $fn=50);\n    }\n    \n    // Scone top curve\n    difference() {\n        cylinder(h=2, r1=25, r2=25, $fn=50);\n        translate([0,0,2]) cylinder(h=2, r1=25, r2=25, $fn=50);\n    }\n}\n\nmodule scone_top() {\n    difference() {\n        // Base cone\n        cylinder(h=1, r1=25, r2=25, $fn=50);\n        // Add slight dome to top for realism\n        translate([0,0,1]) sphere(r=1.5, $fn=50);\n    }\n    \n    // Scone ring on top\n    difference() {\n        cylinder(h=0.5, r1=30, r2=20, $fn=50);\n        translate([0,0,1]) sphere(r=30, $fn=50);\n    }\n}\n\nmodule scone_markings() {\n    // Simple dots on top surface\n    for(i=[0:3]) {\n        for(j=[0:1]) {\n            translate([i*5, j*5, 0]) sphere(r=1.2, $fn=20);\n        }\n    }\n}\n\nmodule scone_crust() {\n    difference() {\n        cylinder(h=0.5, r1=20, r2=20, $fn=50);\n        translate([0,0,2]) cylinder(h=0.5, r1=20, r2=20, $fn=50);\n    }\n}\n\n// Main assembly\nunion() {\n    scone_base();\n    scone_top();\n    scone_markings();\n    scone_crust();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "interlocking cubes",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 87,
      "code": "// Square-ish cylinder with rounded edges and small holes\n// Dimensions: 80x80x60mm\n\n$fn = 32;\n\nmodule square_cylinder(h, r_min, r_max, r_hole_d) {\n    difference() {\n        // Main rounded square body\n        hull() {\n            translate([r_min, r_min, 0]) cube([r_max, r_max, h]);\n            translate([r_max, r_max, 0]) cube([r_max, r_max, h]);\n            translate([r_max, r_max, h - r_hole_d]) cube([r_max, r_max, r_hole_d]);\n        }\n\n        // Hollow out the center\n        translate([0, 0, -1])\n            cube([r_max*2, r_max*2, h - 2*r_hole_d], center = true);\n    }\n}\n\n// Create the rounded cylinder\nsquare_cylinder(60, 25, 25, 5);",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "cube with spheres",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 51,
      "code": "// Realistic Toy Car - Medium Complexity\n// Dimensions for 3D printing (approx 70 mm long)\n\n$fn = 36;           // Smooth curves\nwall = 2;           // Wall thickness for 3D printing\nbody_len = 70;       // Overall car length\nbody_dia = 18;       // Main body diameter\nwheel_dia = 12;     // Wheel diameter\nwheel_len = 12;     // Wheel width\nwheel_h = 10;\n\n// Main body shell\nmodule body() {\n    difference() {\n        // Outer rounded body\n        minkowski() {\n            cube([body_len, body_dia, body_len*0.3], center = true);\n            sphere(d = body_dia/2, $fn = 36);\n        }\n        // Carport opening for doors\n        translate([body_len*0.3, -body_dia/2 - 1, body_len*0.2]) {\n            cube([body_len*0.4, 1, body_len*0.1], center = true);\n        }\n    }\n}\n\n// Wheel assembly\nmodule wheels() {\n    // Front wheels\n    translate([body_len*0.3, body_dia/2 - wheel_len, -body_len*0.2]) {\n        difference() {\n            cylinder(h = wheel_h, d = wheel_dia, center = false);\n            cylinder(h = wheel_h, d = wheel_dia - wall*2, center = false);\n        }\n        \n        // Wheel hub\n        cylinder(h = wheel_h - 0.5, d = wheel_dia/2, center = true);\n        \n        // Axle\n        cylinder(h = 3, d = 1.5, center = true);\n    }\n    \n    // Rear wheels\n    translate([body_len*0.3, -body_dia/2 + wheel_len, -body_len*0.2]) {\n        difference() {\n            cylinder(h = wheel_h, d = wheel_dia, center = false);\n            cylinder(h = wheel_h, d = wheel_dia - wall*2, center = false);\n        }\n        \n        // Wheel hub\n        cylinder(h = wheel_h - 0.5, d = wheel_dia/2, center = true);\n        \n        // Axle\n        cylinder(h = 3, d = 1.5, center = true);\n    }\n}\n\n// Front bumper\nmodule bumper() {\n    difference() {\n        cube([body_len*0.4, 4, body_len*0.2], center = true);\n        translate([body_len*0.3, 0, body_len*0.1]) {\n            cylinder(h = 2, d = 2, center = true);\n        }\n    }\n}\n\n// Car body\nmodule car_body() {\n    difference() {\n        // Main body\n        translate([0, 0, body_len*0.1]) {\n            sphere(d = body_dia, $fn = 36);\n        }\n        \n        // Windshield\n        translate([0, body_dia/2 - 3, body_len*0.2]) {\n            difference() {\n                cylinder(h = 1, d = 12, center = true);\n                cylinder(h = 1.5, d = 8, center = true);\n            }\n        }\n        \n        // Car window\n        translate([0, body_dia/2 - 4, body_len*0.1]) {\n            difference() {\n                cylinder(h = 0.5, d = 10, center = true);\n                cylinder(h = 1.5, d = 8, center = true);\n            }\n        }\n        \n        // Front headlights\n        translate([-body_len*0.3, body_dia/2, body_len*0.2]) {\n            sphere(d = 2, $fn = 16);\n        }\n        \n        translate([-body_len*0.3, -body_dia/2, body_len*0.2]) {\n            sphere(d = 2, $fn = 16);\n        }\n    }\n}\n\n// Details\nmodule details() {\n    // Car emblem\n    translate([body_len*0.3, body_dia/2 + 0.5, body_len*0.1]) {\n        difference() {\n            cylinder(h = 0.5, d = 2.5, center = true);\n            cylinder(h = 0.8, d = 1.5, center = true);\n        }\n        \n        // Logo\n        translate([0, 0, 0.5]) {\n            cube([1, 0.5, 0.5], center = true);\n        }\n    }\n    \n    // Side mirrors\n    translate([-body_len*0.3, body_dia/2 - 1, body_len*0.1]) {\n        mirror([0, 1, 0]) {\n            difference() {\n                cube([2, 2, 2], center = true);\n                cube([2, 2, 2], center = true);\n            }\n            cylinder(h = 1, d = 2, center = true);\n        }\n        translate([-body_len*0.3, body_dia/2 - 1, body_len*0.1]) {\n            mirror([0, 1, 0]) {\n                difference() {\n                    cube([2, 2, 2], center = true);\n                    cube([2, 2, 2], center = true);\n                }\n                cylinder(h = 1, d = 2, center = true);\n            }\n        }\n        \n        translate([-body_len*0.3, -body_dia/2 + 1, body_len*0.1]) {\n            mirror([0, 1, 0]) {\n                difference() {\n                    cube([2, 2, 2], center = true);\n                    cube([2, 2, 2], center = true);\n                }\n                cylinder(h = 1, d = 2, center = true);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    color(\"red\") {\n        body();\n        car_body();\n        details();\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "sierpinski pyramid",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 58,
      "code": "// Sserifinski pyramid model - realistic style, medium complexity\n\n$fn = 32;               // Smooth curves for better appearance\nwall_thickness = 1.5;    // Base plate thickness for printing\nscale_factor = 1;        // Scale for efficient 3D printing\n\nmodule base(d = 80, h = 5) {\n    difference() {\n        cube([d, d, h]);\n        translate([0, 0, -0.1])\n            scale([1, 1, 1])\n                cube([d, d, h+0.2]);\n    }\n}\n\nmodule base_plate(d = 80, h = 5) {\n    difference() {\n        cube([d, d, h]);\n        translate([0, 0, -0.1])\n            scale([1, 1, 1])\n                cube([d, d, h+0.2]);\n    }\n}\n\nmodule pyramid_base(d = 80, h = 30, r = 12) {\n    difference() {\n        cylinder(h = h, r = r, center = false);\n        translate([r, 0, 0])\n            cylinder(h = h + 0.1, r = r - wall_thickness, center = false);\n    }\n}\n\nmodule pyramid_spire(d = 80, h = 25, r = 6) {\n    difference() {\n        cylinder(h = h, r = r, center = false);\n        translate([r, 0, 0])\n            cylinder(h = h + 0.1, r = r - wall_thickness, center = false);\n    }\n}\n\nmodule pyramid_base_plate(d = 80, h = 5, r = 12) {\n    difference() {\n        cube([d, d, h]);\n        translate([0, 0, -0.1])\n            scale([1, 1, 1])\n                cube([d, d, h+0.2]);\n    }\n}\n\nmodule pyramid_spire_base(d = 80, h = 25, r = 6) {\n    difference() {\n        cylinder(h = h, r = r, center = false);\n        translate([r, 0, 0])\n            cylinder(h = h + 0.1, r = r - wall_thickness, center = false);\n    }\n}\n\nmodule pyramid_spire_plate(d = 80, h = 25, r = 6) {\n    difference() {\n        cube([d, d, h]);\n        translate([r, 0, 0])\n            cube([d, d, h+0.2]);\n    }\n}\n\nmodule support_columns(height = 30, r = 8, wall = 1.5) {\n    difference() {\n        cylinder(h = height, r = r, center = false);\n        translate([0, 0, -0.1])\n            cylinder(h = height + 0.1, r = r - wall, center = false);\n    }\n}\n\nmodule support_columns_base(r = 8, h = 30, wall = 1.5) {\n    difference() {\n        cylinder(h = h, r = r, center = false);\n        translate([0, 0, -0.1])\n            cylinder(h = h + 0.1, r = r - wall, center = false);\n    }\n}\n\nmodule support_columns_spire(r = 8, h = 25, wall = 1.5) {\n    difference() {\n        cylinder(h = h, r = r, center = false);\n        translate([0, 0, 0])\n            cylinder(h = h + 0.1, r = r - wall, center = false);\n    }\n}\n\nmodule base_plate_support(r = 10, h = 5, wall = 2) {\n    difference() {\n        cylinder(h = h, r = r, center = false);\n        translate([0, 0, -0.1])\n            cylinder(h = h + 0.1, r = r - wall, center = false);\n    }\n}\n\nmodule base_plate_spire(r = 8, h = 25, wall = 3) {\n    difference() {\n        cylinder(h = h, r = r, center = false);\n        translate([0, 0, -0.1])\n            cylinder(h = h + 0.1, r = r - wall, center = false);\n    }\n}\n\nmodule pyramid_spire_base(r = 8, h = 25, wall = 3) {\n    difference() {\n        cylinder(h = h, r = r, center = false);\n        translate([r, 0, 0])\n            cylinder(h = h + 0.1, r = r - wall, center = false);\n    }\n}\n\nmodule pyramid_spire_plate(r = 8, h = 25, wall = 3) {\n    difference() {\n        cylinder(h = h, r = r, center = false);\n        translate([r, 0, 0])\n            cylinder(h = h + 0.1, r = r - wall, center = false);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base\n    translate([0, 0, 0])\n        base_plate(d = 80, h = 5);\n\n    // Support columns\n    translate([0, 0, h * 0.1])\n        support_columns(h = 30);\n\n    // Pyramid base\n    translate([0, 0, h * 0.1])\n        translate([0, 0, 0])\n            pyramid_base(d = 80, h = 30, r = 12);\n\n    // Pyramid spire\n    translate([0, 0, h * 0.1])\n        translate([0, 0, 0])\n            translate([0, 0, 0])\n                pyramid_spire_base(d = 80, h = 25, wall = 1.5);\n\n    // Pyramid base plate\n    translate([0, 0, h * 0.1])\n        translate([0, 0, 0])\n            pyramid_base_plate(d = 80, h = 5, r = 12);\n\n    // Pyramid spire plate\n    translate([0, 0, h * 0.1])\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n                pyramid_spire_plate(d = 80, h = 25, wall = 3);\n\n    // Support columns\n    support_columns(h = 25);\n    support_columns(h = 25);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "flower",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 16,
      "code": "// Flamboyance - A whimsical, slightly grotesque, decorative flamboyant butterfly\n// Overall size: ~60mm wingspan, 15mm body length\n\n// Wing parameters - scaled for 3D printing\nwing_length = 45;\nwing_width = 18;\nwing_thickness = 3;\n\n// Body parameters - scaled for 3D printing\nbody_length = 25;\nbody_height = 12;\n\n// Antenna parameters\nantennae_height = 8;\n\n// Body segments\nmodule body_segments(length, width) {\n    for(i = [0:1:length-10]) {\n        translate([i, 0, 0]) {\n            union() {\n                // Main body segments\n                for(step = [0:2:length-30]) {\n                    translate([step, 0, -body_height/2 + 2]) {\n                        scale([1, 0.8, 0.7]) cube([width, width, body_height], center=true);\n                    }\n                }\n                \n                // Wing segment\n                translate([0, body_height*0.6, 0]) {\n                    scale([0.5, 0.4, 0.3]) cube([body_length*0.8, body_height*0.8, wing_thickness], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Wing membrane with veins\nmodule wing_membrane() {\n    difference() {\n        // Main wing surface\n        scale([1, 1.2, 0.8]) sphere(r=10);\n        \n        // Veins - stylized as ridges\n        for(i = [0:4]) {\n            translate([0, -i*3, 0]) {\n                rotate([0, 90, 0]) {\n                    difference() {\n                        cylinder(h=3, r1=3, r2=1);\n                        for(j = [0:3]) {\n                            rotate([0, 0, j*120]) {\n                                translate([0, 0, -1]) cube([2, 1, 1], center=true);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        // Wing base\n        scale([1.1, 1.1, 1]) sphere(r=8);\n    }\n}\n\n// Antenna segments\nmodule antenna() {\n    // Main stem\n    cylinder(h=2, r1=3, r2=0.5);\n    \n    // Stem segments\n    for(i = [0:1:2]) {\n        translate([0, 0, i*3]) {\n            scale([0.9, 0.9, 0.6]) sphere(r=1.5);\n        }\n    }\n    \n    // Antenna tip\n    translate([0, 0, 2]) {\n        cylinder(h=1, r1=2.5, r2=0.5);\n    }\n}\n\n// Head detail\nmodule head() {\n    union() {\n        // Beak\n        rotate([0, 30, 0]) {\n            translate([0, 0, body_height*0.3]) {\n                scale([0.8, 0.8, 0.7]) sphere(r=2);\n            }\n        }\n        \n        // Eyes\n        translate([body_height*0.4, body_height*0.2, 1.5]) {\n            sphere(r=1);\n        }\n        translate([body_height*0.4, -body_height*0.2, 1.5]) {\n            sphere(r=1);\n        }\n        \n        // Antenna\n        rotate([0, 30, 0]) {\n            translate([body_height*0.75, body_height*0.3, 0]) {\n                antenna();\n            }\n        }\n        \n        // Wing segments\n        for(i = [0:2]) {\n            translate([body_height*0.5, 0, i*body_height*0.6]) {\n                rotate([0, 0, i*15]) {\n                    scale([0.95, 0.95, 0.9]) sphere(r=1.5);\n                }\n            }\n        }\n        \n        // Body segments\n        for(i = [0:1:length-30]) {\n            translate([i, 0, 0]) {\n                scale([0.85, 0.85, 0.75]) cube([body_length*0.8, body_height*0.8, body_height*0.5]);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    body_segments(body_length, body_height);\n    \n    // Head\n    head();\n    \n    // Wings\n    wing_membrane();\n    \n    // Antenna\n    antenna();\n    \n    // Legs (simplified for 3D printing - only one pair)\n    if(body_length > 20) {\n        // Front leg\n        translate([body_length*0.2, 0, body_height*0.1]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=body_height*0.2, r=3);\n            }\n        }\n        \n        // Left leg\n        translate([-body_length*0.3, 0, body_height*0.1]) {\n            rotate([0, 90, 0]) {\n                cylinder(h=body_height*0.2, r=3);\n            }\n        }\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "spiral",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 77,
      "code": "// Realistic 3D-printable cylinder with rounded top and bottom\n// Medium-complexity model with proper wall thickness\n// All dimensions are in mm\n\ndifference() {\n    // Outer cylinder body\n    cylinder(h=60, r=40);\n    \n    // Inner hollow cylinder\n    translate([0, 0, -1])\n        cylinder(h=62, r=35);\n    \n    // Round top\n    translate([0, 0, 62])\n        sphere(r=40);\n    \n    // Round bottom\n    translate([0, 0, -62])\n        sphere(r=40);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "gear",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 21,
      "code": "// Realistic Medium-Complexity Mechanical Gear Tool - \"Chain Saw Tool\"\n// Based on typical chain-saw tool designs (medium complexity, 3D-printable)\n\n// Overall dimensions: ~80mm length\n\n// Main gear body\nmodule gear_body() {\n    difference() {\n        // Outer shell\n        difference() {\n            // Main cylinder\n            cylinder(h=20, r=10, center=false);\n            // Chamfer edge for printability\n            translate([0,0,-1])\n                cylinder(h=2, r=10, center=false);\n        }\n        \n        // Central hub\n        translate([0,0,10])\n            cylinder(h=5, r=8, center=false);\n        \n        // Gear teeth (simplified as cylinders)\n        for(i=[0:2]) {\n            for(j=[0:2]) {\n                translate([i*5, j*5, 15])\n                    rotate([0, 0, 45])\n                        cylinder(h=2, r=0.6, center=false);\n            }\n        }\n    }\n}\n\n// Chain guide collar\nmodule chain_guide() {\n    difference() {\n        // Collar base\n        cylinder(h=2, r=8, center=false);\n        // Hollow cavity\n        translate([0,0,1])\n            cylinder(h=1, r=6, center=false);\n    }\n    \n    // Chain guide teeth\n    for(i=[0:2]) {\n        for(j=[0:2]) {\n            translate([i*5, j*5, 20])\n                rotate([0, 0, 45])\n                    cylinder(h=3, r=0.5, center=false);\n        }\n    }\n}\n\n// Chain pin\nmodule chain_pin() {\n    difference() {\n        cylinder(h=1, r=0.5, center=false);\n        translate([0,0,-1])\n            cylinder(h=2, r=0.3, center=false);\n    }\n}\n\n// Handle\nmodule handle() {\n    difference() {\n        // Main handle\n        translate([0,0,-15])\n            rotate([0, 90, 0])\n                cylinder(h=40, r=6, center=false);\n        \n        // Grip texture\n        for(i=[0:3]) {\n            for(j=[0:2]) {\n                translate([i*3, j*3, 15])\n                    sphere(r=0.8);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main assembly\n    gear_body();\n    \n    // Chain guide\n    chain_guide();\n    \n    // Chains\n    translate([0, 0, 30])\n        rotate([0, 90, 0])\n            chain_pin();\n    translate([0, 0, -30])\n        rotate([0, 90, 0])\n            chain_pin();\n    \n    // Handle\n    handle();\n    translate([0, 0, -25])\n        handle();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "sphere with hole",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 56,
      "code": "// OpenSCAD model for a realistic sphere with a hole at its center\n// Dimensions: 80mm diameter sphere with 3D-printable hole\n\n$fa = 1; $fs = 0.5;\n\n// Main sphere parameters\nradius = 80;               // Diameter of the sphere\nhole_diameter = 8;          // Diameter of the hole\nhole_depth = 5;              // Depth of the hole\nwall_thickness = 2;         // Wall thickness for 3D printing\n\n// Define the hole\ndifference() {\n    // Outer sphere\n    sphere(r = radius);\n\n    // Hollow out the inside\n    translate([0, 0, wall_thickness])\n    sphere(r = radius - wall_thickness);\n}",
      "inference_error": null,
      "render_error": "Rendering timeout (>60s)",
      "vlm_response": null
    },
    {
      "object": "helix",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 1,
      "code": "// Hypersonic Toy Drone - Realistic Style, Medium Complexity\n// A toy-grade drone with realistic features, designed for 3D printing\n\n// Overall scale factor for 3D printing\nscale_factor = 0.4;\n\n// Main color scheme\ncolor_body = [0.2, 0.8, 0.9];      // Dark gray\ncolor_frame = [0.3, 0.7, 0.6];     // Silver\ncolor_details = [0.1, 0.3, 0.4];    // Black for details\n\n// Main body module\nmodule main_body() {\n    difference() {\n        // Main body shell\n        color(color_body)\n        scale([1.2, 1, 0.8])\n        sphere(d=40, $fn=32);\n        \n        // Front face\n        translate([0, 0, 10])\n        cube([30, 20, 15], center=true);\n        \n        // Rear face\n        translate([0, 0, -10])\n        cube([30, 20, 15], center=true);\n    }\n}\n\n// Drone frame\nmodule drone_frame() {\n    color(color_body)\n    difference() {\n        // Main frame\n        scale([1.1, 1.1, 1])\n        sphere(d=35, $fn=32);\n        \n        // Cutouts for detail\n        translate([5, 5, 0])\n        cube([15, 10, 8], center=true);\n        \n        // Motor mounts\n        translate([10, 0, 0])\n        cylinder(h=3, d1=5, d2=3, $fn=16);\n        translate([10, 0, -3])\n        cylinder(h=3, d1=3, d2=5, $fn=16);\n    }\n}\n\n// Engine module\nmodule engine() {\n    color(color_body)\n    union() {\n        // Main engine block\n        cylinder(h=8, d=12, $fn=24);\n        \n        // Fuel tank\n        translate([0, 0, 8])\n        cylinder(h=4, d=10, $fn=24);\n        \n        // Nozzle\n        translate([0, 0, 2])\n        cylinder(h=2, d=6, $fn=24);\n    }\n}\n\n// Fan module\nmodule fan() {\n    color(color_body)\n    difference() {\n        // Main fan blades\n        for(i=[0:3]) {\n            translate([-8 + i*10, 0, 0])\n            cube([2, 2, 4], center=true);\n            translate([0, 0, 0])\n            cube([2, 2, 2], center=true);\n        }\n        \n        // Cooling fins\n        for(i=[0:5]) {\n            translate([-8 + i*10, 0, 0])\n            cube([2, 2, 4], center=true);\n            translate([0, 0, 0])\n            cube([2, 2, 2], center=true);\n        }\n    }\n}\n\n// Control stick module\nmodule control_stick() {\n    color(color_body)\n    difference() {\n        // Main stick\n        cylinder(h=15, d=6, $fn=24);\n        \n        // Grip ridges\n        translate([0, 0, -15])\n        cylinder(h=1, d=7, $fn=24);\n        translate([0, 0, 15])\n        cylinder(h=1, d=7, $fn=24);\n        \n        // Button\n        translate([0, 0, -25])\n        cylinder(h=2, d=3, $fn=24);\n    }\n}\n\n// Landing gear\nmodule landing_gear() {\n    color(color_body)\n    union() {\n        // Main legs\n        translate([0, 0, -15])\n        cylinder(h=8, d=4, $fn=24);\n        translate([0, 0, 15])\n        cylinder(h=8, d=4, $fn=24);\n        \n        // Wheels\n        translate([0, 0, -15])\n        cylinder(h=10, d=3, $fn=24);\n        translate([0, 0, 15])\n        cylinder(h=10, d=3, $fn=24);\n    }\n}\n\n// LED indicators\nmodule indicators() {\n    color(color_details)\n    translate([0, 0, -25])\n    cylinder(h=1, d=3, $fn=24);\n    translate([0, 0, -5])\n    cylinder(h=1, d=3, $fn=24);\n}\n\n// Assembly\nunion() {\n    // Main components\n    main_body();\n    drone_frame();\n    engine();\n    fan();\n    control_stick();\n    landing_gear();\n    indicators();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "flower with petals",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 58,
      "code": "// Realistic medium-complexity model of a small yellow sunflower with petals\n// Approx. 85 mm tall, 55 mm wide, 35 mm deep\n\n$fn = 32;          // Good resolution for 3D printing\n\nmodule sunflower() {\n    // Main stem\n    cylinder(h=15, r=5);\n    \n    // Petals\n    for (i = [0:20:360]) {\n        rotate([0, 0, i])\n            translate([0, 0, -2])\n                petal_shape();\n    }\n    \n    // Center disk\n    translate([0, 0, -4])\n        disk();\n    \n    // Stem\n    translate([0, 0, 0])\n        cylinder(h=20, r=5);\n    \n    // Leaves (simplified as simple leaves)\n    for (x = [-20:20:20]) {\n        translate([x, 0, 0])\n            rotate([0, 0, 15])\n                leaf_shape();\n    }\n}\n\nmodule petal_shape() {\n    difference() {\n        // Central disk\n        sphere(r=6);\n        \n        // Petal base\n        cylinder(h=2, r=3);\n        \n        // Petal edges\n        for (i = [0:2:150]) {\n            rotate([0, 0, i])\n                translate([0, 0, -0.5])\n                    scale([0.8, 0.1, 0.3])\n                        petal_edge();\n        }\n    }\n}\n\nmodule leaf_shape() {\n    // Leaf blade\n    difference() {\n        cylinder(h=1, r=2.5);\n        cylinder(h=2, r=1.5);\n    }\n    \n    // Leaf veins\n    for (i = [0:10:15]) {\n        rotate([0, 0, i])\n            translate([0, 0, -1])\n                cylinder(h=0.5, r=1.5);\n    }\n}\n\nmodule disk() {\n    difference() {\n        cylinder(h=5, r=8);\n        cylinder(h=10, r=6);\n    }\n}\n\n// Main assembly\nsunflower();",
      "inference_error": null,
      "render_error": "Rendering timeout (>60s)",
      "vlm_response": null
    },
    {
      "object": "bracket",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 39,
      "code": "// Realistic 3D-printable office desk chair\n// Medium complexity, 50mm tall, 70mm wide, 100mm deep\n\n$fn = 32;\n\n// Main assembly\nmodule desk_chair() {\n    // Seat\n    seat();\n\n    // Backrest\n    backrest();\n\n    // Legs\n    legs();\n\n    // Armrests\n    armrests();\n}\n\n// Seat module\nmodule seat() {\n    // Seat cushion\n    difference() {\n        cube([50, 40, 2], center=true);\n        translate([0, 0, 1]) cube([40, 30, 1], center=true);\n    }\n    \n    // Cushion padding\n    color(\"white\") {\n        translate([0, 0, 1]) cube([38, 36, 0.5], center=true);\n        translate([0, 0, 2]) cube([32, 32, 0.5], center=true);\n    }\n    \n    // Cushion fabric\n    color(\"gray\") {\n        translate([0, 0, 1.5]) cube([44, 38, 0.5], center=true);\n        translate([0, 0, 3.5]) cube([40, 30, 0.5], center=true);\n    }\n}\n\n// Backrest module\nmodule backrest() {\n    // Backrest frame\n    difference() {\n        cube([60, 25, 35], center=true);\n        translate([0, 0, 25/2]) cube([60, 20, 35], center=true);\n    }\n    \n    // Backrest cushion\n    color(\"black\") {\n        difference() {\n            cube([55, 20, 30], center=true);\n            translate([0, 0, 20/2]) cube([55, 18, 30], center=true);\n        }\n    }\n}\n\n// Legs module\nmodule legs() {\n    // Front left leg\n    difference() {\n        cylinder(h=10, r=8);\n        translate([0, 0, 10]) sphere(r=8);\n    }\n    \n    // Front right leg\n    translate([0, 0, -10]) {\n        difference() {\n            cylinder(h=10, r=8);\n            translate([0, 0, 10]) sphere(r=8);\n        }\n    }\n    \n    // Back left leg\n    translate([0, 0, 0]) {\n        difference() {\n            cylinder(h=10, r=8);\n            translate([0, 0, 10]) sphere(r=8);\n        }\n    }\n    \n    // Back right leg\n    translate([0, 0, 0]) {\n        difference() {\n            cylinder(h=10, r=8);\n            translate([0, 0, 10]) sphere(r=8);\n        }\n    }\n    \n    // Foot pads\n    for (x = [-25, 25]) {\n        for (y = [-25, 25]) {\n            translate([x, y, -8]) {\n                cylinder(h=1, r=6);\n            }\n        }\n    }\n}\n\n// Armrests module\nmodule armrests() {\n    // Left armrest\n    difference() {\n        cube([20, 30, 15], center=true);\n        translate([0, 0, 5]) cube([20, 20, 15], center=true);\n    }\n    \n    // Right armrest\n    translate([0, 0, 15]) {\n        difference() {\n            cube([20, 30, 15], center=true);\n            translate([0, 0, 5]) cube([20, 20, 15], center=true);\n        }\n    }\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: Geometries in cache: 1\nGeometry cache size in bytes: 0\nCGAL Polyhedrons in cache: 0\nCGAL cache size in bytes: 0\nTotal rendering time: 0:00:00.000\nCurrent top level object is empty.\n",
      "vlm_response": null
    },
    {
      "object": "wave",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 2,
      "code": "// Realistic Medium-Complexity Crying Silhouette\n\n// Overall height: ~50mm\n// Wall thickness: 2mm for 3D printing\n\nmodule crying_silhouette() {\n    // Main body - teardrop shape\n    translate([0, 0, 2]) {\n        scale([1.2, 0.8, 0.7]) sphere(d = 30, $fn = 32);\n    }\n\n    // Face - prominent hollowed eye sockets\n    translate([0, 0, 8]) {\n        difference() {\n            scale([0.7, 1, 0.6]) sphere(d = 25, $fn = 32);\n            translate([0, 0, 8]) sphere(d = 20, $fn = 32);\n        }\n    }\n\n    // Eyes - hollowed sockets with tear streaks\n    translate([25, 0, 8]) {\n        sphere(d = 15, $fn = 32);\n        translate([0, 0, 10]) sphere(d = 12, $fn = 32);\n    }\n\n    // Nose - a simple bump\n    translate([28, 0, 12]) {\n        scale([0.6, 0.5, 0.4]) sphere(d = 8, $fn = 24);\n    }\n\n    // Mouth - small opening\n    translate([25, -8, 15]) {\n        sphere(d = 5, $fn = 32);\n    }\n\n    // Mouth details - small tear streaks\n    for (i = [-2, -1, 0, 1, 2]) {\n        translate([i * 15, -8.5, 16]) {\n            rotate([0, 0, 15 * i]) {\n                scale([1, 0.8, 0.7]) sphere(d = 3, $fn = 16);\n            }\n        }\n    }\n\n    // Hair - drooping strands\n    for (i = [-1, 0, 1]) {\n        rotate([0, 0, i * 120]) {\n            scale([0.8, 0.6, 0.5]) sphere(d = 10, $fn = 16);\n        }\n    }\n\n    // Left arm - curved\n    translate([-15, 0, 0]) {\n        rotate([0, 90, 0]) {\n            cylinder(h = 8, r1 = 12, r2 = 8, $fn = 24);\n        }\n    }\n\n    // Right arm - simple hook\n    translate([15, 0, 0]) {\n        rotate([0, 90, 0]) {\n            cylinder(h = 6, r1 = 8, r2 = 6, $fn = 24);\n        }\n    }\n\n    // Left leg - bent\n    translate([-10, 0, -8]) {\n        rotate([0, 0, 0]) {\n            cylinder(h = 12, r1 = 8, r2 = 6, $fn = 24);\n        }\n    }\n\n    // Right leg - bent\n    translate([10, 0, -8]) {\n        rotate([0, 0, 0]) {\n            cylinder(h = 12, r1 = 8, r2 = 6, $fn = 24);\n        }\n    }\n\n    // Hands - curled fingers\n    for (i = [-1, 1]) {\n        for (j = [-1, 1]) {\n            translate([i * 8, j * 8, 0]) {\n                sphere(d = 4, $fn = 24);\n            }\n        }\n    }\n}\n\n// Render the crying silhouette\ncrying_silhouette();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "clamp",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 53,
      "code": "// Realistic wooden box with hinge mechanism\n// Medium complexity, 3D-printable with minimal overhangs\n\nmodule box() {\n    // Main box body\n    difference() {\n        cube([40, 35, 15], center = true);\n        translate([0, 0, 5]) cube([40, 35, 15], center = true);\n    }\n    \n    // Top surface\n    difference() {\n        cube([42, 32, 16], center = true);\n        translate([0, 0, -1]) cube([42, 32, 16], center = true);\n    }\n    \n    // Side panels\n    difference() {\n        cube([25, 30, 12], center = true);\n        translate([0, 0, 11]) cube([25, 30, 12], center = true);\n    }\n    \n    // Bottom panel\n    difference() {\n        cube([26, 26, 12], center = true);\n        translate([0, 0, 5]) cube([26, 26, 12], center = true);\n    }\n    \n    // Hinges\n    for (x = [-15, 15]) {\n        translate([x, 0, 0]) {\n            rotate([90, 0, 0]) {\n                cylinder(h = 12, d = 1.5, center = true);\n            }\n        }\n        \n        // Mounting brackets\n        translate([x, 0, -6]) {\n            cube([2, 2, 4], center = true);\n            translate([x, 0, -6]) cube([2, 2, 4], center = true);\n        }\n        \n        translate([x, 0, 6]) {\n            cube([2, 2, 4], center = true);\n            translate([x, 0, 6]) cube([2, 2, 4], center = true);\n        }\n    }\n    \n    // Handle\n    translate([2, 2, -15]) {\n        difference() {\n            cylinder(h = 15, d = 3, center = true);\n            cylinder(h = 15, d = 2, center = true);\n        }\n        translate([0, 0, 0]) cube([3, 3, 15], center = true);\n        translate([0, 0, 0]) cube([3, 3, 15], center = true);\n    }\n}\n\n// Assembly\ntranslate([0, 0, -15]) box();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "hook",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 89,
      "code": "// Realistic 3D-printable toy car\n// Medium complexity with 2mm walls, no overhangs\n\n$fn = 32;\n\nmodule body() {\n    difference() {\n        // Main body shell\n        hull() {\n            cube([40, 25, 15], center = true);\n            translate([0, 0, 5]) cube([40, 25, 15], center = true);\n        }\n        // Hood opening\n        translate([0, 0, -20]) cube([25, 20, 2], center = true);\n    }\n}\n\nmodule wheels() {\n    // Rear wheel\n    difference() {\n        cylinder(h = 4, r1 = 12, r2 = 12);\n        translate([0, 0, -1]) cube([4, 4, 2], center = true);\n    }\n    // Front wheel\n    difference() {\n        cylinder(h = 4, r1 = 12, r2 = 12);\n        translate([0, 0, -20]) cube([4, 4, 2], center = true);\n    }\n}\n\nmodule windows() {\n    translate([-10, 0, -10]) cube([15, 15, 4], center = true);\n    translate([0, 0, 10]) cube([15, 15, 4], center = true);\n}\n\nmodule doors() {\n    translate([-20, 0, -15]) cube([15, 15, 6], center = true);\n    translate([0, 0, 15]) cube([15, 15, 6], center = true);\n}\n\nmodule windows() {\n    translate([-10, 0, -10]) cube([15, 15, 4], center = true);\n    translate([0, 0, 10]) cube([15, 15, 4], center = true);\n}\n\nmodule headlights() {\n    translate([0, 0, -10]) cube([3, 3, 2], center = true);\n    translate([0, 0, 10]) cube([3, 3, 2], center = true);\n}\n\nmodule taillights() {\n    translate([0, 0, -15]) cube([3, 3, 2], center = true);\n    translate([0, 0, -25]) cube([3, 3, 2], center = true);\n}\n\nmodule steering_column() {\n    difference() {\n        cylinder(h = 10, r = 2);\n        translate([0, 0, 5]) cube([6, 6, 2], center = true);\n    }\n}\n\nmodule rear_axle() {\n    difference() {\n        cylinder(h = 8, r = 10);\n        translate([0, 0, 0]) cube([10, 10, 8], center = true);\n    }\n}\n\nmodule wheels() {\n    // Rear wheel\n    difference() {\n        cylinder(h = 4, r1 = 10, r2 = 10);\n        translate([0, 0, -1]) cube([10, 10, 2], center = true);\n    }\n    // Front wheel\n    difference() {\n        cylinder(h = 4, r1 = 10, r2 = 10);\n        translate([0, 0, -20]) cube([10, 10, 2], center = true);\n    }\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: Geometries in cache: 1\nGeometry cache size in bytes: 0\nCGAL Polyhedrons in cache: 0\nCGAL cache size in bytes: 0\nTotal rendering time: 0:00:00.000\nCurrent top level object is empty.\n",
      "vlm_response": null
    },
    {
      "object": "hinge",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 45,
      "code": "// Medium complexity furniture item \u2013 realistic, 3D-printable kitchen island\n// Overall footprint \u2248 120 mm \u00d7 80 mm \u00d7 30 mm (height \u2248 30 mm)\n// Wall thickness \u2248 2 mm, no steep overhangs\n\n$fn = 30;           // Good detail resolution\nwall = 2;           // 2 mm wall thickness\nheight  = 30;       // Total height\nwidth   = 120;       // Width\ndepth   = 80;        // Depth\nleg     = 4;          // Leg height\nboard   = 10;         // Board thickness\nshelf   = 2;         // Shelf thickness\n\n// Main body\nmodule body() {\n    difference() {\n        // Outer shell\n        cube([width, depth, height], center = true);\n\n        // Hollow interior\n        translate([0, 0, 1])\n            cube([width - 2*wall, depth - 2*wall, height - 2*wall], center = true);\n\n        // Front panel with rounded corners\n        translate([0, -depth/2 - 1, height/2 - 1])\n            cube([width, 2, height], center = true);\n        translate([0, depth/2 + 1, height/2 - 1])\n            cube([width, 2, height], center = true);\n        translate([0, -depth/2 + 1, height - 1])\n            cube([width, 2, height], center = true);\n        translate([0, depth/2 + 1, height - 1])\n            cube([width, 2, height], center = true);\n    }\n}\n\n// Legs\nmodule legs() {\n    for (x = [-width/2 + leg, width/2 - leg]) {\n        for (y = [-depth/2 + leg, depth/2 - leg]) {\n            translate([x, y, -height/2 - 15])\n                cylinder(h = 20, r = wall, center = true);\n        }\n    }\n}\n\n// Support braces\nmodule braces() {\n    // Bottom brace\n    translate([0, 0, -height/2 + 15])\n        cube([width, depth, 30], center = true);\n    // Left brace\n    translate([-width/2 - leg, 0, -height/2 + 15])\n        cube([width, depth, 30], center = true);\n    // Right brace\n    translate([width/2 + leg, 0, -height/2 + 15])\n        cube([width, depth, 30], center = true);\n}\n\n// Shelf and shelf bracket\nmodule shelf() {\n    translate([0, 0, height/2 - 15])\n        cube([width - 2*wall, depth - 2*wall, shelf], center = true);\n    translate([0, 0, height/2 - 15])\n        cube([width - 2*wall, depth - 2*wall, shelf], center = true);\n}\n\n// Handle\nmodule handle() {\n    translate([width/2 - 3, depth/2 - 5, height/2 - 5])\n        cylinder(h = 10, r = 3);\n}\n\n// Assembly\nunion() {\n    body();\n    legs();\n    braces();\n    shelf();\n    handle();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "ring",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 55,
      "code": "// Realistic-style 3D-printable model of a medieval wooden chest\n\n// Overall dimensions: 80mm x 60mm x 45mm\n\n// Wall thickness: 2mm for 3D printing\nwall_thickness = 2;\n\nmodule wooden_chest() {\n    // Main wooden body\n    difference() {\n        // Outer shell\n        cube([80, 60, 45], center=true);\n\n        // Hollow out interior\n        translate([0, 0, 0])\n            cube([76, 56, 43], center=true);\n\n        // Top lid\n        translate([0, 0, 45])\n            difference() {\n                cube([84, 62, 48], center=true);\n                translate([0, 0, 2])\n                    cylinder(h=3, r=40);\n            }\n    }\n\n    // Front panel\n    difference() {\n        cube([70, 50, 42], center=true);\n        translate([0, 0, -5])\n            cube([68, 48, 40], center=true);\n    }\n\n    // Back panel\n    difference() {\n        cube([70, 50, 42], center=true);\n        translate([0, 0, 45])\n            cube([68, 48, 40], center=true);\n    }\n\n    // Side panels\n    difference() {\n        cube([70, 50, 42], center=true);\n        translate([0, 0, 0])\n            cube([68, 48, 40], center=true);\n    }\n\n    // Handle\n    difference() {\n        cylinder(h=12, r1=5, r2=10);\n        translate([0, 0, -10])\n            cylinder(h=10, r=5);\n    }\n\n    // Feet\n    for(x = [-35, 35])\n        for(y = [-25, 25])\n            translate([x, y, -22.5])\n                cylinder(h=5, r=3);\n}\n\n// Render the chest\nwooden_chest();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "washer",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 78,
      "code": "// Realistic 3D-printable toilet bowl \u2013 medium complexity\n// Approx 100 mm diameter x 120 mm depth x 12 mm wall thickness\n\n$fn = 36;  // Good for smooth curves\n\n// Base dimensions\nbase_w = 100;\nbase_d = 120;\nbase_h = 2;\n\n// Wall thickness\nwall = 2;\n\n// Bowl dimensions\nbowl_w = 70;\nbowl_d = 100;\nbowl_h = 12;\n\n// Handle dimensions\nhandle_w = 25;\nhandle_h = 20;\n\n// Base dimensions\nbase_h = 4;\n\n// Water tank dimensions\ntank_h = 80;\ntank_w = 100;\ntank_d = 120;\n\n// Handle dimensions\nhandle_r = 8;\nhandle_l = 35;\n\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h = base_h, r = base_w / 2, center = false);\n        // Chamfer bottom\n        translate([0, 0, base_h / 2])\n            cylinder(h = 0.5, r = base_w / 2.5, center = false);\n    }\n}\n\nmodule handle() {\n    difference() {\n        // Handle grip\n        translate([0, 0, handle_l / 2])\n            cylinder(h = handle_h, r = handle_r);\n        // Base cutout for grip\n        translate([0, 0, handle_l / 2 + 2])\n            cylinder(h = 1, r = handle_r - wall * 2, center = false);\n    }\n}\n\nmodule water_tank() {\n    difference() {\n        // Tank body\n        translate([0, 0, -tank_h / 2])\n            cylinder(h = tank_h, r = tank_w / 2, center = false);\n        // Drainage hole\n        translate([0, 0, -tank_h / 2 - 0.1])\n            cylinder(h = 0.5, r = tank_d / 2, center = false);\n    }\n}\n\nmodule bowl_assembly() {\n    union() {\n        // Base\n        difference() {\n            cylinder(h = base_h, r = base_w / 2, center = false);\n            translate([0, 0, -1])\n                cylinder(h = base_h + 1, r = base_w / 2.5, center = false);\n        }\n        // Water tank\n        translate([0, 0, 0])\n            water_tank();\n        // Handle\n        translate([0, 0, base_h / 2 - handle_l / 2])\n            handle();\n        // Bowl\n        translate([0, 0, base_h / 2 - bowl_h / 2])\n            bowl_assembly();\n    }\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: WARNING: base_h was assigned on line 9 but was overwritten in file washer.scad, line 24\nGeometries in cache: 1\nGeometry cache size in bytes: 0\nCGAL Polyhedrons in cache: 0\nCGAL cache size in bytes: 0\n",
      "vlm_response": null
    },
    {
      "object": "ripple",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 53,
      "code": "// Realistic Medium-Complexity Wooden Chair (Office Chair)\n// Overall dimensions: 120mm (width) x 80mm (depth) x 85mm (height)\n\n$fn = 32;  // Smooth curves for realistic appearance\n\nmodule chair_base() {\n    // Main chair base with 4 legs\n    difference() {\n        translate([0, 0, 25]) cube([120, 80, 30], center = true);\n        for (x = [-50, 0, 50]) {\n            for (y = [-40, 0, 40]) {\n                translate([x, y, 0]) cube([120, 80, 2], center = true);\n            }\n        }\n    }\n}\n\nmodule chair_frame() {\n    // Central support frame with 4 joints\n    difference() {\n        // Main frame block\n        translate([0, 0, 20]) cube([100, 70, 50], center = true);\n        \n        // Corner brackets\n        for (x = [-40, 40]) {\n            for (y = [-30, 30]) {\n                translate([x, y, 20]) cube([5, 5, 5], center = true);\n            }\n        }\n    }\n}\n\nmodule seat_panel() {\n    // Curved seat with backrest\n    difference() {\n        // Seat surface\n        translate([0, 0, 35]) cube([100, 70, 2], center = true);\n        \n        // Backrest cutout\n        translate([0, 0, 47]) cube([80, 60, 3], center = true);\n        \n        // Seat cushion cutout\n        translate([0, 0, 35]) cube([96, 64, 1.5], center = true);\n    }\n    \n    // Seat cushion with texture\n    difference() {\n        translate([0, 0, 35]) cube([96, 64, 3], center = true);\n        for (x = [-40, 40]) {\n            for (y = [-30, 30]) {\n                translate([x, y, 35]) cube([90, 60, 1], center = true);\n            }\n        }\n    }\n}\n\nmodule backrest() {\n    // Curved backrest with lumbar support\n    difference() {\n        // Main backrest block\n        translate([0, 0, 47]) cube([90, 60, 2], center = true);\n        \n        // Backrest cutouts\n        for (x = [-40, 40]) {\n            for (y = [-30, 30]) {\n                translate([x, y, 47]) cube([80, 50, 2], center = true);\n            }\n        }\n        \n        // Lumbar support curve\n        translate([0, 0, 50]) cube([80, 50, 2], center = true);\n    }\n}\n\nmodule arms() {\n    // Chair arms with support brackets\n    difference() {\n        // Main arm\n        translate([-25, 0, 20]) cube([25, 40, 40], center = true);\n        \n        // Arm support holes\n        for (x = [-10, 10]) {\n            for (y = [-10, 10]) {\n                translate([x, y, 20]) cube([2, 2, 20], center = true);\n            }\n        }\n    }\n}\n\nmodule gas_lift() {\n    // Gas lift cylinder\n    difference() {\n        cylinder(h = 15, r = 10);\n        cylinder(h = 17, r = 6);\n    }\n}\n\nmodule footrest() {\n    // Footrest with support\n    difference() {\n        cylinder(h = 15, r = 8);\n        cylinder(h = 17, r = 6);\n    }\n}\n\nmodule footrest_pad() {\n    // Footrest foot\n    difference() {\n        cylinder(h = 3, r = 6);\n        cylinder(h = 5, r = 4);\n    }\n}\n\nmodule assembly() {\n    // Main chair\n    union() {\n        chair_base();\n        chair_frame();\n        seat_panel();\n        backrest();\n        arms();\n        footrest();\n        gas_lift();\n        footrest_pad();\n        assembly();\n    }\n}\n\nassembly();",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: ERROR: Recursion detected calling module 'chair_base' in file ripple.scad, line 6\nTRACE: called by 'chair_base' in file ripple.scad, line 117\nTRACE: called by 'union' in file ripple.scad, line 116\nTRA",
      "vlm_response": null
    },
    {
      "object": "spacer",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 11,
      "code": "// Realistic 3D-printable 2D-scale 12-inch high ceiling\n// Designed for 70 mm 3D-printing, 2 mm wall thickness, no supports required\n\n$fn = 3;  // Medium quality for smooth curves\n\nmodule ceiling_plate(h = 2, r = 20, t = 3) {\n    // Base plate with slight chamfer for 3D printing\n    difference() {\n        cube([r*2, r*2, h], center = true);\n        translate([0,0,h/2 - t/2])\n            cube([r*2.5, r*2.5, t], center = true);\n    }\n    // Mounting holes for 16 mm ceiling joist\n    for (x = [0, 1]) {\n        for (y = [0, 1]) {\n            translate([x*2.5 + 5, y*2.5 + 5, -0.1])\n                cylinder(h = 1.5, r = 1.2, center = false);\n        }\n    }\n}\n\nmodule ceiling_joist(h = 1.5, t = 0.8) {\n    // 16 mm ceiling joist\n    cylinder(h = h, r1 = t, r2 = t, center = false);\n}\n\nmodule ridge_board(h = 2, r = 20, t = 3) {\n    // 12 mm ridge board\n    difference() {\n        cube([r*2, r*2, h], center = true);\n        translate([0,0,t/2])\n            cube([r*2.5, r*2.5, h], center = true);\n    }\n}\n\nmodule roof_line(length, width = 15, t = 4) {\n    // Simple angled roof line for 2 mm wall thickness\n    linear_extrude(height = t, center = false)\n    polygon(points = [[0,0],[length/2,width/2],[length,width]]);\n}\n\nmodule main_assembly() {\n    // Base mounting bracket\n    difference() {\n        translate([0,0,0])\n            cube([16, 16, 8], center = true);\n        translate([0,0,0])\n            cube([16, 16, 8], center = true);\n    }\n    // Mounting holes\n    for (x = [0, 1]) {\n        for (y = [0, 1]) {\n            translate([x*2.5, y*2.5, -0.1])\n                cylinder(h = 1.5, r = 1.2, center = false);\n        }\n    }\n    // 2 mm wall thickness\n    scale([1.1, 1.1, 1])\n        main_assembly();\n}\n\nmodule side_supports(height = 4) {\n    // Triangular braces for wall rigidity\n    difference() {\n        cube([r*2, r*2, height], center = true);\n        translate([0,0,height/2 - 2])\n            cube([r*2, r*2, height/2], center = true);\n    }\n    // Reinforcement\n    translate([0,0,height/2 - 2])\n        cube([r*2, r*2, height], center = true);\n}\n\n// Generate the 3D model\nmain_assembly();",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: ERROR: Recursion detected calling module 'main_assembly' in file spacer.scad, line 42\nTRACE: called by 'main_assembly' in file spacer.scad, line 59\nTRACE: called by 'scale' in file spacer.scad, line 5",
      "vlm_response": null
    },
    {
      "object": "letter B",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 32,
      "code": "// Realistic 3D-printable Bangle (medium complexity)\n// Overall size: ~70mm tall\n\n// Base parameters\nbase_height = 8;\nwall_thickness = 1.5;\nring_diameter = 20;\nring_width = 20;\nring_height = 12;\n\n// Main module\nmodule bangle() {\n    // Base plate with rounded edges\n    translate([0, 0, -base_height/2]) {\n        difference() {\n            rounded_plate(ring_diameter, ring_width, ring_height);\n            translate([0, 0, -base_height/2]) {\n                cylinder(h=1, r=wall_thickness, $fn=6);\n            }\n        }\n    }\n\n    // Ring with central hole\n    translate([0, 0, 0]) {\n        difference() {\n            ring(ring_diameter, ring_width, ring_height);\n            translate([0, 0, -base_height/2]) {\n                cylinder(h=ring_height, r=ring_diameter/2, $fn=6);\n            }\n        }\n    }\n\n    // Central band\n    translate([0, 0, 0]) {\n        difference() {\n            ring(ring_diameter, ring_width, ring_height);\n            translate([0, 0, -base_height/2]) {\n                cylinder(h=ring_height, r=ring_diameter/2, $fn=6);\n            }\n        }\n    }\n\n    // Decorative ridges around ring\n    for(i = [0:1:ring_width-1]) {\n        for(j = [0:1:ring_height-1]) {\n            if((j-ring_height/2) != 0) {\n                translate([0, -ring_width/2 + j/ring_width, i*ring_width/2]) {\n                    cylinder(h=1, r=ring_width/2, $fn=6);\n                }\n            }\n        }\n    }\n\n    // Handle ring\n    translate([0, 0, -base_height/2 - ring_height/2]) {\n        difference() {\n            ring(ring_diameter, ring_width, ring_height);\n            translate([0, 0, -base_height/2 - ring_height/2]) {\n                cylinder(h=ring_height, r=ring_diameter/2, $fn=6);\n            }\n        }\n    }\n\n    // Small decorative detail - center hole\n    translate([0, 0, 0]) {\n        cylinder(h=ring_height/2 + 1, r=ring_diameter/2 - 1, $fn=6);\n    }\n}\n\n// Helper module for rounded plate\nmodule rounded_plate(outer_radius, inner_radius, thickness) {\n    difference() {\n        // Outer rounded shape\n        hull() {\n            for(i = [0:1:360]) {\n                rotate([0, 0, i]) {\n                    translate([inner_radius, 0, 0]) {\n                        scale([1, 1, 1]) sphere(r=outer_radius);\n                    }\n                }\n            }\n        }\n        // Inner hole\n        translate([0, 0, -thickness/2]) {\n            cylinder(h=thickness+1, r=inner_radius, $fn=6);\n        }\n    }\n}\n\n// Helper module for ring with center hole\nmodule ring(diameter, width, height) {\n    difference() {\n        // Outer ring\n        scale([1, 1, 1]) sphere(d=diameter, $fn=6);\n        translate([0, 0, -height/2]) {\n            cylinder(h=height, r=diameter/2, $fn=6);\n        }\n        // Center hole\n        cylinder(h=height+0.5, r=diameter/2 - 0.5, $fn=6);\n    }\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: Geometries in cache: 1\nGeometry cache size in bytes: 0\nCGAL Polyhedrons in cache: 0\nCGAL cache size in bytes: 0\nTotal rendering time: 0:00:00.000\nCurrent top level object is empty.\n",
      "vlm_response": null
    },
    {
      "object": "bushing",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 70,
      "code": "// Realistic OpenSCAD model of a Medium-Size Electric Bicycle (MTB)\n// 3D-printable with 2mm walls and no overhangs > 45\u00b0\n\n$fa = 1; $fs = 0.5; $pr = 0.4; $pr2 = 0.3;\n\n// Overall dimensions (mm)\nbody_length = 80;\nbody_width = 40;\nseat_width = 35;\nseat_height = 10;\nrack_height = 45;\n\n// Main frame module\nmodule frame() {\n    difference() {\n        // Outer shell\n        hull() {\n            // Main tube\n            cylinder(h=body_length, r=body_width/2, $fn=32);\n            // Seat tube\n            translate([0, -seat_width/2, 0])\n                cylinder(h=body_length*0.7, r=body_width/2, $fn=32);\n            // Crank tube\n            translate([0, -seat_width/2, body_length*0.2])\n                cylinder(h=body_length*0.8, r=body_width/2, $fn=32);\n            // Fork\n            translate([body_width/2, 0, body_length*0.7])\n                rotate([0, 90, 0])\n                    cylinder(h=body_length*0.8, r=body_width/2, $fn=32);\n        }\n        // Cable entry hole\n        cylinder(h=body_length*0.5, r=body_width/2*0.4, $fn=32);\n    }\n}\n\n// Fork\nmodule fork() {\n    difference() {\n        cylinder(h=body_length*0.7, r=body_width/2, $fn=32);\n        translate([0, 0, -body_length*0.25])\n            cylinder(h=body_length*0.7, r=body_width/2-2, $fn=32);\n    }\n}\n\n// Wheel module\nmodule wheel() {\n    difference() {\n        cylinder(h=20, r=body_width/2, $fn=32);\n        cylinder(h=22, r=body_width/2-3, $fn=32);\n    }\n}\n\n// Tire module\nmodule tire() {\n    difference() {\n        cylinder(h=4, r=body_width/2+1, $fn=32);\n        cylinder(h=5, r=body_width/2+1.5, $fn=32);\n    }\n}\n\n// Saddle\nmodule saddle() {\n    difference() {\n        hull() {\n            // Saddle platform\n            translate([body_width/2, 0, 0])\n                cylinder(h=8, r=body_width/3, $fn=32);\n            // Saddle top\n            translate([body_width/2, 0, 8])\n                cylinder(h=4, r=body_width/3, $fn=32);\n        }\n    }\n}\n\n// Crash bar\nmodule crash_bar() {\n    difference() {\n        // Bar plate\n        translate([body_width/2, 0, body_length*0.3])\n            cylinder(h=4, r=body_width/4, $fn=32);\n        // Clip\n        translate([body_width/2, 0, body_length*0.3])\n            cylinder(h=1.5, r=body_width/3, $fn=32);\n    }\n}\n\n// Handlebar\nmodule handlebar() {\n    difference() {\n        cylinder(h=15, r=body_width/3, $fn=32);\n        translate([0, 0, -body_length*0.3])\n            cylinder(h=4, r=body_width/3-1, $fn=32);\n    }\n}\n\n// Bottom bracket\nmodule bottom_bracket() {\n    difference() {\n        cylinder(h=2, r=body_width/4, $fn=32);\n        translate([0, 0, -body_length*0.3])\n            cylinder(h=2.5, r=body_width/4-1.5, $fn=32);\n    }\n}\n\n// Seat tube\nmodule seat_tube() {\n    difference() {\n        cylinder(h=8, r=body_width/2, $fn=32);\n        translate([0, 0, body_length*0.7])\n            cylinder(h=6, r=body_width/2-2, $fn=32);\n    }\n}\n\n// Cables\nmodule cables() {\n    // Crank\n    translate([body_width/2, 0, body_length*0.35])\n        cylinder(h=body_length*0.6, r=body_width/2-3, $fn=32);\n    // Front wheel\n    translate([body_width/2, body_width/2, body_length*0.35])\n        cylinder(h=2, r=body_width/2-3, $fn=32);\n    // Rear wheel\n    translate([-body_width/2, body_width/2, body_length*0.35])\n        cylinder(h=2, r=body_width/2-3, $fn=32);\n    // Bottom bracket\n    translate([0, 0, body_length*0.35])\n        cylinder(h=1, r=body_width/4, $fn=32);\n}\n\n// Assembly\nunion() {\n    frame();\n    fork();\n    wheel();\n    tire();\n    crash_bar();\n    handlebar();\n    seat_tube();\n    cable_system();\n    bottom_bracket();\n    seat_tube();\n    cables();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "letter S",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 55,
      "code": "// Realistic Medium-Complexity D-Frame Stand - OpenSCAD\n// Designed for 3D printing with minimal overhangs\n\n// Overall dimensions\nframe_width = 80;\nframe_height = 120;\nframe_depth = 60;\nstand_height = 100;\nleg_height = 45;\nleg_width = 12;\nleg_depth = 12;\npost_height = 35;\n\n// Wall thickness for printability\nwall_thickness = 2;\n\n// Color definitions\ncolor_frame = [0.95, 0.92, 0.85];  // Dark gray aluminum\ncolor_metal = [0.1, 0.1, 0.1];      // Silver-colored metal\ncolor_legs = [0.4, 0.2, 0.3];        // Black powder-coated legs\ncolor_post = [0.85, 0.75, 0.65];     // Chrome post\ncolor_feet = [0.2, 0.2, 0.2];       // Black plastic feet\n\n// Module for 2D profiles\nmodule profile(h, r, w) {\n    linear_extrude(height = h, scale = [1, 1])\n    polygon([\n        [r, 0],\n        [w, 0],\n        [0, h],\n        [r, w]\n    ]);\n}\n\n// Main frame structure\nmodule frame() {\n    difference() {\n        // Main rectangular frame\n        union() {\n            // Left leg\n            translate([0, -leg_width/2, 0]) profile([leg_height, leg_width, leg_depth], leg_width/2, leg_depth);\n            // Right leg\n            translate([0, -leg_width/2, 0]) profile([leg_height, leg_width, leg_depth], leg_width/2, leg_depth);\n            // Top post\n            translate([0, 0, leg_height/2]) post_height;\n            // Bottom post\n            translate([0, 0, -leg_height/2]) post_height;\n            // Front legs\n            translate([0, -leg_width/2, 0]) profile([post_height, leg_width, leg_depth], leg_width/2, leg_depth);\n            translate([0, leg_width/2, 0]) profile([post_height, leg_width, leg_depth], leg_width/2, leg_depth);\n        }\n        // Hollow out the frame\n        wall_thickness = 0.5;\n        linear_extrude() {\n            difference() {\n                profile(leg_height, leg_width, leg_depth);\n                translate([0, 0, 0]) profile(post_height, leg_width, leg_depth);\n            }\n        }\n    }\n}\n\n// Front legs with feet\nmodule front_legs() {\n    translate([0, leg_width/2, leg_depth/2]) {\n        color([color_legs, color_feet]) {\n            profile([post_height, leg_width, leg_depth], leg_width, leg_depth);\n        }\n    }\n    translate([0, leg_width/2, leg_depth/2]) {\n        color([color_feet]) {\n            profile([post_height, leg_width, leg_depth], leg_width, leg_depth);\n        }\n    }\n}\n\n// Side legs with feet\nmodule side_legs() {\n    translate([0, -leg_width/2, leg_depth/2]) {\n        color([color_legs, color_feet]) {\n            profile([post_height, leg_width, leg_depth], leg_width, leg_depth);\n        }\n    }\n    translate([0, -leg_width/2, leg_depth/2]) {\n        color([color_feet]) {\n            profile([post_height, leg_width, leg_depth], leg_width, leg_depth);\n        }\n    }\n}\n\n// Post with decorative grip rings\nmodule post() {\n    difference() {\n        cylinder(h = post_height, r1 = leg_width/2, r2 = leg_width/2);\n        translate([0, 0, -1]) cylinder(h = post_height + 2, r = leg_width/4, r2 = leg_width/4);\n    }\n}\n\n// Assembly\nunion() {\n    // Main frame\n    frame();\n\n    // Front and side legs\n    front_legs();\n    side_legs();\n\n    // Post\n    post();\n\n    // Feet\n    front_legs();\n    side_legs();\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: ERROR: Parser error: syntax error in file evaluation/ThomasTheMaker_k-1b_20251029_161318/letter_S.scad, line 45\nCan't parse file 'evaluation/ThomasTheMaker_k-1b_20251029_161318/letter_S.scad'!\n\n",
      "vlm_response": null
    },
    {
      "object": "letter T",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 31,
      "code": "// OpenSCAD model of a realistic medium-complexity medium-sized table (120 mm wide, 80 mm deep, 80 mm tall)\n\n// Overall dimensions (mm)\nwidth = 120;\ndepth = 80;\nheight = 80;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Base support leg\nleg_height = 30;\nleg_width = 12;\nleg_thickness = 4;\n\n// Table top\ntable_thickness = 2;\ntable_width = 120;\ntable_depth = 80;\n\n// Table legs\nleg_positions = [[0, 0], [width - leg_width - 10, 0], [0, depth - leg_width - 10], [width - leg_width - 10, depth - leg_width - 10]];\n\nmodule table() {\n    // Main table top\n    difference() {\n        cube([table_width, table_depth, table_thickness], center = true);\n        translate([0, 0, -table_thickness/2 + 1])\n            cube([table_width - wall * 2, table_depth - wall * 2, table_thickness], center = true);\n    }\n\n    // Table legs\n    for (pos = leg_positions) {\n        translate([pos[0], pos[1], pos[2]]) {\n            // Leg frame\n            cube([leg_width, leg_thickness, leg_height]);\n            // Leg joint detail\n            translate([0, 0, -leg_height/2])\n                cylinder(h = leg_height - 2, d = leg_width * 0.8);\n        }\n    }\n\n    // Table top with slight chamfer\n    difference() {\n        translate([0, 0, table_thickness/2]) {\n            cube([table_width, table_depth, table_thickness], center = true);\n            translate([0, 0, -table_thickness/2 + 1])\n                cube([table_width - wall * 2, table_depth - wall * 2, table_thickness - wall], center = true);\n        }\n    }\n\n    // Table legs with feet\n    for (pos = leg_positions) {\n        translate([pos[0], pos[1], -leg_height/2 - table_thickness/2]) {\n            cube([leg_width, leg_thickness, table_thickness]);\n            translate([0, 0, -table_thickness/2 - leg_height/2 - table_thickness/2])\n                cube([leg_width - wall * 2, leg_thickness - wall * 2, table_thickness - wall]);\n        }\n    }\n\n    // Center support for stability\n    translate([0, 0, -table_height/2 - 5]) {\n        cube([table_width * 0.7, table_depth * 0.7, table_height * 0.7]);\n    }\n}\n\n// Create the 3D model\ntable();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "number 1",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 16,
      "code": "// 1234567890 (ASCII-style 1234567890)\n\n// Base block\nbase_block = 1234567890;\n\n// Columns\ncolumns = 3;\nwidth = 40;\nheight = 5;\n\n// Tiers\ntiers = 12;\nlayer_height = 0.8;\n\n// Top-left corner\ncorner = (0, 0);\n\n// Columns\nfor (i = [0:columns-1]) {\n    translate([i * width/2, 0, 0]) {\n        cube([width/2, height, layer_height], center = true);\n    }\n}\n\n// Top-right corner\ntranslate([width/2, 0, layer_height/2]) {\n    cube([width, height, layer_height*2], center = true);\n}\n\n// Bottom-left corner\ntranslate([-width/2, 0, layer_height/2]) {\n    cube([width, height, layer_height*2], center = true);\n}\n\n// Bottom-right corner\ntranslate([0, height, layer_height/2]) {\n    cube([width, height, layer_height*2], center = true);\n}\n\n// Left edge\ntranslate([0, -height/2, layer_height/2]) {\n    cube([width/2, height/2, width/3], center = true);\n}\n\n// Right edge\ntranslate([0, height/2, layer_height/2]) {\n    cube([width/2, height/2, width/3], center = true);\n}\n\n// Left side\ntranslate([0, -height/2, width/3]) {\n    cube([width, height/2, width*0.7], center = true);\n}\n\n// Right side\ntranslate([0, height/2, width/3]) {\n    cube([width, height/2, width*0.7], center = true);\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: ERROR: Parser error: syntax error in file evaluation/ThomasTheMaker_k-1b_20251029_161318/number_1.scad, line 16\nCan't parse file 'evaluation/ThomasTheMaker_k-1b_20251029_161318/number_1.scad'!\n\n",
      "vlm_response": null
    },
    {
      "object": "letter O",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 20,
      "code": "// Realistic Medium-Complexity Office Chair\n// Overall height: 100 mm, seat diameter: 60 mm, backrest height: 80 mm\n\n$fn = 36;\n\n// Main module\nmodule office_chair() {\n    // Seat cushion\n    translate([0, 0, 40]) {\n        difference() {\n            // Main seat block\n            cube([60, 50, 20], center=true);\n            \n            // Cushion cutout\n            translate([0, 0, 20]) {\n                cube([58, 48, 15], center=true);\n            }\n        }\n    }\n    \n    // Backrest\n    translate([0, 50, 70]) {\n        difference() {\n            // Main backrest\n            cube([40, 40, 35], center=true);\n            \n            // Cutout for lumbar support\n            translate([0, -20, 15]) {\n                cube([36, 36, 25], center=true);\n            }\n        }\n    }\n    \n    // Chair base\n    translate([0, 0, -45]) {\n        difference() {\n            // Base frame\n            cube([60, 50, 15], center=true);\n            \n            // Gas lift cylinder\n            cylinder(h=8, r=5, center=true);\n            \n            // Support posts\n            for(x=[-20, 0, 20]) {\n                for(y=[-20, 0, 20]) {\n                    translate([x, y, -30]) {\n                        cylinder(h=3, r=1.5, center=true);\n                    }\n                }\n            }\n        }\n    }\n    \n    // Gas lift cylinder\n    cylinder(h=12, r=3, center=true);\n    \n    // Armrests\n    // Left armrest\n    translate([15, 0, 40]) {\n        difference() {\n            cube([35, 45, 15], center=true);\n            translate([0, 0, 15]) {\n                cube([33, 33, 15], center=true);\n            }\n        }\n    }\n    translate([15, 0, 40]) {\n        mirror([1, 0, 0]) {\n            difference() {\n                cube([35, 45, 15], center=true);\n                translate([0, 0, 15]) {\n                    cube([33, 33, 15], center=true);\n                }\n            }\n        }\n    }\n    \n    // Right armrest\n    translate([15, 0, 40]) {\n        mirror([1, 0, 0]) {\n            difference() {\n                cube([35, 45, 15], center=true);\n                translate([0, 0, 15]) {\n                    cube([33, 33, 15], center=true);\n                }\n            }\n        }\n    }\n    \n    // Mechanism\n    // Mechanism base\n    translate([0, 0, -45]) {\n        difference() {\n            cube([60, 50, 8], center=true);\n            translate([0, 0, 2]) {\n                cylinder(h=6, r=4, center=true);\n            }\n        }\n    }\n    \n    // Chair legs\n    for(x=[-20, 0, 20]) {\n        for(y=[-20, 0, 20]) {\n            translate([x, y, -30]) {\n                cylinder(h=10, r=2, center=true);\n            }\n        }\n    }\n    \n    // Cushion pads\n    // Front cushion\n    translate([0, 30, 70]) {\n        difference() {\n            cube([58, 48, 20], center=true);\n            translate([0, 0, 15]) {\n                cube([56, 56, 20], center=true);\n            }\n        }\n    }\n    \n    // Rear cushion\n    translate([-20, 30, 70]) {\n        difference() {\n            cube([58, 48, 20], center=true);\n            translate([0, 0, 15]) {\n                cube([56, 56, 20], center=true);\n            }\n        }\n    }\n    \n    // Wheels\n    for(x=[-15, 0, 15]) {\n        for(y=[-15, 0, 15]) {\n            translate([x, y, -60]) {\n                cylinder(h=2, r=4, center=true);\n            }\n        }\n    }\n}\n\n// Render the chair\noffice_chair();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "number 0",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 91,
      "code": "// Realistic 3D-printable 0 (a zero point on a ruler)\n// All dimensions in mm, printable without support\n\n// Wall thickness for 0.4mm printed\nwall = 1.2;\n\n// Base plate with rounded edges\nmodule base() {\n    difference() {\n        cube([12, 12, 4], center=true);\n        translate([0, 0, 1.5]) cube([12-2*wall, 12-2*wall, 4-2*wall], center=true);\n    }\n}\n\n// Main board\nmodule board() {\n    difference() {\n        cube([12, 12, 0.3], center=true);\n        translate([0, 0, 0.1]) cube([12-2*wall, 12-2*wall, 0.3-wall], center=true);\n    }\n}\n\n// 0.4mm label on board\nmodule label() {\n    difference() {\n        cube([12, 12, 0.25], center=true);\n        translate([0, 0, 0.1]) cube([12-2*wall, 12-2*wall, 0.25-wall], center=true);\n    }\n}\n\n// Small label on board\nmodule label_x() {\n    translate([0, 0, 0.25]) rotate([0, 90, 0]) label();\n}\n\n// Corner cutouts for 3D printing\n// Front face\ntranslate([0, 0, 0.15]) cube([12, 12, 0.3], center=true);\n\n// Back face\ntranslate([-12, 0, 0.15]) cube([12, 12, 0.3], center=true);\n\n// Left face\ntranslate([0, 0, -0.15]) cube([12, 12, 0.3], center=true);\n\n// Right face\ntranslate([12, 0, 0.15]) cube([12, 12, 0.3], center=true);",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "number 8",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 43,
      "code": "// 8-inch rounded rectangle with 2mm wall thickness\n// Designed for 3D printing with 2mm wall thickness\n\n$fn = 36;               // Smooth curves for 3D printing\n\n// Overall dimensions\nlength = 80;              // Main length\nwidth = 60;               // Main width\nheight = 20;               // Main height\n\n// Rounded edges\noffset = 2;              // Small offset for rounded corners\nrounded_height = 2;      // Rounded top/bottom height\nrounded_width = 2;      // Rounded sides height\n\n// Wall thickness\nwall = 2;               // 2mm walls on all sides\n\n// Main body\ndifference() {\n    cube([length, width, height], center = false);\n\n    // Rounded top and bottom\n    translate([0, 0, -rounded_height/2])\n        sphere(r = 1.5, $fn = rounded_height);\n\n    translate([0, 0, -rounded_height/2])\n        sphere(r = 1.5, $fn = rounded_width);\n\n    // Front and back faces (sloped)\n    translate([0, 0, -height/2 - rounded_height])\n        cube([length - 2*offset, width - 2*offset, height]);\n\n    translate([0, 0, -height/2 - rounded_height])\n        cube([length - 2*offset, width - 2*offset, height]);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "cube with eyes",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 67,
      "code": "// Realistic medium-complexity 3D-printable model\n// Overall scale ~70 mm x 45 mm x 35 mm\n\n$fn = 32;\n\n// Main body shell\ndifference() {\n    sphere(d = 70);\n    translate([0,0,2]) cube([72,48,36], center=true);\n}\n\n// Front face\ndifference() {\n    translate([0,0,2]) cube([72,48,36], center=true);\n    translate([0,0,2]) cube([70,40,34], center=true);\n}\n\n// Top opening\ndifference() {\n    translate([0,0,2]) cube([72,48,36], center=true);\n    translate([0,0,2]) cube([70,40,34], center=true);\n}\n\n// Bottom opening\ndifference() {\n    translate([0,0,2]) cube([72,48,36], center=true);\n    translate([0,0,2]) cube([70,40,34], center=true);\n}\n\n// Left side plate\ndifference() {\n    translate([-25,0,2]) cube([25,35,36], center=true);\n    translate([-25,0,2]) cube([25,35,36], center=true);\n}\n\n// Right side plate\ndifference() {\n    translate([25,0,2]) cube([25,35,36], center=true);\n    translate([25,0,2]) cube([25,35,36], center=true);\n}\n\n// Bottom front plate\ndifference() {\n    translate([0,0,2]) cube([70,36,34], center=true);\n    translate([0,0,2]) cube([70,36,34], center=true);\n}\n\n// Bottom back plate\ndifference() {\n    translate([0,0,2]) cube([70,36,34], center=true);\n    translate([0,0,2]) cube([70,36,34], center=true);\n}\n\n// Left side edge\ndifference() {\n    translate([-25,0,2]) cube([25,35,36], center=true);\n    translate([-25,0,2]) cube([25,35,36], center=true);\n}\n\n// Left side edge\ndifference() {\n    translate([25,0,2]) cube([25,35,36], center=true);\n    translate([25,0,2]) cube([25,35,36], center=true);\n}\n\n// Right side edge\ndifference() {\n    translate([0,25,2]) cube([70,35,36], center=true);\n    translate([0,25,2]) cube([70,35,36], center=true);\n}\n\n// Right side edge\ndifference() {\n    translate([25,0,2]) cube([25,35,36], center=true);\n    translate([25,0,2]) cube([25,35,36], center=true);\n}\n\n// Top plate\ndifference() {\n    translate([0,0,2]) cube([70,40,34], center=true);\n    translate([0,0,2]) cube([70,40,34], center=true);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "letter A",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 94,
      "code": "// Realistic 3D-Printable Medium-Complexity Model of a Snail (European Land Snails)\n\n// Overall dimensions: ~80mm length, ~50mm width, ~35mm height\n\n// Wall thickness for printing (0.4mm)\nwall = 0.4;\n\n// Main body shell\nmodule snail_body() {\n    difference() {\n        // Main shell - elongated ellipsoid shape\n        hull() {\n            translate([0, 0, -20]) sphere(r = 12);\n            translate([0, 0, 22]) sphere(r = 8);\n        }\n        // Hollow center for material saving\n        translate([0, 0, -20]) sphere(r = 11);\n    }\n}\n\n// Head with shell\nmodule snail_head() {\n    difference() {\n        // Main head dome\n        scale([1.2, 1, 1.1]) sphere(r = 12);\n        \n        // Shell attachment\n        translate([0, 0, 12]) cylinder(h = 2, r = 4);\n        \n        // Mouth opening\n        translate([0, 0, -4]) cylinder(h = 2, r1 = 3, r2 = 0);\n    }\n}\n\n// Eyes with shells\nmodule snail_eyes() {\n    for(x = [-2:2])\n    for(y = [-1.5:1.5])\n    translate([x, y, 8])\n    sphere(r = 1.5);\n}\n\n// Feet with claws\nmodule snail_feet() {\n    for(x = [-2:2])\n    for(y = [-1.5:1.5])\n    translate([x, y, -6])\n    cylinder(h = 3, r = 1.5);\n}\n\n// Spiracles\nmodule spiracles() {\n    for(x = [-1.5:1.5])\n    for(y = [-1:1])\n    translate([x, y, -5])\n    scale([0.8, 0.8, 0.8]) sphere(r = 1.2);\n}\n\n// Dorsal fin\nmodule dorsal_fin() {\n    translate([0, 0, 20])\n    cylinder(h = 8, r1 = 2, r2 = 0.5);\n}\n\n// Ventral fin\nmodule ventral_fin() {\n    translate([0, 0, -20])\n    cylinder(h = 8, r1 = 2, r2 = 0.5);\n}\n\n// Mouth\nmodule mouth() {\n    translate([0, 0, -25])\n    difference() {\n        cube([6, 3, 3]);\n        cube([6.5, 3.5, 3.5]);\n    }\n}\n\n// Scale for print size\nscale([0.8, 0.8, 0.8]) {\n    for(x = [-25:25:25], y = [-25:25:25], z = [-25:25:25])\n    translate([x, y, z])\n    scale([0.8, 0.8, 0.8]) snail_body();\n}",
      "inference_error": null,
      "render_error": "Rendering timeout (>60s)",
      "vlm_response": null
    },
    {
      "object": "cylinder body",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 84,
      "code": "// Realistic Medium-Complexity OpenSCAD Model \u2013 Medium Complexity\n// Approx 70 mm length, 30 mm diameter, 80 mm height, 2 mm wall thickness\n// All parts are printable without supports\n\n$fn = 36;\n\n// Main body module\nmodule main_body() {\n    difference() {\n        // Outer shell\n        cylinder(h = 50, r = 20, center = false);\n        \n        // Inner cavity\n        translate([0, 0, 50]) cylinder(h = 50, r = 18, center = false);\n        \n        // Base opening\n        translate([0, 0, -2]) cylinder(h = 10, r = 15, center = false);\n    }\n}\n\n// Top cover\nmodule top_cover() {\n    difference() {\n        cylinder(h = 30, r = 18, center = false);\n        translate([0, 0, 30]) cylinder(h = 30, r = 16, center = false);\n    }\n}\n\n// Base plate\nmodule base_plate() {\n    difference() {\n        cylinder(h = 2, r = 20, center = false);\n        translate([0, 0, -1]) cylinder(h = 2, r = 18, center = false);\n    }\n}\n\n// Front grill\nmodule front_grill() {\n    difference() {\n        cylinder(h = 10, r = 22, center = false);\n        translate([0, 0, 5]) cylinder(h = 10, r = 22, center = false);\n    }\n}\n\n// Rear grill\nmodule rear_grill() {\n    difference() {\n        cylinder(h = 10, r = 22, center = false);\n        translate([0, 0, -5]) cylinder(h = 10, r = 22, center = false);\n    }\n}\n\n// Side panels\nmodule side_panels() {\n    difference() {\n        hull() {\n            translate([0, 0, 0]) sphere(r = 22);\n            translate([0, 0, 0]) sphere(r = 22);\n        }\n        translate([0, 0, 50]) cube([40, 20, 50], center = true);\n        translate([0, 0, -50]) cube([40, 20, 50], center = true);\n    }\n}\n\n// Ventilation slots\nmodule ventilation_slots() {\n    for (x = [-15, 0, 15]) {\n        translate([x, 0, 0]) cube([4, 2, 5], center = false);\n        translate([x, 0, 0]) cube([2, 2, 5], center = false);\n    }\n}\n\n// Cable management hole\nmodule cable_hole() {\n    cylinder(h = 8, r = 22, center = false);\n}\n\n// Logo area\nmodule logo_area() {\n    difference() {\n        translate([0, 0, 32]) cube([16, 16, 2], center = true);\n        translate([0, 0, 32]) cube([16, 16, 1.5], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main assembly\n    main_body();\n    \n    // Add details\n    translate([0, 0, 0]) {\n        rotate([90, 0, 0]) {\n            translate([0, 0, 0]) {\n                rotate([45, 0, 0]) {\n                    // Grill\n                    translate([0, 0, 0]) front_grill();\n                    translate([0, 0, 0]) rear_grill();\n                    \n                    // Ventilation\n                    translate([0, 0, 50]) ventilation_slots();\n                    \n                    // Cable hole\n                    translate([0, 0, 0]) cable_hole();\n                    \n                    // Logo area\n                    translate([0, 0, 32]) logo_area();\n                }\n            }\n        }\n    }\n    \n    // Base\n    base_plate();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "sphere head",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 49,
      "code": "// Realistic Medium-Complexity 3D-Printable Head\n// Overall height \u2248 80 mm\n\n// Wall thickness for 2 mm FDM printing\n$fn = 36;  // Smooth curves\n\nmodule head() {\n    // Main skull\n    difference() {\n        // Outer sphere\n        scale([1.2, 1, 1]) sphere(d = 40);\n        \n        // Eye sockets\n        for (side = [-1, 1]) {\n            translate([0, side * 10, 0]) rotate([0, 90, 0])\n                scale([0.8, 0.8, 0.8]) sphere(d = 12);\n        }\n        \n        // Mouth cavity\n        translate([0, -10, -1]) cube([20, 15, 5], center = true);\n        \n        // Nose\n        translate([0, 5, 2]) cube([15, 3, 3], center = true);\n    }\n    \n    // Ears\n    difference() {\n        // Outer ear\n        scale([0.7, 0.7, 0.7]) sphere(d = 25);\n        \n        // Inner cavity\n        translate([0, 0, -2]) cube([12, 12, 4], center = true);\n    }\n    \n    // Jaw\n    difference() {\n        scale([1.1, 1, 1.1]) sphere(d = 30);\n        translate([0, -15, -2]) cube([18, 18, 3], center = true);\n    }\n    \n    // Neck\n    difference() {\n        scale([1.1, 1, 1.1]) sphere(d = 25);\n        translate([0, -10, -3]) cube([15, 15, 2], center = true);\n    }\n    \n    // Eye sockets\n    difference() {\n        scale([0.8, 0.8, 0.8]) sphere(d = 12);\n        translate([0, 0, 0]) sphere(d = 10);\n    }\n    \n    // Hair\n    scale([1.15, 1.15, 1.15]) sphere(d = 18);\n}\n\n// Main assembly\nunion() {\n    head();\n    // Neck extension\n    translate([-5, 0, 2]) rotate([0, 90, 0]) head();\n    \n    // Arms\n    translate([0, 0, 0]) rotate([0, 90, 0]) {\n        for (side = [-1, 1]) {\n            translate([0, side * 20, 0]) rotate([0, 90, 0]) head();\n        }\n    }\n    \n    // Legs\n    for (side = [-1, 1]) {\n        translate([0, side * 20, 0]) rotate([0, 90, 0]) {\n            // Lower leg\n            translate([0, 0, -15]) cube([15, 15, 2], center = true);\n            // Upper leg\n            translate([0, 0, 15]) cube([15, 15, 2], center = true);\n            // Foot\n            translate([0, 0, -25]) sphere(d = 6);\n        }\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "fish",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 86,
      "code": "// Realistic Medium-Complexity Flipper - OpenSCAD\n// 3D-printable model with walls >= 2mm for easy printing\n\n// Overall dimensions\nwidth = 80;\ndepth = 60;\nheight = 35;\n\n// Main body\nmodule body() {\n    difference() {\n        cube([width, depth, height], center=true);\n        translate([0, 0, 0])\n            cylinder(h=height*0.4, d=width*0.8, center=true);\n    }\n}\n\n// Swimming tail\nmodule tail() {\n    difference() {\n        cylinder(h=20, d1=width*0.8, d2=width*0.5, center=false);\n        translate([0, 0, -1])\n            cube([width*0.8, depth*0.5, height+2]);\n    }\n}\n\n// Flippers\nmodule flippers() {\n    // Front flippers\n    difference() {\n        hull() {\n            translate([width*0.3, depth*0.3, height*0.8])\n                scale([1.2, 1.2, 1])\n                    sphere(d=width*0.3);\n            translate([width*0.3, depth*0.3, height*0.8])\n                scale([0.8, 0.8, 0.8])\n                    sphere(d=width*0.3);\n        }\n        // Hollow out\n        hull() {\n            translate([width*0.3, depth*0.3, height*0.8])\n                scale([1.2, 1.2, 1])\n                    sphere(d=width*0.3);\n            translate([width*0.3, depth*0.3, height*0.8])\n                scale([0.8, 0.8, 0.8])\n                    sphere(d=width*0.3);\n        }\n    }\n    // Rear flippers\n    difference() {\n        hull() {\n            translate([width*0.3, depth*0.3, height*0.8])\n                scale([1.2, 1.2, 1])\n                    sphere(d=width*0.3);\n            translate([width*0.3, depth*0.3, height*0.8])\n                scale([0.8, 0.8, 0.8])\n                    sphere(d=width*0.3);\n        }\n        // Hollow out\n        hull() {\n            translate([width*0.3, depth*0.3, height*0.8])\n                scale([1.2, 1.2, 1])\n                    sphere(d=width*0.3);\n            translate([width*0.3, depth*0.3, height*0.8])\n                scale([0.8, 0.8, 0.8])\n                    sphere(d=width*0.3);\n        }\n    }\n}\n\n// Fins\nmodule fins() {\n    // Dorsal fins\n    for(i=[0:4]) {\n        rotate([0, 0, i*120])\n            translate([width*0.45, depth*0.35, height*0.35])\n                scale([1.5, 1.5, 1.5])\n                    sphere(d=width*0.15);\n    }\n    // Anal fins\n    for(i=[0:4]) {\n        rotate([0, 0, i*120+90])\n            translate([width*0.45, depth*0.35, height*0.35])\n                scale([1.5, 1.5, 1.5])\n                    sphere(d=width*0.15);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    tail();\n    flippers();\n    fins();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "arch",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 10,
      "code": "// Realistic 3D-printable medium-complexity box (approx. 70mm x 40mm x 25mm)\n// Designed for FDM printing with 2mm wall thickness and minimal support overhangs\n\n$fn=32;               // Resolution for smooth curves\nwall=2;               // Wall thickness for 3D printing\nhole_dia=5;            // Wall thickness of holes\nhole_d=2;              // Diameter of holes\ntop_thickness=8;       // Top plate thickness\n\nmodule box_base() {\n    difference() {\n        // Main box body\n        cube([70, 40, 25], center=true);\n        // Hollow interior\n        translate([0, 0, 0.1]) cube([70-wall*2, 40-wall*2, 25-wall*2-2], center=true);\n    }\n}\n\nmodule top_plate() {\n    difference() {\n        // Main plate\n        translate([0, 0, 12.5]) cube([70, 40, 2], center=true);\n        // Ventilation slots\n        for(x=[-20, 0, 20])\n            for(y=[-20, 0, 20])\n                translate([x, y, 0]) cylinder(d=hole_dia, h=1);\n    }\n}\n\nmodule mounting_holes() {\n    for(x=[-30, 0, 30])\n        for(y=[-30, 0, 30])\n            translate([x, y, 0]) rotate([0, 90, 0]) cylinder(d=hole_d, h=wall, center=true);\n}\n\nmodule screws() {\n    // Top screw holes (4 screws)\n    for(x=[-30, 0, 30])\n        for(y=[-30, 0, 30])\n            translate([x, y, 12.5]) cylinder(d=hole_d, h=wall, center=true);\n}\n\nmodule keyhole() {\n    // Standard 5mm keyhole\n    difference() {\n        cube([12, 12, 12], center=true);\n        translate([0, 0, 0]) cube([10, 10, 10], center=true);\n    }\n}\n\nmodule assembly() {\n    difference() {\n        // Main assembly\n        union() {\n            box_base();\n            top_plate();\n            mounting_holes();\n            keyhole();\n            keyhole();\n        }\n        // Screw holes\n        translate([0, 0, 12.5]) screws();\n    }\n}\n\n// Render the model\nassembly();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "bird shape",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 89,
      "code": "// Realistic style 3D-printable model of a 3D-printed dragon-like bird\n// Dimensions: ~85 mm wingspan, ~60 mm length, ~45 mm height\n\n$fn = 36;  // Medium detail\nwall = 2;     // 2 mm wall thickness for 3D printing\n\nmodule dragon_body() {\n    difference() {\n        // Main body - ellipsoid shape\n        scale([1.2, 0.8, 0.6]) sphere(d = 40);\n        \n        // Belly bulge\n        scale([1.1, 0.9, 0.7]) sphere(d = 35);\n        \n        // Snout\n        translate([0, 0, -10]) cube([15, 12, 5], center = true);\n    }\n}\n\nmodule dragon_leg() {\n    // Upper leg\n    difference() {\n        cylinder(h = 10, d1 = 8, d2 = 5);\n        cylinder(h = 12, d1 = 6, d2 = 3);\n        \n        // Feet\n        translate([0, 0, -2]) cylinder(h = 3, d = 4);\n        translate([0, 0, 2]) cylinder(h = 3, d = 3);\n    }\n}\n\nmodule dragon_wing() {\n    difference() {\n        // Main wing\n        rotate([0, 20, 0]) cylinder(h = 10, d = 20);\n        \n        // Wing membrane\n        translate([0, 0, -1]) rotate([0, 20, 0]) cylinder(h = 3, d = 20);\n        \n        // Wing feathers\n        for(i = [0:15:30]) {\n            rotate([0, 20, 0]) translate([i * 5, 0, 0]) cylinder(h = 1, d = 2);\n        }\n    }\n}\n\nmodule dragon_tail() {\n    // Tail\n    difference() {\n        cylinder(h = 8, d1 = 12, d2 = 8);\n        translate([0, 0, -8]) cylinder(h = 12, d1 = 8, d2 = 8);\n    }\n    \n    // Tail feathers\n    for(i = [0:15:25]) {\n        rotate([0, 20, 0]) translate([i * 8, 0, -8]) cylinder(h = 1, d = 1.5);\n    }\n}\n\nmodule dragon_head() {\n    difference() {\n        scale([1.3, 0.9, 0.7]) sphere(d = 25);\n        \n        // Snout\n        translate([0, 0, -12]) cube([12, 10, 6], center = true);\n        \n        // Beak\n        translate([0, 0, -8]) cube([3, 2, 2], center = true);\n        \n        // Eyes\n        translate([6, 2, -10]) sphere(d = 2);\n        translate([-6, 2, -10]) sphere(d = 2);\n    }\n}\n\nmodule dragon_scales() {\n    // Scales on body\n    for(x = [-15:5:15]) {\n        for(y = [-5:5:5]) {\n            if(x * 1.5 <= y * 2) {\n                translate([x * 1.5, y * 1.5, 30]) sphere(d = 1.2);\n            }\n        }\n    }\n}\n\n// Main assembly\nscale([1.2, 0.8, 0.6]) union() {\n    scale(scale([1.3, 0.9, 0.7])) {\n        // Body\n        scale([1.2, 0.8, 0.6]) dragon_body();\n        \n        // Legs\n        translate([0, 0, 0]) dragon_leg();\n        translate([0, 0, 0]) dragon_leg();\n        translate([0, 0, 0]) dragon_leg();\n        \n        // Wings\n        translate([0, 0, 35]) dragon_wing();\n        translate([0, 0, 40]) dragon_wing();\n        translate([0, 0, 40]) dragon_wing();\n        \n        // Tail\n        translate([0, 0, 60]) dragon_tail();\n        translate([0, 0, 65]) dragon_tail();\n        translate([0, 0, 65]) dragon_tail();\n        \n        // Head\n        scale([1.5, 0.6, 0.5]) dragon_head();\n        scale([1.3, 0.7, 0.6]) dragon_head();\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "pyramid with face",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 63,
      "code": "// Realistic Medium-Complexity Medium-Weight 3D-Print Model of a Medieval Sword\n// Overall height: 90 mm, width: 115 mm, length: 85 mm, wall thickness: 2 mm\n\n$fa = 1; $fs = 0.4;\n\n// Basic sword parameters\nblade_length = 80;\nblade_width = 18;\nblade_thickness = 2;\nguard_length = 70;\nguard_width = 110;\nguard_height = 30;\nhilt_length = 65;\nhilt_width = 10;\n\n// Main blade geometry\nmodule blade() {\n    difference() {\n        // Main blade body\n        hull() {\n            translate([0, 0, -blade_thickness/2])\n                cube([blade_length, blade_width, blade_thickness], center=true);\n            \n            // Blade taper\n            translate([0, 0, blade_thickness/2])\n                scale([1, 1, 0.7])\n                    cube([blade_length/2, blade_width, blade_thickness], center=true);\n        }\n        \n        // Blade edge taper\n        translate([0, 0, blade_thickness/2])\n            cube([blade_length*0.8, blade_width*0.6, blade_thickness*1.2], center=true);\n    }\n}\n\n// Wooden hilt\nmodule hilt() {\n    // Main hilt block\n    difference() {\n        union() {\n            // Tapered grip\n            for(i = [0:3]) {\n                translate([0, 0, blade_thickness/2 + i*20])\n                    scale([1, 0.3, 0.3])\n                        sphere(d=40);\n            }\n            \n            // Hilt shaft\n            translate([0, 0, blade_thickness/2])\n                cylinder(h=25, d=8, $fn=32);\n        }\n        \n        // Reinforcement ribs\n        for(i = [0:1]) {\n            translate([0, 0, blade_thickness/2 - 15 + i*10])\n                cube([2, blade_width*0.5, 15], center=true);\n        }\n    }\n}\n\n// Iron reinforcement bands\nmodule iron_band(x, y, z) {\n    translate([x, y, z])\n        difference() {\n            cube([1, 1, 1]);\n            translate([0, 0, -0.2])\n                cube([2, 2, 1.5]);\n        }\n}\n\n// Decorative edge details\nmodule edge_details() {\n    // Top edge detail\n    translate([0, 0, 0])\n        difference() {\n            cube([blade_length*0.8, blade_width*0.6, blade_thickness*1.2], center=true);\n            translate([0, 0, 0])\n                cube([blade_length*0.7, blade_width*0.5, blade_thickness*1.1], center=true);\n        }\n    \n    // Bottom edge detail\n    translate([0, 0, -blade_thickness/2])\n        difference() {\n            cube([blade_length*0.8, blade_width*0.6, blade_thickness*1.2], center=true);\n            translate([0, 0, -blade_thickness/2])\n                cube([blade_length*0.7, blade_width*0.5, blade_thickness*1.1], center=true);\n        }\n    \n    // Guard details\n    translate([0, 0, blade_thickness/2 - 2])\n        difference() {\n            cylinder(h=3, d=20, $fn=32);\n            translate([0, 0, -2])\n                cylinder(h=3, d=16, $fn=32);\n        }\n    \n    translate([0, 0, -guard_height/2])\n        difference() {\n            cylinder(h=3, d=20, $fn=32);\n            translate([0, 0, -2])\n                cylinder(h=3, d=16, $fn=32);\n        }\n}\n\n// Assembly\nunion() {\n    // Main blade\n    translate([0, 0, blade_thickness/2 + blade_thickness/2])\n        blade();\n    \n    // Hilt\n    translate([0, 0, blade_thickness/2 + 15])\n        hilt();\n    \n    // Reinforcement bands\n    for(i = [0:3]) {\n        translate([0, 0, -blade_thickness/2 + i*10])\n            iron_band(i, 0, 0);\n    }\n    \n    // Decorative details\n    for(i = [0:1]) {\n        translate([0, 0, -blade_thickness/2 + i*8])\n            edge_details();\n    }\n    \n    // Guard details\n    translate([0, 0, -guard_height/2])\n        guard_details();\n}",
      "inference_error": null,
      "render_error": "Rendering timeout (>60s)",
      "vlm_response": null
    },
    {
      "object": "cube tower",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 60,
      "code": "// Realistic 3D-Printable Mini-Tower Model - Medium Complexity\n// Overall height ~80mm, printable on FDM (no support needed)\n\n// Wall thickness for 3D printing (0.4 mm)\nwall = 1.2;\n\n// Module: Tower Body\nmodule tower_body() {\n    difference() {\n        // Main rectangular block\n        cube([120, 80, 40], center=true);\n        \n        // Hollow interior\n        translate([0, 0, -1])\n            cube([116, 76, 36], center=true);\n        \n        // Base footplate\n        translate([0, 0, -2])\n            cube([40, 40, 4], center=true);\n    }\n}\n\n// Module: Concrete Support\nmodule concrete_support() {\n    // Main block\n    difference() {\n        cube([120, 80, 30], center=true);\n        translate([0, 0, -1])\n            cube([116, 76, 20], center=true);\n    }\n}\n\n// Module: Window Openings\nmodule window_openings() {\n    // Left-side window\n    difference() {\n        cube([20, 45, 10], center=true);\n        translate([-2, -10, -2])\n            cube([20, 45, 10], center=true);\n    }\n    \n    // Right-side window\n    difference() {\n        cube([20, 45, 10], center=true);\n        translate([2, -10, -2])\n            cube([20, 45, 10], center=true);\n    }\n}\n\n// Module: Ventilation Grates\nmodule ventilation_grates() {\n    // Side grates\n    for (x = [-30, 30]) {\n        difference() {\n            cube([4, 4, 15], center=true);\n            translate([x, 0, 0])\n                cube([4, 4, 15], center=true);\n        }\n    }\n}\n\n// Module: Control Panel\nmodule control_panel() {\n    difference() {\n        cube([20, 30, 15], center=true);\n        translate([0, 0, 0])\n            cube([20, 30, 15], center=true);\n    }\n}\n\n// Module: Antenna\nmodule antenna() {\n    difference() {\n        cylinder(h=8, r=10, center=true);\n        translate([0, 0, 2])\n            cylinder(h=8, r=8, center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    tower_body();\n    \n    // Support structure\n    translate([0, 0, -1])\n        concrete_support();\n    \n    // Windows\n    window_openings();\n    \n    // Ventilation\n    ventilation_grates();\n    \n    // Control panel\n    control_panel();\n    \n    // Antenna\n    antenna();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no. the image shows a single, small cube that is not connected to any other cubes, and it is not on a surface, making it difficult to describe it as a \"tower\" in the traditional sense. it is more of a standalone cube."
    },
    {
      "object": "wall block",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 96,
      "code": "// Realistic 3D-printable wooden chair\n// Medium complexity with no overhangs\n// Designed for FDM printing with 2mm wall thickness\n// Overall height: 120 mm, width 80 mm, depth 80 mm\n\n// Main parameters\nseat_width = 80;\nseat_depth = 80;\nseat_thickness = 4;\nbackrest_height = 60;\nleg_thickness = 3;\n\n// Base assembly\nmodule base() {\n    difference() {\n        cube([120, 120, 10], center=true);\n        translate([0, 0, -5]) cube([120, 120, 10], center=true);\n    }\n}\n\n// Leg assembly\nmodule leg(x_pos, y_pos) {\n    translate([x_pos, y_pos, 0]) {\n        // Main leg\n        cylinder(h=leg_thickness, r=leg_thickness/2, center=false);\n        // Foot rest\n        translate([0, 0, -leg_thickness/2])\n            cylinder(h=2, r=leg_thickness/2, center=false);\n    }\n}\n\n// Chair seat\nmodule seat() {\n    difference() {\n        cube([seat_width, seat_depth, seat_thickness], center=true);\n        translate([0, 0, -1]) cube([seat_width-4, seat_depth-4, seat_thickness-2], center=true);\n    }\n}\n\n// Chair backrest\nmodule backrest() {\n    difference() {\n        cube([seat_width-10, seat_depth-10, backrest_height], center=true);\n        translate([0, 0, -backrest_height/2]) cube([seat_width-10, seat_depth-10, backrest_height/2], center=true);\n        // Rounded top edge\n        translate([0, 0, -backrest_height/2])\n            cube([seat_width-10, seat_depth-10, 2], center=true);\n    }\n}\n\n// Front legs\nmodule front_legs() {\n    for(x = [-40, 40]) {\n        translate([x, 0, -leg_thickness/2]) {\n            cylinder(h=leg_thickness/2, r=leg_thickness/2, center=false);\n        }\n    }\n}\n\n// Back legs\nmodule back_legs() {\n    for(x = [-40, 40]) {\n        translate([x, -seat_depth/2, -leg_thickness/2]) {\n            cylinder(h=leg_thickness/2, r=leg_thickness/2, center=false);\n        }\n    }\n}\n\n// Decorative joints\nmodule joints() {\n    // Top joint\n    translate([0, 0, seat_thickness/2]) {\n        cylinder(h=seat_thickness/2, r=leg_thickness/2, center=false);\n    }\n    // Side joints\n    translate([0, 0, -leg_thickness/2 - 10]) {\n        cylinder(h=leg_thickness/2 + 5, r=leg_thickness/2, center=false);\n    }\n}\n\n// Assemble the chair\nunion() {\n    base();\n    joint();\n    seat();\n    backrest();\n    front_legs();\n    back_legs();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "pyramid tower",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 59,
      "code": "// Realistic Medium-Complexity Toy Model - Realistic Toy Car\n// Overall scale: ~80mm long x ~35mm wide x ~25mm high\n\n// Wall thickness for 3D printing (0.4mm)\nwall = 0.4;\n\n// Main body dimensions\nbody_length = 80;\nbody_width = 35;\nbody_height = 25;\n\n// Wheel dimensions\nwheel_diameter = 40;\nwheel_width = 12;\nwheel_height = 8;\n\n// Body shell\nmodule car_body() {\n    difference() {\n        // Main body shell\n        cube([body_length, body_width, body_height]);\n        \n        // Hollow out for interior\n        translate([wall, wall, wall])\n            cube([body_length - 2*wall, body_width - 2*wall, body_height - 2*wall]);\n        \n        // Front windshield opening\n        translate([body_length/2 - 5, body_width/2 - 5, body_height/2 - 10])\n            cube([5, 5, 8]);\n        \n        // Hood opening\n        translate([body_length/2 - 5, body_width/2 - 5, body_height/2 - 10])\n            cube([5, 5, 8]);\n        \n        // Rear window opening\n        translate([body_length/2 - 5, body_width/2 - 5, body_height/2 - 10])\n            cube([5, 5, 8]);\n    }\n}\n\n// Wheel assembly\nmodule wheel() {\n    difference() {\n        cylinder(h=wheel_height, r=wheel_diameter/2);\n        // Tire\n        cylinder(h=wheel_height, r=wheel_diameter/3);\n    }\n}\n\n// Windshield\nmodule windshield() {\n    difference() {\n        translate([0, body_width/2 - 1, body_height/2 - 10])\n            cube([body_length/2, body_width/2 - 2, 6]);\n        translate([body_length/2 + 1, body_width/2 - 2, body_height/2 - 10])\n            cube([body_length/2 - 1, body_width/2 - 2, 6]);\n    }\n}\n\n// Body panels\nmodule panel_details() {\n    // Side panels\n    difference() {\n        translate([body_length/2 - 3, body_width/2 - 3, body_height/2 - 8])\n            cube([body_length - 6, body_width - 6, body_height - 10]);\n        translate([body_length/2 - 3, body_width/2 - 3, body_height/2 - 8])\n            cube([body_length - 6, body_width - 6, body_height - 10]);\n        translate([body_length/2 - 3, body_width/2 - 3, body_height/2 - 5])\n            cube([body_length - 6, body_width - 6, body_height - 10]);\n    }\n    // Roof\n    difference() {\n        translate([body_length/2 + 2, body_width/2 + 2, body_height - 10])\n            cube([body_length - 4, body_width - 4, body_height - 10]);\n        translate([body_length/2 + 2, body_width/2 + 2, body_height - 10])\n            cube([body_length - 4, body_width - 4, body_height - 10]);\n    }\n}\n\n// Front grill\nmodule grill() {\n    difference() {\n        translate([body_length/2 - 3, body_width/2 - 3, body_height/2 - 15])\n            cube([6, 3, 10]);\n        translate([body_length/2 - 3, body_width/2 - 3, body_height/2 - 15])\n            cube([6, 3, 10]);\n    }\n}\n\n// Rear lights\nmodule lights() {\n    // Headlights\n    difference() {\n        translate([body_length/2 - 3, body_width/2 - 3, body_height - 5])\n            cube([4, 3, 6]);\n        translate([body_length/2 - 3, body_width/2 - 3, body_height - 5])\n            cube([4, 3, 6]);\n    }\n    // Taillights\n    difference() {\n        translate([body_length/2 - 3, body_width/2 - 3, body_height - 5])\n            cube([4, 3, 6]);\n        translate([body_length/2 - 3, body_width/2 - 3, body_height - 5])\n            cube([4, 3, 6]);\n    }\n}\n\n// Wheels on rear\nmodule wheels() {\n    for(side = [-1, 1]) {\n        for(rotation = [0, 90, 180, 270]) {\n            rotate([0, rotation * 30, 0])\n                translate([body_length/2, body_width/2, wheel_height/2])\n                    rotate([0, 0, side * 15])\n                        wheel();\n        }\n    }\n}\n\n// Assembly\nscale([1, 1, 1])\n    car_body();\n    translate([0, 0, 0])\n        wheel();\n    translate([0, 0, 0])\n        windshield();\n    translate([0, 0, 0])\n        panel_details();\n    translate([body_length/2 - 3, body_width/2 - 3, body_height/2 - 15])\n        lights();\n    translate([body_length/2 - 3, body_width/2 - 3, body_height/2 - 5])\n        grill();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "dome",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 70,
      "code": "// Realistic Medium-Complexity Dragon\n// 3D-printable with 2mm walls and no steep overhangs\n\nmodule body() {\n    // Torso - elongated oval\n    scale([1.2, 0.6, 0.3]) sphere(d = 12, $fn = 32);\n}\n\nmodule head() {\n    // Skull base\n    difference() {\n        scale([1.3, 0.7, 0.4]) sphere(d = 10, $fn = 32);\n        translate([0, 0, -0.1]) cube([12, 8, 10], center = true);\n    }\n    \n    // Snout\n    translate([0, 0, 2.5]) scale([1.5, 0.45, 1.2]) sphere(d = 4, $fn = 24);\n}\n\nmodule wings() {\n    // Left wing\n    difference() {\n        scale([1, 0.5, 0.4]) sphere(d = 15, $fn = 32);\n        translate([-2, 0, 0]) cube([4, 6, 3], center = true);\n    }\n    \n    // Right wing\n    difference() {\n        scale([1, 0.5, 0.4]) sphere(d = 13, $fn = 32);\n        translate([2, 0, 0]) cube([4, 6, 3], center = true);\n    }\n}\n\nmodule legs() {\n    // Front legs (both)\n    difference() {\n        scale([1, 0.7, 0.5]) sphere(d = 8, $fn = 32);\n        translate([0, 0, -1.5]) cube([4, 4, 2], center = true);\n        translate([0, 0, -4]) cube([3, 3, 1.5], center = true);\n    }\n    \n    // Back legs\n    difference() {\n        scale([1, 0.7, 0.5]) sphere(d = 7, $fn = 32);\n        translate([0, 0, -3]) cube([4, 4, 2], center = true);\n        translate([0, 0, -5]) cube([3, 3, 1.5], center = true);\n    }\n    \n    // Feet\n    difference() {\n        scale([1.2, 0.6, 0.4]) sphere(d = 6, $fn = 32);\n        translate([0, 0, -2]) cube([5, 5, 3], center = true);\n        translate([0, 0, -4]) cube([4, 4, 2], center = true);\n    }\n}\n\nmodule tail() {\n    difference() {\n        scale([0.9, 0.7, 0.6]) sphere(d = 6, $fn = 32);\n        translate([0, 0, 0]) cube([2, 2, 4], center = true);\n        translate([0, 0, -1]) cube([1.5, 1.5, 3], center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    head();\n    wings();\n    legs();\n    tail();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "brick",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 38,
      "code": "// Realistic OpenSCAD Brick \u2013 Medium Complexity\n// Overall dimensions: 120mm wide x 80mm deep x 60mm tall\n\n$fn = 32;  // Smooth curves\n\nmodule brick_base() {\n    difference() {\n        // Main flat base plate\n        cube([120, 80, 4], center=true);\n        \n        // Drainage hole\n        translate([20, 20, -0.5])\n            cylinder(h=1, d=30);\n    }\n}\n\nmodule brick_wall() {\n    difference() {\n        // Outer shell\n        cube([118, 78, 45], center=true);\n        \n        // Lightening holes\n        for (x = [-40, 40])\n            for (y = [-30, 30])\n                translate([x, y, -1.5])\n                    cylinder(h=2, d=8, center=true);\n    }\n}\n\nmodule brick_texture() {\n    difference() {\n        // Main surface\n        cube([116, 76, 46], center=true);\n        \n        // Chamfered edges\n        translate([0, 0, 0])\n            cube([116, 76, 46], center=true);\n    }\n}\n\nmodule brick_decoration() {\n    // Top rim\n    difference() {\n        cube([118, 78, 6], center=true);\n        translate([0, 0, 2])\n            cube([116, 76, 4], center=true);\n    }\n    \n    // Bottom rim\n    difference() {\n        cube([116, 76, 6], center=true);\n        translate([0, 0, -2])\n            cube([116, 76, 4], center=true);\n    }\n    \n    // Top surface texture \u2013 small ridges\n    for (x = [-40, 40])\n        for (y = [-30, 30])\n            translate([x, y, 0])\n                cube([0.5, 0.5, 1], center=true);\n}\n\nmodule brick_keyhole() {\n    difference() {\n        // Central keyhole\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n                cylinder(h=3, d=15, center=true);\n        \n        // Keyhole mounting slots\n        translate([0, 0, -0.5])\n            cube([10, 10, 6], center=true);\n    }\n}\n\nmodule brick_label() {\n    difference() {\n        // Main label area\n        cube([120, 80, 8], center=true);\n        \n        // Raised text\n        for (x = [0:5:110])\n            translate([x, 0, -1.5])\n                cube([0.5, 8, 1.5], center=true);\n        \n        for (y = [0:3:78])\n            translate([0, y, -0.5])\n                cube([0.5, 8, 1.5], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    brick_base();\n    brick_wall();\n    brick_texture();\n    brick_decoration();\n    brick_keyhole();\n    brick_label();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "random shape",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 45,
      "code": "// Realistic-style 3D-printable box\n// Medium complexity with 2mm wall thickness, no steep overhangs\n\n// Overall dimensions\nbox_w = 80;\nbox_h = 60;\nbox_d = 40;\n\n// Wall thickness\nwall = 2;\n\n// Base plate\nbase_d = 50;\nbase_h = 2;\n\n// Lid\nlid_d = 40;\nlid_h = 3;\n\n// Handle\nhandle_d = 8;\nhandle_h = 15;\n\n// Reinforcement ribs\nrib_t = 1.2;\n\nmodule box() {\n    difference() {\n        // Main box body\n        cube([box_w, box_h, box_d], center = true);\n\n        // Hollow interior for material saving\n        translate([0, 0, wall/2])\n            cube([box_w - 2*wall, box_h - 2*wall, box_d - wall], center = true);\n\n        // Reinforcement ribs\n        for (x = [-box_w/2 + rib_t, box_w/2 - rib_t])\n            for (y = [-box_h/2 + rib_t, box_h/2 - rib_t])\n                translate([x, y, -wall/2])\n                    cube([rib_t, rib_t, wall], center = true);\n    }\n\n    // Lid\n    difference() {\n        cube([lid_d, lid_h, lid_d], center = true);\n        translate([0, 0, wall/2])\n            cube([lid_d - 2*wall, lid_h - 2*wall, lid_d - wall], center = true);\n    }\n\n    // Handle\n    translate([-box_w/2 - 5, box_h/2 - 5, -lid_h/2 - 5])\n        rotate([0, 15, 0])\n            cylinder(h = handle_h, r1 = handle_d/2, r2 = handle_d/2, center = false);\n}\n\n// Main assembly\nunion() {\n    box();\n    translate([0, 0, -box_d/2])\n        box();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "corner piece",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 57,
      "code": "// Realistic Realistic Model - Medium Complexity\n\n// Overall dimensions: ~70mm long, 50mm wide, 20mm high\n\n// Main body - streamlined cylinder with rounded top\nmodule body() {\n    difference() {\n        // Main body block\n        hull() {\n            translate([0, 0, 5]) sphere(d=15);\n            translate([0, 0, 25]) sphere(d=12);\n        }\n        // Hollow out for structural integrity\n        translate([0, 0, 7]) sphere(d=13);\n    }\n}\n\n// Engine housing with nozzle and intake\nmodule engine_housing() {\n    difference() {\n        // Main housing block\n        hull() {\n            translate([0, 0, 0]) sphere(d=18);\n            translate([0, 0, 20]) sphere(d=16);\n        }\n        // Turbine nozzle\n        translate([0, -4, 4]) sphere(d=3);\n        // Air intake\n        translate([0, 5, 10]) cube([4, 2, 2], center=true);\n    }\n}\n\n// Propeller assembly\nmodule propeller() {\n    difference() {\n        hull() {\n            translate([0, -8, 0]) sphere(d=3);\n            translate([0, -8, 0]) sphere(d=2);\n        }\n        // Hub\n        translate([0, -10, 0]) sphere(d=2);\n        // Pitch blades\n        for (i = [0:3]) {\n            rotate([0, 0, i * 120]) {\n                translate([0, -8, -8 + i * 3]) cube([0.5, 0.5, 0.2], center=true);\n            }\n        }\n    }\n}\n\n// Wing assembly\nmodule wing_assembly() {\n    difference() {\n        hull() {\n            translate([0, 0, 0]) sphere(d=18);\n            translate([0, 0, 20]) sphere(d=16);\n        }\n        // Wing spar\n        translate([0, 0, 5]) cube([2, 2, 2], center=true);\n        // Wing root\n        translate([-1, -1, 0]) cube([2, 2, 2], center=true);\n        // Wing tip\n        translate([2, 0, 0]) sphere(d=15);\n    }\n}\n\n// Landing gear\nmodule landing_gear() {\n    difference() {\n        cylinder(h=8, r=4);\n        translate([0, 0, 8]) sphere(d=4);\n    }\n}\n\n// Main assembly\nmodule main_assembly() {\n    union() {\n        // Engine housing\n        translate([0, 0, 7]) engine_housing();\n        \n        // Propeller\n        translate([0, -8, 0]) rotate([90, 0, 0]) propeller();\n        \n        // Wings\n        translate([0, 0, 20]) wing_assembly();\n        translate([0, 0, 40]) wing_assembly();\n        \n        // Landing gear\n        landing_gear();\n    }\n}\n\n// Support struts\nmodule support_struts() {\n    // Engine support\n    translate([0, 0, -15]) cube([3, 2, 2], center=true);\n    translate([0, 0, 20]) cube([3, 2, 2], center=true);\n    \n    // Propeller support\n    translate([0, -8, -15]) cube([2, 2, 2], center=true);\n}\n\n// Control surfaces\nmodule control_surfaces() {\n    // Rudder\n    translate([0, 0, -20]) cube([1, 1, 1], center=true);\n    translate([0, 0, -30]) cube([1, 1, 1], center=true);\n}\n\n// Assembly\nunion() {\n    // Base\n    color(\"silver\") cylinder(h=10, r=12);\n\n    // Main body\n    color(\"gray\") body();\n\n    // Engine housing\n    color(\"black\") engine_housing();\n\n    // Propeller\n    color(\"red\") propeller();\n\n    // Wings\n    color(\"blue\") wing_assembly();\n\n    // Landing gear\n    color(\"gray\") landing_gear();\n\n    // Support struts\n    color(\"silver\") support_struts();\n\n    // Control surfaces\n    color(\"black\") control_surfaces();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "organic form",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 99,
      "code": "// Realistic medium-complexity 3D-printable model of a 19th-century Indian parasol\n// Features traditional Indian weaving patterns and decorative motifs\n\n// Overall dimensions (mm)\nparasol_length = 70;\nparasol_width = 45;\nparasol_height = 30;\n\n// Base plate thickness\nplate_thickness = 2;\n\n// Base plate detail\nmodule base_plate() {\n    difference() {\n        cube([parasol_width, parasol_height, plate_thickness]);\n        translate([0, 0, plate_thickness/2])\n            cube([parasol_width - 2, parasol_height - 2, plate_thickness]);\n    }\n}\n\n// Decorative lattice pattern on base plate\nmodule lattice_pattern() {\n    for(x = [0, 1]) {\n        for(y = [0, 1]) {\n            translate([x * parasol_width/2 + 15, y * parasol_height/2 + 15])\n                cylinder(h = 0.1, r = 2, $fn = 16);\n        }\n    }\n}\n\n// Decorative edge pattern on parasol blades\nmodule edge_pattern() {\n    for(i = [0:2]) {\n        translate([i * parasol_length/3, 0, 0])\n            rotate([0, 0, i * 30])\n                linear_extrude($fn = 64)\n                    polygon(points = [\n                        [0, 0],\n                        [0, 8],\n                        [0, 16],\n                        [15, 8],\n                        [15, 0]\n                    ]);\n    }\n}\n\n// Decorative handle with Indian motifs\nmodule handle() {\n    color(\"darkgreen\")\n    difference() {\n        cylinder(h = 15, r = 12);\n        translate([0, 0, 15])\n            cylinder(h = 10, r = 12);\n    }\n}\n\n// Traditional Indian weaving pattern on handle\nmodule handle_pattern() {\n    translate([0, 0, 20])\n    difference() {\n        cylinder(h = 8, r = 10);\n        translate([0, 0, 10])\n            cylinder(h = 6, r = 8);\n    }\n}\n\n// Central decorative element - stylized palm leaf\nmodule palm_leaf() {\n    color(\"goldenrod\")\n    difference() {\n        // Main leaf shape\n        scale([1.2, 0.6, 0.8])\n            sphere(d = 8, $fn = 16);\n        \n        // Cutaway for realism\n        translate([0, 0, 5])\n            cube([7, 4, 10], center = true);\n        \n        // Palm tip detail\n        translate([0, 0, -1])\n            cylinder(h = 2, r = 2, $fn = 8);\n    }\n}\n\n// Reinforcement ribs around base plate\nmodule reinforcement_ribs() {\n    for(i = [0:2]) {\n        translate([0, 0, 0])\n            cube([2, 2, 1]);\n        translate([0, 0, -1])\n            cube([2, 2, 1]);\n    }\n}\n\n// Assembly of the 3D-printable model\n// Base plate\nbase_plate();\n\n// Decorative lattice pattern\nlattice_pattern();\n\n// Decorative edge pattern\nedge_pattern();\n\n// Handle with traditional Indian motifs\nhandle();\n\n// Central decorative element\npalm_leaf();\n\n// Reinforcement ribs\nreinforcement_ribs();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "bumpy sphere",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 57,
      "code": "// Realistic Toy Box - Medium Complexity\n// Dimensions: 80mm wide x 50mm deep x 35mm high\n\n$fn = 24;  // Resolution for smooth curves\n\nmodule box_body() {\n    difference() {\n        // Main box\n        cube([80, 50, 35], center = true);\n\n        // Inner cavity\n        translate([0, 0, 2])\n            cube([76, 46, 33], center = true);\n    }\n}\n\nmodule box_bottom() {\n    translate([0, 0, -2])\n        cube([80, 50, 3], center = true);\n}\n\nmodule box_front() {\n    difference() {\n        // Front panel\n        cube([70, 40, 3], center = true);\n\n        // Hollow center\n        translate([0, 0, -1])\n            cube([68, 38, 2], center = true);\n    }\n}\n\nmodule box_back() {\n    difference() {\n        // Back panel\n        cube([70, 40, 3], center = true);\n\n        // Hollow center\n        translate([0, 0, 2])\n            cube([68, 38, 2], center = true);\n    }\n}\n\nmodule box_sides() {\n    // Side panels\n    difference() {\n        cube([80, 50, 3], center = true);\n        translate([0, 0, 2])\n            cube([76, 46, 3], center = true);\n    }\n\n    // Roof\n    difference() {\n        translate([0, 0, -2])\n            cube([80, 50, 3], center = true);\n        translate([0, 0, -1])\n            cube([76, 46, 3], center = true);\n    }\n\n    // Door\n    translate([0, 0, 0])\n        cube([72, 42, 4], center = true);\n}\n\nmodule box_lid() {\n    difference() {\n        translate([0, 0, 0])\n            cube([80, 50, 3], center = true);\n\n        // Hollow interior\n        translate([0, 0, 2])\n            cube([76, 46, 3], center = true);\n    }\n}\n\nmodule box_corners() {\n    difference() {\n        // Corner top\n        translate([0, 0, 0])\n            cylinder(h = 3, r = 8);\n\n        // Corner bottom\n        translate([0, 0, 0])\n            cylinder(h = 3, r = 8);\n\n        // Corner sides\n        translate([0, 0, 0])\n            cube([70, 40, 3], center = true);\n        translate([0, 0, 0])\n            cube([70, 40, 3], center = true);\n        translate([0, 0, 0])\n            cube([70, 40, 3], center = true);\n    }\n}\n\nmodule box_label() {\n    translate([0, 0, -1])\n        cube([8, 4, 2], center = true);\n}\n\nmodule box_screw_holes() {\n    for (x = [0, 76, 70])\n        for (y = [0, 46, 42])\n            translate([x, y, -1])\n                cylinder(h = 1, r = 1.5);\n}\n\n// Main assembly\nunion() {\n    box_body();\n    box_bottom();\n    box_front();\n    box_back();\n    box_sides();\n    box_lid();\n    box_corner();\n    box_label();\n    box_screw_holes();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "blob",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 85,
      "code": "// Realistic 3D-Printable Office Chair - Medium Complexity\n// Dimensions: ~120 mm wide, ~60 mm deep, ~40 mm high\n\nmodule chair_base() {\n    // Main seat platform\n    difference() {\n        cube([100, 60, 25], center=true);\n        translate([0, 0, 5]) cube([96, 56, 21], center=true);\n    }\n    \n    // Seat cushion\n    difference() {\n        translate([0, 0, 12.5]) cube([96, 56, 20], center=true);\n        translate([0, 0, 12.5]) cube([96, 56, 16], center=true);\n    }\n    \n    // Backrest\n    difference() {\n        translate([-45, 0, 12.5]) cube([60, 40, 25], center=true);\n        translate([-45, 0, 12.5]) cube([60, 40, 15], center=true);\n    }\n    \n    // Armrests\n    translate([-35, 0, 12.5]) {\n        cube([12, 40, 20], center=true);\n        translate([-12, 0, 12.5]) cube([12, 40, 20], center=true);\n    }\n    translate([35, 0, 12.5]) {\n        cube([12, 40, 20], center=true);\n        translate([12, 0, 12.5]) cube([12, 40, 20], center=true);\n    }\n    \n    // Legs\n    for (x = [-40, 0, 40]) {\n        for (y = [-25, 0, 25]) {\n            translate([x, y, -25]) {\n                cylinder(h=15, r=5, center=true);\n                translate([x, y, 0]) cube([10, 10, 25], center=true);\n            }\n        }\n    }\n    \n    // Gas lift cylinder\n    cylinder(h=30, r=12, center=true);\n    translate([0, 0, 30]) sphere(d=12);\n    \n    // Gas lift tube\n    translate([0, 0, 35]) cylinder(h=20, r=4, center=true);\n    translate([0, 0, 35]) sphere(d=4);\n    \n    // Armrest supports\n    translate([-30, 0, 12.5]) {\n        cube([10, 4, 20], center=true);\n        translate([-20, 0, 12.5]) cube([10, 4, 20], center=true);\n    }\n    translate([30, 0, 12.5]) {\n        cube([10, 4, 20], center=true);\n        translate([20, 0, 12.5]) cube([10, 4, 20], center=true);\n    }\n    \n    // Headrest\n    difference() {\n        translate([0, 0, 30]) cube([12, 4, 20], center=true);\n        translate([0, 0, 30]) cube([10, 4, 15], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    chair_base();\n    chair_base();\n    chair_base();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "twisted cylinder",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 34,
      "code": "// Twistable Cylinder - Realistic style, medium complexity\n// A cylinder that twists around its central axis to create a novel shape\n\n// Overall dimensions\ncylinder_diameter = 60;\ncylinder_height = 80;\ntwist_radius = 30;\ntwist_height = 70;\n\n// Main cylinder body\ndifference() {\n    cylinder(h=cylinder_height, r=cylinder_diameter/2, $fn=64);\n    \n    // Central hub\n    translate([0, 0, cylinder_height/2 - 1])\n        cylinder(h=1, r=cylinder_diameter/2 + 2, $fn=64);\n}\n\n// Tapered cylinder ends\ndifference() {\n    cylinder(h=twist_height, r=cylinder_diameter/2, $fn=64);\n    \n    // Tapered top\n    translate([0, 0, twist_height/2 - 1])\n        cylinder(h=twist_height + 1, r=cylinder_diameter/2, $fn=64);\n    \n    // Tapered bottom\n    translate([0, 0, -twist_height/2 + 1])\n        cylinder(h=twist_height + 1, r=cylinder_diameter/2, $fn=64);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "wrinkled cube",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 68,
      "code": "// Realistic medium-complexity model of a classic 1930s-40s wooden roller coaster car\n// Dimensions in mm, suitable for 3D printing (no steep overhangs)\n\n// Overall dimensions\nwheel_diameter = 60;\nwheel_height = 35;\ncar_length = 65;\ncar_width = 35;\ncar_height = 28;\ntrack_width = 8;\ntrack_depth = 6;\n\n// Wall thickness for printing\nwall_thickness = 2;\n\n// Main wheel\nmodule wheel() {\n    difference() {\n        cylinder(h=wheel_height/2, d=wheel_diameter, $fn=6);\n        translate([0,0,wall_thickness/2])\n            cylinder(h=wheel_height/2 - wall_thickness, d=wheel_diameter - wall_thickness*2, $fn=6);\n        // Car base\n        translate([0,0,wheel_height/2/2])\n            cylinder(h=wheel_height/2 - wall_thickness*2, d=wheel_diameter - wall_thickness*3, $fn=6);\n    }\n}\n\n// Car frame\nmodule car() {\n    difference() {\n        // Main body\n        translate([0,0,0])\n            cube([car_length, car_width, car_height], center=true);\n        // Windshield\n        translate([car_length/2 - 10, car_width/2 - 5, car_height/2])\n            cube([15, 15, 3], center=true);\n        // Hood\n        translate([car_length/2 - 20, car_width/2 - 5, car_height - 2])\n            cube([25, 20, 3], center=true);\n        // Side windows\n        for (x = [-car_length/3, car_length/3])\n            for (y = [-car_width/3, car_width/3])\n                translate([x, y, car_height/2 - 2])\n                    cube([10, 2, 1], center=true);\n        // Back window\n        translate([car_length/3, car_width/3, car_height/2])\n            cube([12, 12, 2], center=true);\n    }\n}\n\n// Track system\nmodule track() {\n    difference() {\n        cylinder(h=track_width, d=track_width, center=true, $fn=6);\n        translate([0,0,track_width/2 - 2])\n            cylinder(h=track_width - 4, d=track_width - 4, center=true, $fn=6);\n        translate([0,0,-track_width/2 + 2])\n            cylinder(h=track_width - 4, d=track_width - 4, center=true, $fn=6);\n    }\n}\n\n// Wheels with axles\nmodule wheel_assembly() {\n    difference() {\n        // Tire\n        translate([0,0,wheel_height/2 - wheel_height/2])\n            cylinder(h=wheel_height/2 - 2, d=wheel_diameter - 2, $fn=6);\n        // Car base\n        translate([0,0,wheel_height/2 - wheel_height/2 + 2])\n            cylinder(h=wheel_height/2 - 2, d=wheel_diameter - 2, $fn=6);\n        // Axle\n        translate([0,0,wheel_height/2 - wheel_height/2 - 3])\n            cylinder(h=3, d=12, center=true, $fn=6);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    wheel_assembly();\n    car();\n    track();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "bolt",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 3,
      "code": "// Medium-complexity realistic model of a 3D-printable 1930s style typewriter (Typewriter 125)\n\n// Overall dimensions: ~120mm tall, ~40mm wide, ~35mm deep\n\nmodule typewriter_body() {\n    // Base metal body frame\n    difference() {\n        cube([50, 35, 15], center=true);\n        translate([0, 0, 0]) cube([50, 35, 15], center=true);\n    }\n\n    // Front panel with typewriter design elements\n    difference() {\n        cube([45, 30, 10], center=true);\n        translate([0, 0, 0]) cube([45, 30, 10], center=true);\n    }\n\n    // Keyboard\n    difference() {\n        cube([45, 30, 3], center=true);\n        translate([0, 0, 0]) cube([45, 30, 3], center=true);\n    }\n\n    // Keys\n    for (i=[0:10]) {\n        translate([0, 12 - i*3, 10]) {\n            // Keyhead\n            cylinder(h=1.5, r=1.5, center=true);\n            // Keycap\n            translate([0, 0, 1.5]) {\n                cube([2, 3, 1], center=true);\n            }\n        }\n    }\n\n    // Typeface letters\n    for (i=[0:8]) {\n        translate([0, 12 - i*3, 10]) {\n            // Letter body\n            difference() {\n                cylinder(h=1.5, r=1.2, center=true);\n                translate([0, 0, 0]) cube([2, 1, 1], center=true);\n            }\n            // Letter stem\n            translate([0, 0, 1.5]) {\n                cylinder(h=1.5, r=1.2, center=true);\n            }\n            // Letter body\n            translate([0, 0, 1.5]) {\n                cylinder(h=1.5, r=1.2, center=true);\n            }\n        }\n    }\n\n    // Punch\n    translate([12, 10, 10]) {\n        cube([2, 2, 0.5], center=true);\n    }\n\n    // Rubber feet\n    for (x=[-15, 15]) {\n        for (y=[-15, 15]) {\n            translate([x, y, -1.5]) {\n                cylinder(h=2, r=1.2, center=true);\n            }\n        }\n    }\n\n    // Cable tie\n    translate([20, 10, 10]) {\n        difference() {\n            cylinder(h=1, r=2, center=true);\n            translate([0, 0, 0]) cylinder(h=2, r=1.5, center=true);\n        }\n    }\n\n    // Feet\n    for (x=[-15, 15]) {\n        for (y=[-15, 15]) {\n            translate([x, y, -1.5]) {\n                cylinder(h=2, r=1.2, center=true);\n            }\n        }\n    }\n\n    // Top surface\n    difference() {\n        cube([30, 30, 15], center=true);\n        translate([0, 0, 0]) cube([30, 30, 15], center=true);\n    }\n\n    // Bottom surface\n    difference() {\n        cube([30, 30, 15], center=true);\n        translate([0, 0, 0]) cube([30, 30, 15], center=true);\n    }\n}\n\n// Render the model\ntypewriter_body();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "nut",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 20,
      "code": "// Realistic Medium-Complexity Medium-Sized Tool - Hand Drill\n// Designed for 3D printing with no overhangs, 2mm wall thickness, 100mm length\n\n$fn = 32;               // Smooth curves for 3D printing\n\nmodule main_handle() {\n    // Main handle shaft\n    cylinder(h = 80, r1 = 12, r2 = 10);\n    // Grip rings\n    for(i = [0:2]) {\n        translate([0, 0, i * 20]) {\n            cylinder(h = 4, r = 10);\n        }\n    }\n    // End cap\n    translate([0, 0, -50]) {\n        cylinder(h = 10, r1 = 12, r2 = 10);\n    }\n}\n\nmodule drill_head() {\n    // Drill shaft\n    cylinder(h = 35, r = 5);\n    // Drill bit\n    translate([0, 0, 35]) {\n        cylinder(h = 20, r1 = 4, r2 = 2);\n    }\n    // Chuck\n    translate([0, 0, 35]) {\n        cylinder(h = 10, r = 3);\n    }\n}\n\nmodule blade() {\n    // Curved blade\n    rotate([0, 90, 0]) {\n        translate([0, 0, -10]) {\n            linear_extrude(height = 5)\n                polygon(points = [\n                    [0, 0],\n                    [0, 2],\n                    [0, 5],\n                    [0, 10],\n                    [0, 10],\n                    [0, 20],\n                    [0, 20],\n                    [0, 5],\n                    [0, -10],\n                    [0, -20]\n                ]);\n        \n        // Blade tip\n        translate([0, 0, -15]) {\n            scale([1, 1, 0.5]) {\n                rotate([0, 0, 90]) {\n                    linear_extrude(height = 2)\n                        polygon(points = [\n                            [0, 0],\n                            [0, 3],\n                            [0, 6],\n                            [0, 10],\n                            [0, 10],\n                            [0, 12],\n                            [0, 12],\n                            [0, 6],\n                            [0, 0]\n                        ]);\n                }\n            }\n        }\n    }\n}\n\nmodule base() {\n    // Base plate\n    cube([20, 20, 2], center = true);\n    // Screw holes\n    for(i = [0:2]) {\n        translate([0, 0, i * 10]) {\n            cylinder(h = 3, r = 2);\n        }\n    }\n}\n\nmodule grip() {\n    // Grip texture on handle\n    translate([0, 0, 80]) {\n        cylinder(h = 2, r = 10);\n    }\n}\n\n// Assembly\nunion() {\n    // Main handle\n    main_handle();\n    \n    // Drill head\n    drill_head();\n    \n    // Blade\n    translate([0, 0, 35]) {\n        rotate([0, 90, 0]) {\n            blade();\n        }\n    }\n    \n    // Base\n    base();\n    \n    // Grip\n    grip();\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: ERROR: Parser error: syntax error in file evaluation/ThomasTheMaker_k-1b_20251029_161318/nut.scad, line 114\nCan't parse file 'evaluation/ThomasTheMaker_k-1b_20251029_161318/nut.scad'!\n\n",
      "vlm_response": null
    },
    {
      "object": "spring",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 92,
      "code": "// Realistic Medium-Complexity 3D-Printable Tool\n// A traditional pocket knife with blade, handle, and blade-guard\n\n// Blade parameters\nblade_length = 150; blade_width = 12; blade_thickness = 3;\nhandle_length = 80; handle_diameter = 10; handle_width = 15;\nguard_length = 40; guard_thickness = 2;\n\n// Handle parameters\nhandle_height = 20; handle_diameter = 8;\n\n// Blade details\nguard_height = 25; blade_width_cut = 4; blade_width_block = 3;\nguard_depth = 1;\nguard_width = 1;\n\n// Assembly\nunion() {\n    // Handle\n    translate([0, 0, handle_height/2])\n        handle_part();\n    \n    // Blade assembly\n    translate([0, 0, blade_height/2])\n        blade_assembly();\n    \n    // Guard\n    translate([0, 0, blade_height + guard_height/2])\n        guard_part();\n}\n\n// Handle with grip pattern\nmodule handle_part() {\n    difference() {\n        // Main handle cylinder\n        cylinder(h=handle_height, d1=handle_diameter, d2=handle_diameter);\n        \n        // Grip texture\n        for(i = [0:3]) {\n            translate([0, 0, i*handle_width/4])\n                rotate([90, 0, 0])\n                    scale([1, 1.2, 0.5])\n                        cube([handle_diameter, handle_width, handle_height*0.3]);\n        }\n    }\n}\n\n// Guard part with blade-guard\nmodule guard_part() {\n    difference() {\n        // Guard body\n        cylinder(h=guard_height, d=guard_width);\n        \n        // Blade-guard cut-out\n        translate([0, 0, guard_height/2])\n            cube([guard_width*0.7, guard_width*0.3, guard_depth*2]);\n    }\n}\n\n// Blade assembly\nmodule blade_assembly() {\n    union() {\n        // Blade\n        translate([0, 0, blade_height/2 + guard_height/2 - 1])\n            cube([blade_width_block, blade_width_block, blade_thickness*2]);\n        \n        // Blade-guard\n        translate([0, 0, blade_height/2 + guard_height/2 - 1])\n            guard_part();\n    }\n}\n\n// Handle\nmodule handle_part() {\n    union() {\n        // Main handle cylinder\n        cylinder(h=handle_length, d1=handle_diameter, d2=handle_diameter);\n        \n        // Grip grooves\n        for(i = [0:2]) {\n            translate([0, 0, i*handle_width/3 + 5])\n                cube([handle_diameter*0.3, 1, handle_height*0.2]);\n        }\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "pulley",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 35,
      "code": "// Realistic Medium-Complexity T-1000 Drone Toy \u2013 OpenSCAD Code\n\n// Overall dimensions: ~80mm tall, ~45mm wide, ~35mm deep\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body module\nmodule t1000_body() {\n    difference() {\n        // Main chassis block\n        cube([35, 30, 20], center=true);\n        \n        // Engine intake hole\n        translate([5, 15, 5])\n            cylinder(h=8, r1=3, r2=1.5);\n        \n        // Antenna ports\n        translate([2, 15, -5])\n            cylinder(h=10, r1=1.5, r2=1.5);\n        translate([-2, 15, -5])\n            cylinder(h=10, r1=1.5, r2=1.5);\n    }\n}\n\n// Engine module\nmodule engine() {\n    difference() {\n        // Engine cylinder\n        cylinder(h=15, r1=3, r2=2);\n        \n        // Cooling vents\n        translate([0, 0, -10])\n            cylinder(h=5, r1=3.5, r2=1.5);\n        translate([0, 0, -15])\n            cylinder(h=5, r1=3.5, r2=1.5);\n    }\n}\n\n// Main propellers\nmodule propellers() {\n    // Forward\n    translate([-15, 0, 0])\n        cylinder(h=10, r1=2.5, r2=1.5);\n    \n    // Rear\n    translate([15, 0, 0])\n        cylinder(h=10, r1=2.5, r2=1.5);\n}\n\n// Stabilizer\nmodule stabilizer() {\n    difference() {\n        cylinder(h=15, r1=2, r2=2);\n        translate([0, 0, -15])\n            cylinder(h=10, r1=2.5, r2=1.5);\n    }\n}\n\n// Fuel tank\nmodule fuel_tank() {\n    difference() {\n        cylinder(h=10, r1=3, r2=2);\n        translate([0, 0, 10])\n            cylinder(h=12, r1=2.5, r2=1.5);\n    }\n}\n\n// Landing gear\nmodule landing_gear() {\n    // Left\n    translate([-20, 0, 0])\n        cylinder(h=8, r1=2.5, r2=1.5);\n    \n    // Right\n    translate([20, 0, 0])\n        cylinder(h=8, r1=2.5, r2=1.5);\n}\n\n// Wing assembly\nmodule wing() {\n    difference() {\n        // Main wing\n        cylinder(h=25, r1=2, r2=1.5);\n        \n        // Wingtip reinforcement\n        translate([0, 0, 25])\n            cylinder(h=1, r1=2.5, r2=1.5);\n    }\n}\n\n// Main assembly\nmodule t1000_drone() {\n    union() {\n        // Main body\n        translate([0, 0, 0])\n            t1000_body();\n        \n        // Engine\n        translate([0, 0, 0])\n            engine();\n        \n        // Propellers\n        propellers();\n        \n        // Stabilizer\n        stabilizer();\n        \n        // Landing gear\n        landing_gear();\n        \n        // Wing\n        wing();\n    }\n}\n\n// Display\nmodule display() {\n    difference() {\n        cube([4, 2, 1], center=true);\n        translate([0, 0, 2])\n            cube([3, 1, 0.5], center=true);\n    }\n}\n\n// Battery compartment\nmodule battery() {\n    difference() {\n        cylinder(h=3, r1=2.5, r2=2);\n        translate([0, 0, -1])\n            cylinder(h=5, r1=2.5, r2=2.5);\n    }\n}\n\n// Control stick\nmodule control_stick() {\n    difference() {\n        cylinder(h=8, r1=2.5, r2=2);\n        translate([0, 0, 8])\n            cylinder(h=3, r1=2.5, r2=2.5);\n    }\n}\n\n// Camera\nmodule camera() {\n    difference() {\n        cylinder(h=5, r1=2.5, r2=2);\n        translate([0, 0, 2])\n            cylinder(h=3, r1=2.5, r2=2.5);\n    }\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: Geometries in cache: 1\nGeometry cache size in bytes: 0\nCGAL Polyhedrons in cache: 0\nCGAL cache size in bytes: 0\nTotal rendering time: 0:00:00.000\nCurrent top level object is empty.\n",
      "vlm_response": null
    },
    {
      "object": "axle",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 5,
      "code": "// Axle module with realistic proportions and 3D-print-friendly features\n// Designed for 3D-printing without excessive supports\n\n// Overall dimensions: 120 mm length, 30 mm diameter, 8 mm wall thickness\n\nmodule axle() {\n    // Main shaft\n    cylinder(h = 80, d = 25, center = true);\n\n    // Axle bore\n    cylinder(h = 60, d = 22, center = true);\n\n    // Bearing collar\n    cylinder(h = 25, d = 28, center = true);\n\n    // Grip rings on sides\n    difference() {\n        cylinder(h = 3, d = 24, center = true);\n        cylinder(h = 4, d = 22, center = true);\n    }\n\n    // Pivot pin\n    cylinder(h = 40, d = 8, center = true);\n\n    // Connection holes\n    for (i = [0:3]) {\n        rotate([0, 0, i * 90]) {\n            translate([12, 0, 0]) {\n                cylinder(h = 2, d = 4, center = true);\n            }\n        }\n    }\n\n    // Bottom grip collar\n    difference() {\n        cylinder(h = 20, d = 24, center = true);\n        cylinder(h = 22, d = 22, center = true);\n    }\n}\n\n// Main assembly\ntranslate([0, 0, 0]) {\n    axle();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "screw",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 53,
      "code": "// Realistic 3D-printable X-ray machine - medium complexity\n\n// Overall dimensions: ~80 mm length, ~60 mm width, ~40 mm height\n\nmodule xray_body() {\n    // Main body shell\n    difference() {\n        scale([1.2, 1.1, 0.9]) sphere(d=40, $fn=50);\n        \n        // Front cavity\n        translate([0, 0, 5]) cube([25, 25, 20], center=true);\n        \n        // Top opening\n        translate([0, 0, 20]) cube([25, 25, 15], center=true);\n    }\n}\n\nmodule xray_head() {\n    // Head housing\n    difference() {\n        scale([1.3, 1.2, 0.8]) sphere(d=30, $fn=50);\n        \n        // Front cavity\n        translate([0, 0, 10]) cube([20, 20, 20], center=true);\n        \n        // Top opening\n        translate([0, 0, 25]) cube([20, 20, 15], center=true);\n    }\n    \n    // Lens assembly\n    translate([0, 0, 20]) cube([20, 20, 5], center=true);\n}\n\nmodule xray_window() {\n    // Window opening\n    difference() {\n        translate([0, 0, 15]) cube([28, 28, 5], center=true);\n        \n        // Window window\n        translate([0, 0, 20]) cube([28, 28, 2], center=true);\n    }\n    \n    // Window shade\n    translate([0, 0, 25]) cube([28, 28, 1], center=true);\n}\n\nmodule xray_beam() {\n    // X-ray tube\n    difference() {\n        scale([0.8, 0.7, 0.6]) sphere(d=8, $fn=60);\n        \n        // Tube entrance\n        translate([0, 0, 0]) cube([3, 3, 15], center=true);\n        \n        // Tube exit\n        translate([0, 0, -15]) cube([3, 3, 30], center=true);\n    }\n    \n    // X-ray tube housing\n    difference() {\n        scale([0.95, 0.85, 0.75]) sphere(d=10, $fn=60);\n        \n        // Tube entrance\n        translate([0, 0, 0]) cube([3, 3, 15], center=true);\n        \n        // Tube exit\n        translate([0, 0, -15]) cube([3, 3, 30], center=true);\n    }\n}\n\nmodule xray_collar() {\n    // Connector plate\n    difference() {\n        cube([20, 20, 3], center=true);\n        \n        // Connector slot\n        translate([0, 0, 0]) cube([20, 20, 3], center=true);\n    }\n    \n    // Mount plate\n    difference() {\n        cube([25, 25, 4], center=true);\n        \n        // Mounting hole\n        translate([0, 0, 0]) cylinder(h=2, d=8, center=true);\n    }\n}\n\nmodule xray_stand() {\n    // Base stand\n    difference() {\n        cube([10, 10, 8], center=true);\n        \n        // Base mounting hole\n        translate([0, 0, -2]) cylinder(h=2, d=6, center=true);\n        \n        // Side mounting holes\n        for(x = [-3, 3]) {\n            translate([x, 0, -4]) cube([2, 2, 2], center=true);\n        }\n    }\n    \n    // Support legs\n    translate([0, 0, -12]) cube([10, 10, 1], center=true);\n    translate([0, 0, 12]) cube([10, 10, 1], center=true);\n}\n\nmodule xray_feet() {\n    // Foot pads\n    for(x = [-3, 3]) {\n        for(y = [-3, 3]) {\n            translate([x, y, -2]) cube([2, 2, 2], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    xray_body();\n    xray_head();\n    xray_window();\n    xray_beam();\n    xray_collar();\n    xray_stand();\n    xray_feet();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "shaft",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 69,
      "code": "// Realistic medium-complexity model of a 3D-printable printer\n// Designed for 3D printing with minimal overhangs, 2mm walls,\n// and no supports needed - all overhangs \u2264 45\u00b0 and walls \u2265 2mm\n\n$fn = 32;  // Smooth curves for printing\n\n// Main body\nmodule printer_body() {\n    difference() {\n        // Main box\n        cube([60, 40, 35], center=true);\n        \n        // Hollow interior\n        translate([0, 0, -2])\n            cube([56, 36, 31], center=true);\n    }\n}\n\n// LCD screen\nmodule lcd_screen() {\n    difference() {\n        cube([25, 20, 1.5], center=true);\n        translate([0, -1, 0.5])\n            cube([20, 18, 1.2], center=true);\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    difference() {\n        cube([20, 25, 4], center=true);\n        translate([0, 0, 0.5])\n            cube([18, 21, 2], center=true);\n    }\n}\n\n// Power button\nmodule power_button() {\n    difference() {\n        cylinder(h=1, d=3, center=true);\n        translate([0, 0, -1])\n            cylinder(h=2, d=2.5, center=true);\n    }\n}\n\n// USB port\nmodule usb_port() {\n    difference() {\n        cylinder(h=0.5, d=4.5, center=true);\n        translate([0, 0, -0.5])\n            cylinder(h=0.5, d=4.2, center=true);\n    }\n}\n\n// Network ports\nmodule network_ports() {\n    // Ethernet port\n    translate([0, -15, -10])\n        cylinder(h=0.5, d=4.5, center=true);\n    \n    // Wi-Fi port\n    translate([0, 15, -10])\n        cylinder(h=0.5, d=4.5, center=true);\n}\n\n// Status LED\nmodule status_led() {\n    difference() {\n        cylinder(h=0.5, d=3.5, center=true);\n        translate([0, 0, 0.5])\n            cylinder(h=0.5, d=2.5, center=true);\n    }\n}\n\n// Fan grille\nmodule fan_grille() {\n    difference() {\n        cube([20, 20, 5], center=true);\n        translate([0, 0, 2.5])\n            cube([18, 18, 3], center=true);\n    }\n}\n\n// Display window\nmodule display() {\n    difference() {\n        cube([16, 14, 1.5], center=true);\n        translate([0, 0, -0.5])\n            cube([12, 12, 1.2], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    color(\"black\") printer_body();\n    color(\"black\") lcd_screen();\n    color(\"black\") control_panel();\n    color(\"black\") power_button();\n    color(\"black\") usb_port();\n    color(\"black\") network_ports();\n    color(\"black\") status_led();\n    color(\"black\") fan_grille();\n    color(\"gray\") display();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "wheel",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 58,
      "code": "// Realistic 3D-printable T-shirt with button and pocket details\n// Overall height ~120 mm, ~3 mm wall thickness\n\n// Colors\n$fn = 32;\n\nmodule shirt_body() {\n    // Main body - T-shaped panel\n    difference() {\n        // Outer shell\n        hull() {\n            cylinder(h = 20, r1 = 25, r2 = 25, center = false);\n            translate([0, 0, 20]) cylinder(h = 20, r1 = 25, r2 = 25, center = false);\n        }\n        \n        // Button detail on front\n        translate([0, 0, 10]) {\n            difference() {\n                cylinder(h = 8, r = 6, center = false);\n                cylinder(h = 10, r = 4, center = false);\n            }\n            \n            // Button button\n            translate([0, 0, 5]) {\n                cylinder(h = 2, r = 3, center = false);\n            }\n        }\n        \n        // Bottom cuff\n        translate([0, 0, -10]) {\n            cylinder(h = 15, r = 25, center = false);\n        }\n        \n        // Pocket on left side\n        translate([-8, -10, -5]) {\n            difference() {\n                cylinder(h = 12, r1 = 15, r2 = 10, center = false);\n                translate([0, 0, 0]) cylinder(h = 8, r = 6, center = false);\n            }\n        }\n    }\n}\n\nmodule neck_detail() {\n    // Neck band with fabric texture\n    difference() {\n        hull() {\n            cylinder(h = 5, r = 35, center = false);\n            translate([0, 0, 5]) cylinder(h = 5, r = 35, center = false);\n        }\n        \n        // Fabric texture lines\n        for (i = [0:1:12]) {\n            translate([0, 0, 5 + i * 3]) {\n                cylinder(h = 0.3, r = 28.5, center = false);\n            }\n        }\n        \n        // Neck button\n        translate([0, 0, 5]) {\n            difference() {\n                cylinder(h = 2, r = 4, center = false);\n                cylinder(h = 10, r = 3, center = false);\n            }\n            \n            // Button\n            translate([0, 0, 2]) {\n                cylinder(h = 2, r = 3, center = false);\n            }\n        }\n    }\n}\n\nmodule pocket_detail() {\n    // Pocket on right side\n    difference() {\n        cylinder(h = 12, r = 15, center = false);\n        translate([0, 0, 12]) cylinder(h = 6, r = 6, center = false);\n    }\n}\n\nmodule buttons() {\n    // Two buttons on top\n    translate([-5, -5, 30]) {\n        difference() {\n            cylinder(h = 2, r = 4, center = false);\n            cylinder(h = 1, r = 3, center = false);\n        }\n        \n        // Button\n        translate([0, 0, 2]) {\n            difference() {\n                cylinder(h = 2, r = 3, center = false);\n                cylinder(h = 1, r = 3, center = false);\n            }\n            \n            // Button button\n            translate([0, 0, 5]) {\n                cylinder(h = 2, r = 3, center = false);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Main body\n    shirt_body();\n    \n    // Neck detail\n    neck_detail();\n    \n    // Bottom cuff\n    translate([0, 0, -10]) {\n        cylinder(h = 10, r = 25, center = false);\n    }\n    \n    // Pocket detail\n    translate([-8, -10, -5]) {\n        pocket_detail();\n    }\n    \n    // Buttons\n    buttons();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "pipe",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 29,
      "code": "// Realistic 3D-printable wooden toy box \u2013 medium complexity\n// Approx 70 mm length x 45 mm width x 40 mm height\n\n// Base dimensions\nbase_length = 70;\nbase_width = 45;\nbase_height = 40;\n\n// Side panel thickness\npanel_thickness = 2;\n\n// Top cover thickness\ncover_thickness = 3;\n\n// Wall thickness\nwall_thickness = 2;\n\n// Decorative top panel\nmodule top_panel() {\n    difference() {\n        // Main top surface\n        translate([0, 0, base_height/2 + cover_thickness/2])\n            cube([base_length - 20, base_width - 20, cover_thickness], center=true);\n        \n        // Rounded top edges\n        translate([0, 0, base_height/2 + cover_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h=cover_thickness, r=10, center=true);\n        translate([0, 0, base_height/2 + cover_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h=cover_thickness, r=10, center=true);\n    }\n}\n\n// Side panel with support\nmodule side_panel() {\n    difference() {\n        // Main side panel\n        translate([0, 0, base_height/2 - panel_thickness - cover_thickness - wall_thickness/2])\n            cube([base_length - 20, base_width - 20, panel_thickness], center=true);\n        \n        // Front/back supports\n        for (x = [-1, 1]) {\n            translate([x * (base_length - 20) / 3, 0, base_height/2 - panel_thickness - cover_thickness - wall_thickness/2])\n                cube([base_length - 20, base_width - 20, panel_thickness * 2]);\n        }\n    }\n}\n\n// Front panel with handles\nmodule front_panel() {\n    difference() {\n        // Main front panel\n        translate([0, 0, base_height/2 - cover_thickness - wall_thickness/2])\n            cube([base_length - 20, base_width - 20, panel_thickness * 2], center=true);\n        \n        // Handle positions\n        translate([base_length - 20, 0, base_height/2 - cover_thickness - wall_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h=15, r=2, center=true);\n        translate([0, base_width - 20, base_height/2 - cover_thickness - wall_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h=15, r=2, center=true);\n    }\n}\n\n// Base with drainage holes\nmodule base() {\n    difference() {\n        // Main base\n        translate([0, 0, -base_height/2 - cover_thickness/2])\n            cube([base_length - 20, base_width - 20, base_height], center=true);\n        \n        // Drainage holes\n        for (x = [-1, 1]) {\n            for (y = [-1, 1]) {\n                translate([x * (base_length - 20) / 3, y * (base_width - 20) / 3, base_height/2 - cover_thickness - wall_thickness/2])\n                    cylinder(h=wall_thickness, r=2, center=true);\n            }\n        }\n    }\n}\n\n// Decorative molding around top\nmodule molding() {\n    difference() {\n        // Main molding piece\n        translate([0, 0, base_height/2 + cover_thickness + cover_thickness/2])\n            cube([base_length - 20, base_width - 20, panel_thickness], center=true);\n        \n        // Top edge detail\n        translate([0, 0, base_height/2 + cover_thickness + cover_thickness/2])\n            cube([base_length - 20, base_width - 20, panel_thickness], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main box\n    translate([0, 0, 0])\n        top_panel();\n    translate([0, 0, 0])\n        side_panel();\n    translate([0, 0, 0])\n        front_panel();\n    translate([0, 0, 0])\n        base();\n    translate([0, 0, 0])\n        molding();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "tube",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 27,
      "code": "// OpenSCAD script for a realistic-style coffee cup with cup holder\n// Medium complexity, printable in 2 mm walls with no supports\n\n$fn = 30;  // Smooth curves\n\n// Wall thickness for 2 mm walls\nwall = 2;\n\n// Main cup body\nmodule cup_body() {\n    difference() {\n        // Outer cup shape\n        cylinder(h = 40, r1 = 25, r2 = 20, center = false);\n        // Cup opening\n        translate([0, 0, wall * 2])\n            cylinder(h = 25, r1 = 20, r2 = 15, center = false);\n    }\n}\n\n// Handle with ergonomic grip\nmodule cup_handle() {\n    difference() {\n        // Handle base\n        translate([0, 0, -10])\n            cylinder(h = 15, r1 = 12, r2 = 10, center = false);\n        // Grip ridges\n        for (i = [0:5]) {\n            translate([0, 0, -10 - i * 3])\n                cylinder(h = 2, r = 5, center = false);\n        }\n    }\n}\n\n// Cup holder base\nmodule cup_holder() {\n    difference() {\n        // Cup holder base\n        cylinder(h = 10, r1 = 25, r2 = 20, center = false);\n        // Cup holder walls\n        translate([0, 0, wall * 2])\n            cylinder(h = 40, r1 = 20, r2 = 16, center = false);\n    }\n}\n\n// Coffee spout\nmodule cup_spout() {\n    difference() {\n        // Spout cone\n        cylinder(h = 10, r1 = 8, r2 = 6, center = false);\n        // Base ring\n        translate([0, 0, wall * 2])\n            cylinder(h = 2, r1 = 8, r2 = 5, center = false);\n    }\n}\n\n// Cup holder ring\nmodule cup_holder_ring() {\n    difference() {\n        cylinder(h = 20, r1 = 25, r2 = 20, center = false);\n        translate([0, 0, wall * 2])\n            cylinder(h = 40, r1 = 20, r2 = 16, center = false);\n    }\n}\n\n// Assembly\nunion() {\n    // Main cup body\n    cup_body();\n    \n    // Handle\n    translate([0, 0, 40])\n        cup_handle();\n    \n    // Cup holder\n    translate([0, 0, -10])\n        cup_holder();\n    \n    // Cup holder ring\n    translate([0, 0, -40])\n        cup_holder_ring();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "profile",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 87,
      "code": "// Realistic medium-complexity 3D-printable model of a 1960s-style lawnmower\n// Designed for FDM printing with no overhangs >45\u00b0, 0.4mm wall thickness, ~70mm long\n// Main body ~85mm long, ~45mm wide, ~35mm high\n\n$fn = 32;          // Good for smooth curves without excessive circles\nwall = 1.2;        // 0.4mm wall thickness\n\n// Overall dimensions\nlength = 70;\nwidth = 45;\nheight = 35;\n\n// Main chassis module\nmodule chassis() {\n    difference() {\n        hull() {\n            // Tapered rectangular box\n            translate([0, 0, height/2])\n                cube([length, width, height], center=true);\n            // Engine cover cutout\n            translate([length/2 - 2, 0, height/2 - 1])\n                cube([2, width + 2, 4], center=true);\n            // Seat cutout\n            translate([length/2 - 2, 0, height/2 - 1])\n                cube([2, width + 2, 2], center=true);\n        }\n        // Cable management slots\n        for (i = [0:3]) {\n            translate([length/2 - 2 - i * 8, width/2 - 1, height/2 - 2])\n                cube([8, width + 2, 2], center=true);\n        }\n    }\n}\n\n// Engine module\nmodule engine() {\n    difference() {\n        // Cylindrical engine block\n        translate([length/2 - 4, 0, height/2 - 5])\n            cylinder(h=12, r=20, center=true);\n        // Gas tank hole\n        translate([-length/2 - 5, 0, height/2 - 5])\n            cylinder(h=3, r=12, center=true);\n        // Front intake tube\n        translate([-length/2 - 2, 0, height/2 - 6])\n            cylinder(h=8, r=3, center=true);\n    }\n}\n\n// Wheels module\nmodule wheels() {\n    // Front wheel\n    difference() {\n        cylinder(h=12, r=8, center=true);\n        translate([length/2 - 8, 0, 0])\n            cylinder(h=8, r=4, center=true);\n    }\n    // Rear wheel\n    difference() {\n        cylinder(h=12, r=8, center=true);\n        translate([length/2 - 8, 0, 0])\n            cylinder(h=8, r=4, center=true);\n    }\n}\n\n// Deck module\nmodule deck() {\n    difference() {\n        // Main deck\n        translate([0, 0, height/2 - 10])\n            cube([length * 0.8, width * 0.6, height * 0.6], center=true);\n        // Main blade support\n        translate([length/2 - 15, 0, height/2 - 5])\n            cube([2, width * 0.6, 6], center=true);\n        // Blade attachment points\n        for (i = [0:3]) {\n            translate([length/2 - 10 - i * 10, 0, height/2 - 2])\n                cube([2, width * 0.5, 2], center=true);\n        }\n        // Stabilizer legs\n        translate([length/2 - 2, 0, height/2 - 2])\n            cube([4, width * 0.4, 8], center=true);\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    difference() {\n        // Panel base\n        translate([length/2 - 5, width/2 - 1, height/2 - 5])\n            cube([10, 3, 3], center=true);\n        // Gauge display\n        translate([length/2 - 8, width/2 - 2, height/2 - 7])\n            cylinder(h=1, r=2, center=true);\n        // Speed dial\n        translate([length/2 - 5, width/2 - 3, height/2 - 10])\n            cylinder(h=2, r=2, center=true);\n    }\n}\n\n// Assembly\nmodule lawnmower() {\n    union() {\n        // Main chassis\n        chassis();\n        \n        // Engine\n        translate([length/2 - 4, 0, 0])\n            engine();\n        \n        // Wheels\n        translate([length/2 - 8, 0, 0])\n            rotate([0, 15, 0])\n                wheels();\n        \n        // Deck assembly\n        translate([0, 0, height/2 - 10])\n            deck();\n        \n        // Control panel\n        translate([length/2 - 10, width/2 - 1, height/2 - 5])\n            control_panel();\n    }\n}\n\nlawnmower();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "T-beam",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 91,
      "code": "// Realistic medium-complexity T-beam (approx. 100 mm long, 25 mm wide, 30 mm high)\n// Designed for 3D printing with 2 mm wall thickness and no steep overhangs.\n\n// Overall dimensions\nlength = 100;\nwidth = 25;\nheight = 30;\nwall = 2;              // 2 mm wall thickness\nslot_width = 5;          // 5 mm slot width\nslot_depth = 2;          // 2 mm slot depth\nbolt_hole_diameter = 3; // 3 mm bolt diameter\nbolt_hole_spacing = 8;   // 8 mm bolt spacing\ncounter_bore = 6;        // counterbore for thread\n\n// Main T-beam body\ndifference() {\n    cube([length, width, height], center = true);\n    translate([0, 0, 0])\n        cube([length - 2*wall, width - 2*wall, height - 2*wall], center = true);\n}\n\n// Tapered end block\ndifference() {\n    cylinder(h = height - 2*wall, r = length/2, $fn = 32);\n    translate([0, 0, -wall/2])\n        cylinder(h = height - 2*wall, r = length/2 - 2*wall/2, $fn = 32);\n}\n\n// Bolt holes (4 bolts)\nfor (x = [-length/2 + slot_width/2, length/2 - slot_width/2]) {\n    translate([x, 0, 0])\n        rotate([90, 0, 0])\n            cylinder(h = slot_depth, r = bolt_hole_diameter/2, $fn = 20);\n}\n\n// Counterbore for thread (bolt hole)\ndifference() {\n    cylinder(h = counter_bore, r = length/2 - 10, $fn = 32);\n    translate([0, 0, -counter_bore/2])\n        cylinder(h = counter_bore, r = length/2 - 10, $fn = 32);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "angle iron",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 7,
      "code": "// Angle Iron Tool - Realistic Medium Complexity\n// Designed for 3D printing with 2mm wall thickness and no steep overhangs\n\n// Overall scale factor for easy scaling\nscale_factor = 0.8;\n\n// Main parameters\nlength = 80;            // Total length of the tool\nwidth = 20;              // Width of the tool\nheight = 12;             // Height of the tool\nwall_thickness = 2;    // Thickness of the tool\nhead_diameter = 12;    // Diameter of the triangular head\nhead_height = 8;         // Height of the triangular head\nbase_diameter = 8;      // Diameter of the base\nbase_height = 4;         // Height of the base\nchamfer_radius = 2;      // Rounded edges for realism\n\n// Module for triangular head\nmodule triangular_head() {\n    difference() {\n        // Main triangular shape\n        linear_extrude(height = height, scale = [1, 1])\n            polygon(points=[\n                [0, 0],\n                [length, 0],\n                [length * 0.3, width * 0.3],\n                [length * 0.75, height * 0.3],\n                [length * 0.95, 0],\n                [0, 0]\n            ]);\n        \n        // Chamfered edges\n        translate([0, 0, -height/2])\n            linear_extrude(height = height, scale = [1, 1])\n                polygon(points=[\n                    [0, 0],\n                    [length * 0.3, 0],\n                    [length * 0.75, width * 0.3],\n                    [length * 0.95, height * 0.3],\n                    [length * 0.95, 0],\n                    [0, 0]\n                ]);\n    }\n}\n\n// Module for base with mounting holes\nmodule base_with_holes() {\n    difference() {\n        // Main base block\n        translate([0, 0, -height/2])\n            cube([base_diameter * 2, base_diameter * 2, base_height * 2], center = true);\n        \n        // Mounting holes\n        for (x = [-base_diameter/2 - 2, base_diameter/2 + 2]) {\n            for (y = [-base_diameter/2 - 2, base_diameter/2 + 2]) {\n                translate([x, y, -height/2 + base_height/2])\n                    cylinder(d = 4, h = 1.5, $fn = 16);\n            }\n        }\n    }\n}\n\n// Module for grip rings\nmodule grip_rings() {\n    difference() {\n        // Main ring\n        translate([0, 0, 0])\n            cylinder(h = height * 0.8, d = base_diameter, center = true);\n        \n        // Grip holes\n        for (z = [height * 0.1, height * 0.2, height * 0.3, height * 0.4]) {\n            translate([0, 0, z])\n                cylinder(h = 1.5, d = 2.5, center = true);\n        }\n    }\n}\n\n// Module for corner reinforcements\nmodule corner_reinforcements() {\n    for (x = [-1, 1], y = [-1, 1]) {\n        translate([x * base_diameter/2, y * base_diameter/2, 0])\n            cube([wall_thickness * 2, wall_thickness * 2, height * 1.5], center = true);\n    }\n}\n\n// Assemble the tool\nunion() {\n    // Main triangular head\n    translate([0, 0, height/2])\n        triangular_head();\n    \n    // Base with mounting holes\n    base_with_holes();\n    \n    // Grip rings around the base\n    grip_rings();\n    \n    // Corner reinforcements\n    corner_reinforcements();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "I-beam",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 77,
      "code": "// OpenSCAD Code for a realistic medium-complexity I-beam with 3D-printable walls and rounded top\n\nmodule beam_body(h=40, w=40, d=25, t=4) {\n    linear_extrude(height=h, scale=0.6)\n    offset(-0.1)\n    square([w, d], center=true);\n}\n\nmodule rounded_top(d=30, h=20, r=25) {\n    difference() {\n        cube([d, d, h], center=true);\n        translate([0, 0, h/2 - r/2])\n            sphere(r);\n    }\n}\n\nmodule flange_detail() {\n    difference() {\n        translate([0, 0, h/2 - 2])\n            cube([w*1.5, d*1.5, 4], center=true);\n        translate([0, 0, h/2 - 4])\n            cube([w*1.1, d*1.1, 1.5], center=true);\n        translate([0, 0, h/2 - 6])\n            cube([w*1.3, d*1.3, 2], center=true);\n    }\n}\n\nmodule cross_cut() {\n    difference() {\n        linear_extrude(height=1, convexity=1)\n            offset(-0.1)\n            square([w, d], center=true);\n        translate([0, 0, h/2 - 2])\n            cube([w, d], center=true);\n        translate([0, 0, h/2 - 4])\n            cube([w, d], center=true);\n    }\n}\n\nmodule joint_boss() {\n    difference() {\n        translate([0, 0, h/2 - 1])\n            cylinder(h=1, d1=w/2, d2=w/2, center=true);\n        translate([0, 0, h/2 - 2])\n            cylinder(h=1, d1=w/2, d2=w/2, center=true);\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        translate([0, 0, 0])\n            beam_body();\n        translate([0, 0, 0])\n            rounded_top();\n        translate([0, 0, -h/2])\n            flange_detail();\n        translate([0, 0, 0])\n            joint_boss();\n        translate([0, 0, 0])\n            cross_cut();\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "box without lid",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 26,
      "code": "// Realistic Wooden Table - Medium Complexity\n// Dimensions: 100mm x 60mm x 45mm\n\n// Overall dimensions\ntable_length = 100;\ntable_width = 60;\ntable_height = 45;\nwall_thickness = 2;\n\n// Main table top\nmodule table_top() {\n    difference() {\n        // Solid top\n        cube([table_length, table_width, table_height], center=true);\n        \n        // Lightening grooves\n        for (y = [-20:10:20]) {\n            for (x = [-30:10:30]) {\n                translate([x, y, -0.1]) {\n                    cube([1, 1, 1], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Table legs\nmodule table_legs() {\n    // Front left leg\n    translate([-table_length/2 - 5, 0, -table_height/2 - 5]) {\n        cylinder(h=10, r1=2, r2=2);\n    }\n    \n    // Front right leg\n    translate([table_length/2 + 5, 0, -table_height/2 - 5]) {\n        cylinder(h=10, r1=2, r2=2);\n    }\n    \n    // Back left leg\n    translate([-table_length/2 - 5, 0, -table_height/2 - 5]) {\n        cylinder(h=10, r1=2, r2=2);\n    }\n    \n    // Back right leg\n    translate([table_length/2 + 5, 0, -table_height/2 - 5]) {\n        cylinder(h=10, r1=2, r2=2);\n    }\n}\n\n// Table support brackets\nmodule support_brackets() {\n    // Front support brace\n    translate([-table_length/4, 0, 0]) {\n        cube([8, table_width - 8, 10], center=true);\n    }\n    \n    // Back support brace\n    translate([table_length/4, 0, 0]) {\n        cube([8, table_width - 8, 10], center=true);\n    }\n}\n\n// Table frame\nmodule table_frame() {\n    difference() {\n        // Bottom frame\n        cube([table_length + 4, table_width + 4, table_height + 2], center=true);\n        \n        // Top frame\n        cube([table_length + 4, table_width + 4, table_height + 2], center=true);\n        \n        // Internal cavity\n        cube([table_length - 4, table_width - 4, table_height - 2], center=true);\n    }\n}\n\n// Decorative edge detail\nmodule decorative_edge() {\n    difference() {\n        // Main edge\n        translate([0, -table_width/2 + 2, table_height/2 - 4]) {\n            cube([table_length + 6, table_width + 6, 4], center=true);\n        }\n        \n        // Recess for wood grain\n        translate([0, -table_width/2 + 2, table_height/2 - 2]) {\n            cube([table_length + 8, table_width + 8, 4], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Table components\n    table_top();\n    table_legs();\n    support_brackets();\n    table_frame();\n    decorative_edge();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "L-profile",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 42,
      "code": "// Realistic Medium-Complexity Model - 3D-Printable \"Slink\" Desk\n// Overall dimensions: 120mm x 60mm x 60mm (x-y-z)\n\n// Parameters\nwall_thickness = 2;\nslight_offset = 0.1;\nscale_factor = 1;\n\n// Main body with rounded edges\nmodule desk_body() {\n    difference() {\n        // Main desk top\n        cube([120, 60, 60], center=true);\n        \n        // Rounded top edges\n        translate([0, 0, 15])\n            scale([1, 1, 0.2])\n            sphere(15, $fn=6);\n        translate([0, -30, 15])\n            scale([1, 1, 0.2])\n            sphere(15, $fn=6);\n        translate([0, 30, 15])\n            scale([1, 1, 0.2])\n            sphere(15, $fn=6);\n        translate([0, 0, -15])\n            scale([1, 1, 0.2])\n            sphere(15, $fn=6);\n        translate([0, 30, -15])\n            scale([1, 1, 0.2])\n            sphere(15, $fn=6);\n    }\n}\n\n// Front face with hinges\nmodule front_face() {\n    difference() {\n        cube([120, 60, 3], center=true);\n        \n        // Hinged front panel\n        translate([0, 0, -2])\n            cube([122, 62, 2], center=true);\n        translate([0, 0, 2])\n            cube([122, 62, 2], center=true);\n    }\n}\n\n// Back face with hinges\nmodule back_face() {\n    difference() {\n        cube([120, 60, 3], center=true);\n        \n        // Hinged back panel\n        translate([0, 0, -2])\n            cube([122, 62, 2], center=true);\n        translate([0, 0, 2])\n            cube([122, 62, 2], center=true);\n    }\n}\n\n// Drawer front\nmodule drawer() {\n    difference() {\n        cube([120, 60, 15], center=true);\n        translate([0, 0, 0])\n            cube([122, 62, 15], center=true);\n        translate([0, 0, 0])\n            cube([122, 62, 15], center=true);\n    }\n    \n    // Drawer handle\n    translate([0, 0, 15])\n        cube([8, 8, 2], center=true);\n    \n    // Drawer box\n    translate([0, 0, 0])\n        cube([122, 62, 2], center=true);\n}\n\n// Drawer base\nmodule drawer_base() {\n    difference() {\n        cube([122, 62, 2], center=true);\n        translate([0, 0, -1])\n            cube([122, 62, 2], center=true);\n    }\n}\n\n// Support legs\nmodule support_legs() {\n    for(x = [10, 110]) {\n        for(y = [10, 110]) {\n            translate([x, y, -10])\n                cube([12, 6, 6], center=true);\n        }\n    }\n}\n\n// Cable management holes\nmodule cable_holes() {\n    for(x = [10, 110]) {\n        for(y = [10, 110]) {\n            translate([x, y, -15])\n                cylinder(h=3, r=1.5);\n        }\n    }\n}\n\n// Screw holes (for hardware)\nmodule screw_holes() {\n    for(x = [10, 110]) {\n        for(y = [10, 110]) {\n            translate([x, y, 0])\n                cylinder(h=2, r=0.8);\n        }\n    }\n}\n\n// Assembly\n// Front face\ntranslate([0, 0, 15])\n    front_face();\n\n// Side walls\ntranslate([0, 0, -15])\n    desk_body();\n\n// Top edges\ntranslate([0, 0, -15])\n    desk_body();\n\n// Support legs\ntranslate([0, 0, -10])\n    support_legs();\n\n// Cable management\ncable_holes();\n\n// Handle\ntranslate([0, 0, 0])\n    drawer();\n\n// Drawer\ntranslate([0, 0, -15])\n    drawer();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "container with lid",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 79,
      "code": "// Realistic 3D-printable kitchen appliance \u2013 microwave oven\n// Medium complexity, 1.2 mm wall thickness for 3D printing\n\n// Overall dimensions (mm)\nbase_d = 60;\nbase_h = 8;\nwall_t = 2;\n\n// Base plate\ndifference() {\n    cube([base_d, base_h, base_d], center=true);\n    translate([0, 0, -base_d/2])\n        cube([base_d, base_h, base_d], center=true);\n}\n\n// Control panel\ndifference() {\n    translate([0, 0, base_h/2 + 0.1])\n        cube([15, 8, 1], center=true);\n    translate([0, 0, base_h/2 - 0.1])\n        cube([11, 6, 0.2], center=true);\n}\n\n// Control panel buttons\nfor (x = [-3, 0, 3])\n    for (y = [-2, 0, 2])\n        translate([x, y, base_h/2 - 0.1])\n            cube([5, 1.5, 0.3], center=true);\n\n// Grill door handle\ndifference() {\n    cylinder(h=5, r=4, center=false);\n    translate([0, 0, -1])\n        cylinder(h=1, r=2.5, center=false);\n}\n\n// Power cord holder\ndifference() {\n    cylinder(h=3, r=2, center=true);\n    cylinder(h=0.5, r=1.5, center=true);\n}\n\n// Rear ventilation grilles\nfor (y = [-3, -1, 0, 1, 3])\n    for (x = [-2, 0, 2, 4])\n        translate([x, y, 0])\n            cube([wall_t, wall_t, 8], center=true);\n\n// Top display cover\ndifference() {\n    cube([18, 6, 1], center=true);\n    translate([0, 0, 0.1])\n        cube([16, 5, 0.5], center=true);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "closed box",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 73,
      "code": "// Realistic 3D-printable cup with handle\n// Medium complexity, approximately 80 mm tall\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule cup() {\n    // Main cup body\n    cylinder(h = 30, d1 = 40, d2 = 45, $fn = 50);\n\n    // Handle grip\n    difference() {\n        // Handle base\n        translate([0, 0, wall + 20])\n            cylinder(h = 20, d = 45, $fn = 50);\n\n        // Handle opening\n        translate([0, 0, -1])\n            cube([45, 30, 30], center = true);\n    }\n\n    // Stem\n    cylinder(h = 20, d = 5, $fn = 50);\n\n    // Neck\n    cylinder(h = 15, d = 40, $fn = 50);\n}\n\n// Main assembly\nunion() {\n    cup();\n    handle();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "open box",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 38,
      "code": "// Realistic Medium-Complexity Medium-Sized Desk Organiser\n// Overall footprint: 110mm x 80mm x 50mm (height)\n// Wall thickness: 2mm all around for 3D printing\n// No overhangs greater than 45\u00b0, printable without supports\n\n$fn = 36;\n\nmodule desk_organizer() {\n    // Base frame\n    difference() {\n        // Main frame\n        cube([110, 80, 50], center = true);\n        \n        // Cable management slot\n        translate([5, 5, 0])\n            cube([60, 40, 20], center = true);\n        \n        // Drawer cavity\n        translate([20, 20, -10])\n            cube([35, 35, 15], center = true);\n    }\n    \n    // Drawer box\n    difference() {\n        translate([20, 20, -15])\n            cube([35, 35, 15], center = true);\n        translate([20, 20, -5])\n            cube([35, 35, 15], center = true);\n    }\n    \n    // Drawer front\n    difference() {\n        translate([20, 20, -15])\n            cube([35, 35, 15], center = true);\n        translate([20, 20, -5])\n            cube([35, 35, 15], center = true);\n    }\n    \n    // Control panel\n    difference() {\n        translate([20, 20, -20])\n            cube([25, 25, 4], center = true);\n        translate([20, 20, -25])\n            cube([25, 25, 4], center = true);\n    }\n    \n    // Buttons\n    translate([20, 20, -10])\n        cylinder(h = 3, r = 4, $fn = 3);\n    translate([20, 20, -10])\n        cylinder(h = 3, r = 4, $fn = 3);\n    \n    // Side panels (2)\n    translate([-20, 50, 0])\n        cube([10, 10, 15], center = true);\n    translate([20, 50, 0])\n        cube([10, 10, 15], center = true);\n    \n    // Back panel\n    difference() {\n        translate([-20, 50, -10])\n            cube([10, 10, 15], center = true);\n        translate([-20, 50, -20])\n            cube([10, 10, 15], center = true);\n    }\n    \n    // Drawer pull\n    difference() {\n        translate([20, 20, -10])\n            cube([3, 3, 4], center = true);\n        translate([20, 20, -5])\n            cube([3, 3, 4], center = true);\n    }\n    \n    // Support legs\n    for (x = [-35, 35])\n        for (y = [-35, 35])\n            translate([x, y, -20])\n                cylinder(h = 5, r = 3, $fn = 3);\n}\n\ndesk_organizer();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "cup",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 97,
      "code": "// Realistic 3D-printable 4-slice toaster with glass jar and crumb tray\n// Medium complexity, 2 mm wall thickness, no overhangs >45\u00b0\n\n// Overall dimensions (mm)\ntoaster_height = 80;\ntoaster_width = 120;\ntoaster_depth = 60;\nwall_thickness = 2;  // 3D-print friendly\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Base plate with heating element\nmodule base_plate() {\n    difference() {\n        // Main base\n        cube([toaster_width, toaster_depth, wall_thickness], center=true);\n        // Cooling vents\n        translate([0, wall_thickness, 0])\n            cube([wall_thickness*1.5, wall_thickness, toaster_depth*0.4], center=true);\n    }\n}\n\n// Heating element with flame\nmodule heating_element() {\n    difference() {\n        cylinder(h=wall_thickness*1.2, r=wall_thickness*0.8, $fn=20);\n        // Flame\n        translate([0, wall_thickness*0.6, 0])\n            cylinder(h=wall_thickness*0.8, r=wall_thickness*0.5, $fn=16);\n    }\n}\n\n// Glass jar with lid\nmodule glass_jar() {\n    difference() {\n        // Jar body\n        cube([toaster_width*0.4, toaster_depth*0.4, 15], center=true);\n        // Lid\n        translate([0, 0, 5])\n            cube([toaster_width*0.4, toaster_depth*0.4, 12], center=true);\n    }\n}\n\n// Crumbs tray with crumb-catcher\nmodule crumb_tray() {\n    difference() {\n        cube([toaster_width*0.6, toaster_depth*0.6, 4], center=true);\n        // Tray lip\n        translate([0, 0, 2])\n            cube([toaster_width*0.4, toaster_depth*0.4, 2], center=true);\n        // Crumb catch\n        translate([0, 0, 2])\n            cube([toaster_width*0.4, toaster_depth*0.4, 0.4], center=true);\n    }\n}\n\n// Handle grips\nmodule handle_grips() {\n    for(i=[1:3]) {\n        translate([i*toaster_width*0.3, 0, 0])\n            cylinder(h=10, r=wall_thickness*1.2, $fn=12);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base_plate();\n\n    // Heating element\n    heating_element();\n\n    // Glass jar with lid\n    glass_jar();\n\n    // Crumb tray\n    crumb_tray();\n\n    // Handle grips\n    handle_grips();\n\n    // Assembly\n    translate([0, 0, 0])\n        handle_grips();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "channel",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 20,
      "code": "// Realistic 3D-printable 3D-printer\n// Medium complexity with functional elements and 3D-printing constraints\n\n// Overall dimensions (mm)\nbase_width = 80;\nbase_depth = 60;\nbase_height = 30;\n\n// Bed dimensions (mm)\nbed_width = 60;\nbed_depth = 50;\nbed_height = 20;\n\n// Nozzle height (mm)\nnozzle_height = 50;\n\n// Filament holder slot depth (mm)\nholder_depth = 8;\n\n// Filament guide channel width (mm)\nguide_width = 12;\nguide_height = 3;\n\n// Screw hole diameter (mm)\nscrew_hole_dia = 4;\nscrew_hole_length = 8;\n\n// Mounting bracket thickness (mm)\nbracket_thickness = 4;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main body shell\nmodule main_body() {\n    difference() {\n        // Base with rounded edges\n        rounded_base();\n        translate([0, 0, -base_height/2 + wall_thickness/2])\n            cube([base_width, base_depth, base_height], center=true);\n    }\n}\n\n// Rounded base with gentle taper\nmodule rounded_base() {\n    difference() {\n        // Main base block\n        cube([base_width, base_depth, base_height], center=true);\n        \n        // Hollow out for filament clearance\n        translate([0, 0, base_height/2 + 0.1])\n            cube([base_width - wall_thickness*2, base_depth - wall_thickness*2, base_height - wall_thickness], center=true);\n    }\n}\n\n// Bed plate with nozzle clearance\nmodule bed_plate() {\n    difference() {\n        // Main bed block\n        cube([bed_width, bed_depth, bed_height], center=true);\n        \n        // Nozzle hole\n        translate([0, bed_depth/2 - wall_thickness/2, bed_height/2 - nozzle_height/2])\n            cylinder(h=nozzle_height, r=2, center=true);\n        \n        // Filament guides\n        for (x = [0:1:bed_width-guide_width-1]) {\n            for (y = [0:1:bed_depth-guide_width-1]) {\n                translate([x, bed_depth/2, y])\n                    cube([guide_width, guide_width, guide_height], center=true);\n            }\n        }\n    }\n}\n\n// Four mounting brackets for printer stand\nmodule mounting_brackets() {\n    for (x = [-1, 1]) {\n        // Left bracket\n        translate([x * 25, 0, 0])\n            cube([10, base_depth - 5, bracket_thickness], center=true);\n        \n        // Right bracket\n        translate([x * 25, base_depth - 5, 0])\n            cube([10, base_depth - 5, bracket_thickness], center=true);\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    translate([0, base_depth/2 + 5, 0])\n        cube([8, 4, 3], center=true);\n}\n\n// Filament tray\nmodule filament_tray() {\n    translate([0, base_depth/2 - 3, 0])\n        cube([bed_width - 10, bed_depth - 6, 1], center=true);\n}\n\n// Nozzle assembly\nmodule nozzle() {\n    difference() {\n        // Base\n        cylinder(h=nozzle_height, r=3, center=true);\n        \n        // Nozzle tip\n        translate([0, 0, nozzle_height/2 - 1])\n            cylinder(h=0.5, r=1.5, center=true);\n        \n        // Cooling vents\n        for (x = [-1, 1])\n            for (y = [-1, 1])\n                translate([x * 10, y * 10, 0])\n                    cylinder(h=0.5, r=1.2, center=true);\n    }\n}\n\n// Screws for base mounting\nmodule screws() {\n    for (x = [-1, 1]) {\n        translate([x * 25, 0, 0])\n            cylinder(h=screw_hole_length, r=screw_hole_dia/2, center=true);\n    }\n}\n\n// Ventilation slots\nmodule vents() {\n    // Top vent\n    translate([0, 0, base_height/2 - vent_height/2])\n        cube([bed_width - 10, base_depth - 10, vent_height], center=true);\n    \n    // Side vents\n    for (y = [-1, 1]) {\n        translate([0, y * 25, base_height/2 - vent_height/2])\n            cube([bed_width - 10, base_depth - 10, vent_height], center=true);\n    }\n}\n\n// Mounting brackets with screw holes\nmodule mounting_brackets() {\n    for (x = [-1, 1]) {\n        translate([x * 25, 0, 0])\n            rotate([90, 0, 0])\n                cube([20, base_depth - 5, bracket_thickness], center=true);\n        translate([0, 0, -bracket_thickness/2])\n            rotate([90, 0, 0])\n                cylinder(h=bracket_thickness, r=screw_hole_dia/2, center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Base\n    main_body();\n    \n    // Bed\n    bed_plate();\n    \n    // Control panel\n    control_panel();\n    \n    // Nozzle assembly\n    nozzle();\n    \n    // Ventilation slots\n    ventils();\n    \n    // Mounting brackets\n    mounting_brackets();\n    \n    // Screws\n    screws();\n}",
      "inference_error": null,
      "render_error": "Rendering timeout (>60s)",
      "vlm_response": null
    },
    {
      "object": "bowl",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 28,
      "code": "// Realistic 3D-printable wooden box with handle, lid, and hinges\n// Medium complexity, 50mm x 30mm x 15mm, 1.2 mm wall thickness\n\n$fn = 36;          // Smooth curves for printing\nwall = 1.2;        // Printable wall thickness\n\nmodule handle(length = 30, diameter = 6) {\n    difference() {\n        cylinder(h = 15, d = diameter, $fn = 3);\n        translate([0, 0, -1.5]) cylinder(h = 17.5, d = diameter - 2, $fn = 3);\n    }\n    // Grip ridges\n    for (i = [0:4]) {\n        rotate([0, 0, i * 90]) {\n            translate([diameter/2 - 0.5, 0, 0]) rotate([90, 0, 0]) cube([0.5, 1, 0.5]);\n        }\n    }\n    // End caps\n    difference() {\n        cylinder(h = 5, d = 6, $fn = 3);\n        translate([0, 0, -1]) cylinder(h = 7, d = 6, $fn = 3);\n    }\n}\n\nmodule box_body() {\n    difference() {\n        // Main box\n        cube([50, 30, 15]);\n        translate([2, 2, 2]) cube([46, 26, 13]);\n    }\n}\n\nmodule lid() {\n    difference() {\n        // Lid plate\n        cube([50, 30, 1.5]);\n        translate([0, 0, 0.5]) cube([46, 26, 1.2]);\n    }\n    // Handle\n    difference() {\n        translate([0, 0, 0]) handle();\n        translate([0, 0, 0]) handle();\n    }\n}\n\nmodule hinges() {\n    difference() {\n        // Hinge base\n        cube([4, 2, 20]);\n        translate([0, 0, -1]) cube([4, 2, 20]);\n    }\n    // Hinge pins\n    for (i = [0:3]) {\n        translate([0, 0, -1]) rotate([90, 0, 0]) cylinder(h = 3, d = 1.5);\n    }\n}\n\n// Main assembly\nunion() {\n    // Handle\n    handle();\n    // Box\n    box_body();\n    // Lid\n    lid();\n    // Hinges\n    hinges();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "vase",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 99,
      "code": "// Realistic 3D-Printable Kitchen Scale\n// Medium complexity - 3D-printable with no overhangs >45\u00b0\n\n// Overall scale\nscale = 1.2;\n\n// Main body\nscale_x = 40;\nscale_y = 25;\nscale_z = 15;\n\n// Base plate\nmodule base() {\n    difference() {\n        cube([scale_x, scale_y, scale_z], center=true);\n        translate([0, 0, -0.1]) cylinder(h=0.2, r=2, center=true);\n    }\n}\n\n// Digital display\nmodule display() {\n    difference() {\n        cube([scale_x, scale_y, 0.5], center=true);\n        translate([0, 0, -0.1]) cylinder(h=0.2, r=2, center=true);\n    }\n}\n\n// LCD screen\nmodule lcd() {\n    color(\"black\") cube([scale_x, scale_y, 0.3], center=true);\n}\n\n// Buttons\nmodule buttons() {\n    for(i=[0:2]) {\n        translate([i * scale_x, 0, 0]) {\n            cylinder(h=0.3, r=1.5, center=true);\n            translate([0, 0, 0.3]) cube([0.1, 0.1, 0.1]);\n        }\n    }\n}\n\n// Control buttons\nmodule control_buttons() {\n    translate([0, 0, scale_z/2]) {\n        cylinder(h=0.4, r=1.8);\n        translate([0, 0, 0.4]) cube([0.1, 0.1, 0.1]);\n    }\n}\n\n// Power button\nmodule power_button() {\n    translate([0, 0, -scale_z/2]) {\n        cylinder(h=0.5, r=1.5);\n        translate([0, 0, 0.5]) cube([0.1, 0.1, 0.1]);\n    }\n}\n\n// Reset button\nmodule reset_button() {\n    translate([0, 0, -scale_z/2 - 0.5]) {\n        cylinder(h=0.5, r=1.5);\n        translate([0, 0, 0.5]) cube([0.1, 0.1, 0.1]);\n    }\n}\n\n// Food container\nmodule food_container() {\n    difference() {\n        translate([0, 0, 0.5]) {\n            scale([1, 0.8, 0.6]) sphere(r=8);\n            translate([0, 0, -0.1]) cylinder(h=0.1, r=4, center=true);\n        }\n    }\n}\n\n// Lid\nmodule lid() {\n    difference() {\n        cylinder(h=1.5, r=6);\n        translate([0, 0, -0.1]) cylinder(h=0.2, r=3.5, center=true);\n    }\n}\n\n// Bottom support\nmodule bottom_support() {\n    difference() {\n        cube([20, 20, 3], center=true);\n        translate([0, 0, -0.1]) cylinder(h=0.5, r=1.5, center=true);\n    }\n}\n\n// Wall reinforcement\nmodule wall_reinforcement() {\n    for(x=[-10, 10]) {\n        for(y=[-10, 10]) {\n            translate([x, y, 0.5]) cube([12, 12, 1.2], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    display();\n    lcd();\n    buttons();\n    power_button();\n    reset_button();\n    food_container();\n    lid();\n    bottom_support();\n    wall_reinforcement();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "lattice",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 58,
      "code": "// Realistic 1:100-scale antique desk clock\n// Based on 19th-century cuckoo clocks\n\n// Overall dimensions (mm)\ndesk_width = 110;\ndesk_depth = 80;\ndesk_height = 55;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main body\nmodule body() {\n    difference() {\n        // Main housing\n        cube([desk_width, desk_depth, desk_height], center=true);\n        \n        // Clock face\n        translate([0, 0, desk_height/2 - 1])\n            cube([desk_width, desk_depth, 2], center=true);\n            \n        // Glass panel\n        translate([0, 0, desk_height/2 - 1])\n            cube([desk_width, desk_depth, 2], center=true);\n    }\n}\n\n// Clock face with Roman numerals\nmodule clock_face() {\n    translate([0, 0, desk_height/2 - 0.5])\n        cube([desk_width, desk_depth, 0.6], center=true);\n}\n\n// Pendulum\nmodule pendulum() {\n    cylinder(h=1, r1=3, r2=2, center=true);\n}\n\n// Feet\nmodule feet() {\n    for(x = [-1, 1])\n        for(y = [-1, 1])\n            translate([x * desk_width/2 - 5, y * desk_depth/2 - 5, -2])\n                cylinder(h=3, r=2, center=true);\n}\n\n// Handle\nmodule handle() {\n    translate([0, 0, desk_height/2 - 10])\n        rotate([0, 15, 0])\n            difference() {\n                cylinder(h=15, r=6, center=true);\n                translate([0, 0, -1])\n                    cube([12, 8, 16], center=true);\n            }\n}\n\n// Assembly\nunion() {\n    body();\n    translate([0, 0, 0])\n        rotate([0, 0, 15])\n            pendulum();\n    foot(1);\n    translate([0, 0, -desk_height/2 + 10])\n        handle();\n    translate([0, 0, -desk_height/2 - 10])\n        rotate([0, 15, 0])\n            rotate([0, 15, 0])\n                lever();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "mesh",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 23,
      "code": "// Realistic 3D-printable wooden chair - Medium complexity\n// Designed for FDM printing with 2 mm wall thickness\n// Overall size: 120 mm wide x 80 mm deep x 75 mm tall\n\n// Parameters\nchair_width = 120;\nchair_depth = 80;\nchair_height = 75;\nseat_height = 45;\nleg_thickness = 4;\nseat_thickness = 4;\nback_thickness = 3;\nback_height = 35;\narm_width = 12;\narm_height = 30;\narm_length = 50;\ncorner_radius = 3;\n\n// Main structural body\nmodule chair_body() {\n    difference() {\n        // Outer block\n        cube([chair_width, chair_depth, chair_height], center=true);\n        \n        // Rounded front edge for printability\n        translate([0, chair_depth/2 - 2, -1])\n            cube([chair_width - 2, 2, chair_height - 1], center=true);\n        \n        // Hollow center\n        translate([0, 0, 0])\n            cube([chair_width - 2, chair_depth - 2, chair_height - 1.5], center=true);\n    }\n}\n\n// Front legs with joints\nmodule front_leg(x_pos, y_pos, z_pos) {\n    translate([x_pos, y_pos, z_pos]) {\n        difference() {\n            cube([leg_thickness, leg_thickness, leg_thickness]);\n            translate([0, 0, -1])\n                cube([leg_thickness + 2, leg_thickness + 2, leg_thickness + 2]);\n            // Screw holes for joint stability\n            for(i = [0:3]) {\n                translate([i*leg_thickness, 0, -1])\n                    cylinder(h=4, d=1.5, center=true);\n            }\n        }\n    }\n}\n\n// Back legs with joints\nmodule back_leg(x_pos, y_pos, z_pos) {\n    translate([x_pos, y_pos, -chair_height/2 + back_height/2]) {\n        difference() {\n            cube([leg_thickness, leg_thickness, leg_thickness]);\n            translate([0, 0, -1])\n                cube([leg_thickness + 2, leg_thickness + 2, leg_thickness + 2]);\n            // Screw holes\n            for(i = [0:3]) {\n                translate([i*leg_thickness, 0, -1])\n                    cylinder(h=4, d=1.5, center=true);\n            }\n        }\n    }\n}\n\n// Seat with rounded top edge\nmodule seat() {\n    difference() {\n        cube([chair_width - 4, chair_depth - 4, seat_thickness], center=true);\n        // Chamfer edges\n        for(x = [0, chair_width - 4])\n            for(y = [0, chair_depth - 4])\n                translate([x, y, -1.5])\n                    cube([chair_width - 2, chair_depth - 2, seat_thickness - 1], center=true);\n    }\n}\n\n// Backrest with support slats\nmodule backrest() {\n    difference() {\n        cube([chair_width - 4, chair_depth - 4, back_height], center=true);\n        // Support slats\n        for(x = [0, chair_width - 4])\n            for(y = [0, chair_depth - 4])\n                translate([x, y, -back_height/2 - 1.5])\n                    cube([4, 4, 2], center=true);\n    }\n}\n\n// Armrest\nmodule armrest(x_pos, y_pos, z_pos, y_axis = 0) {\n    translate([x_pos, y_pos, z_pos + y_axis * arm_height/2]) {\n        difference() {\n            cube([arm_width, arm_length, arm_height], center=true);\n            translate([0, 0, -1])\n                cube([arm_width - 4, arm_length - 4, arm_height - 4], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    chair_body();\n    \n    // Front legs\n    front_leg(15, 15, 15);\n    \n    // Back legs\n    back_leg(15, 15, 15);\n    \n    // Seat\n    seat();\n    \n    // Armrests\n    armrest(25, 15, 15);\n    armrest(-25, 15, 15);\n    \n    // Backrest\n    backrest();\n    \n    // Decorative details\n    translate([0, 0, 15])\n        cube([chair_width - 2, chair_depth - 2, 10], center=true);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "honeycomb",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 26,
      "code": "// Realistic-style 3D-printable honeycomb model\n// Medium complexity, printable in one piece, no support needed\n\n// Overall dimensions\nwidth = 80;\nheight = 60;\ndepth = 45;\n\n// Hexagonal cell thickness\ncell_th = 2.5;\n\n// Wall thickness\nwall = 1.5;\n\n// Main honeycomb body\nmodule honeycomb_body() {\n    difference() {\n        cube([width, height, depth], center=true);\n        for (x = [-width/2+cell_th*2, width/2-cell_th*2]) {\n            for (y = [-height/2+cell_th*2, height/2-cell_th*2]) {\n                translate([x, y, cell_th/2])\n                    cube([cell_th, cell_th, cell_th], center=true);\n            }\n        }\n    }\n}\n\n// Hexagonal cell\nmodule hexagonal_cell() {\n    difference() {\n        cube([width, height, depth], center=true);\n        for (x = [-width/2+cell_th*2, width/2-cell_th*2]) {\n            for (y = [-height/2+cell_th*2, height/2-cell_th*2]) {\n                translate([x, y, cell_th/2])\n                    cube([cell_th, cell_th, cell_th], center=true);\n            }\n        }\n    }\n}\n\n// Central support cylinder\nmodule central_cylinder() {\n    cylinder(h=height+depth, r=width/2, center=false);\n}\n\n// Base plates for strength\nmodule base_plates() {\n    translate([0, 0, -width/2])\n        difference() {\n            cube([width, height, 1], center=true);\n            translate([0, 0, -0.1])\n                cube([width*0.9, height*0.9, 1.2], center=true);\n        }\n    translate([0, 0, -height/2])\n        difference() {\n            cube([width, height, 1], center=true);\n            translate([0, 0, -0.1])\n                cube([width*0.9, height*0.9, 1.2], center=true);\n        }\n}\n\n// Side walls\nmodule side_walls() {\n    difference() {\n        cube([width, height, depth], center=true);\n        translate([0, 0, -wall/2])\n            cube([width*0.9, height*0.9, depth], center=true);\n    }\n}\n\n// Ventilation slots\nmodule ventilation_slots() {\n    for (x = [-width/3, width/3])\n        translate([x, 0, -height/4])\n            difference() {\n                cube([wall, height*0.9, depth*0.8], center=true);\n                translate([0, 0, -1])\n                    cube([wall*1.1, height*0.9, depth*0.8], center=true);\n            }\n}\n\n// Base reinforcement ring\nmodule base_ring() {\n    translate([0, 0, -width/2+1])\n        difference() {\n            cylinder(h=1, r=width/2, center=true);\n            translate([0, 0, -wall/2])\n                cylinder(h=1, r=width/2, center=true);\n        }\n}\n\n// Assembly\nunion() {\n    honeycomb_body();\n    base_plates();\n    central_cylinder();\n    side_walls();\n    ventilation_slots();\n    base_ring();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "grid",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 91,
      "code": "// Realistic 3D-printable 6-sided cube with rounded edges\n// Optimized for FDM printing, 3 mm wall thickness, no steep overhangs\n\n$fn = 36;   // Smooth curves\n\n// Overall dimensions\nscale_factor = 1.0;  // Scale to fit FDM profile\n\nmodule cube_body() {\n    difference() {\n        // Main block\n        cube([12 * scale_factor, 12 * scale_factor, 12 * scale_factor]);\n        \n        // Rounded edges\n        translate([scale_factor * 1.5, scale_factor * 1.5, 0])\n            sphere(r = 2 * scale_factor);\n        translate([-scale_factor * 1.5, scale_factor * 1.5, 0])\n            sphere(r = 2 * scale_factor);\n        translate([scale_factor * 1.5, -scale_factor * 1.5, 0])\n            sphere(r = 2 * scale_factor);\n        translate([-scale_factor * 1.5, -scale_factor * 1.5, 0])\n            sphere(r = 2 * scale_factor);\n    }\n}\n\nmodule rounded_edges() {\n    // Rounded cube corners\n    for (x = [-6, 6], y = [-6, 6], z = [-6, 6]) {\n        translate([x * scale_factor, y * scale_factor, z * scale_factor])\n            rotate([0, 90, 0])\n                scale([1, 1, 1])\n                    sphere(r = 2 * scale_factor);\n    }\n}\n\nmodule label() {\n    // Rounded label area\n    translate([0, 0, 0])\n        rounded_edges();\n}\n\nmodule label_text() {\n    // Rounded label text\n    translate([0, 0, 8 * scale_factor])\n        rotate([0, 0, -30])\n            linear_extrude($fn)\n                text(\"Cube\", size = 3 * scale_factor);\n}\n\nmodule label_position() {\n    // Position label at bottom\n    translate([-1, -1, -8 * scale_factor])\n        label();\n}\n\n// Main assembly\nscale_factor = 1.0;\ntranslate([-10, -10, -8 * scale_factor])\n    rotate([0, 90, 0])\n        cube_body();\n    label_position();\n    label_text();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "woven pattern",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 11,
      "code": "// Realistic Medium-Complexity Realistic Wooden Chair\n// Designed for 3D printing with 1.2 mm wall thickness and no overhangs.\n\n// Overall dimensions (mm)\nchair_width = 70;\nchair_depth = 60;\nchair_height = 85;\n\n// Wall thickness\nwall_thickness = 1.2;\n\n// Seat dimensions\nseat_width = 50;\nseat_depth = 55;\nseat_height = 40;\n\n// Backrest dimensions\nbackrest_width = 40;\nbackrest_height = 60;\nbackrest_thickness = 8;\n\n// Leg dimensions\nleg_height = 45;\nleg_width = 4;\n\n// Assembly parts\nleg_frames = [\n    [leg_height * 2],\n    [leg_height * 2],\n    [leg_height * 2],\n    [leg_height * 2],\n    [leg_height * 2]\n];\n\n// Chair frame\nframe = [\n    [wall_thickness * 4],\n    [wall_thickness * 4],\n    [wall_thickness * 4],\n    [wall_thickness * 4],\n    [wall_thickness * 4]\n];\n\n// Seat cushion\nseat_cushion = [\n    [seat_width * 0.7],\n    [seat_depth * 0.7],\n    [seat_height * 0.6],\n    [seat_height * 0.5]\n];\n\n// Backrest cushion\nbackrest_cushion = [\n    [backrest_width * 0.6],\n    [backrest_height * 0.4],\n    [backrest_height * 0.5],\n    [backrest_height * 0.2]\n];\n\n// Legs\nleg = [\n    [wall_thickness * 2],\n    [wall_thickness * 2],\n    [wall_thickness * 2],\n    [wall_thickness * 2],\n    [wall_thickness * 2]\n];\n\n// Assembly\nmodule wooden_chair() {\n    difference() {\n        // Main seat\n        cube([chair_width, chair_depth, seat_height], center=true);\n\n        // Front legs\n        translate([-chair_width/2 + leg_width/2, 0, 0])\n            cube([leg_width, leg_height, leg_height], center=true);\n        translate([chair_width/2 - leg_width/2, 0, 0])\n            cube([leg_width, leg_height, leg_height], center=true);\n\n        // Back legs\n        translate([0, chair_depth/2 + leg_height, 0])\n            cube([leg_width, leg_height, leg_height], center=true);\n        translate([chair_width/2 - leg_width/2, 0, 0])\n            cube([leg_width, leg_height, leg_height], center=true);\n\n        // Seat cushion\n        translate([0, 0, seat_height/2])\n            cube([chair_width - 2 * leg_width, chair_depth - 2 * leg_width, seat_height], center=true);\n\n        // Backrest cushion\n        translate([0, 0, seat_height + backrest_height/2])\n            cube([chair_width - 2 * leg_width, chair_depth - 2 * leg_width, backrest_thickness], center=true);\n\n        // Support frame\n        translate([0, -chair_depth/4, -seat_height/2 + leg_height/2])\n            cube([wall_thickness * 5, wall_thickness * 5, wall_thickness * 5], center=true);\n\n        // Decorative joints (simple cylinders)\n        translate([0, -chair_depth/4, -seat_height + leg_height/2])\n            cylinder(h=leg_height, r=wall_thickness, $fn=20);\n        translate([0, -chair_depth/4, -seat_height + leg_height/2])\n            cylinder(h=leg_height, r=wall_thickness, $fn=20);\n\n    }\n\n    // Assembly\n    union() {\n        // Seat assembly\n        translate([0, 0, seat_height/2])\n            seat_cushion();\n\n        // Backrest assembly\n        translate([0, 0, seat_height - backrest_height/2])\n            backrest_cushion();\n\n        // Legs with joints\n        for (i = [0:3]) {\n            angle = i * 90;\n            rotate([0, 0, angle])\n                translate([0, 0, -leg_height/2])\n                    leg_frames[i];\n        }\n\n        // Decorative details\n        for (i = [0:3]) {\n            rotate([0, 0, i * 90])\n                translate([0, 0, -seat_height/2])\n                    cube([chair_width - 2 * leg_width, chair_depth - 2 * leg_width, 2], center=true);\n        }\n    }\n}\n\n// Render the chair\nwooden_chair();",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: ERROR: Parser error: syntax error in file evaluation/ThomasTheMaker_k-1b_20251029_161318/woven_pattern.scad, line 122\nCan't parse file 'evaluation/ThomasTheMaker_k-1b_20251029_161318/woven_pattern.sca",
      "vlm_response": null
    },
    {
      "object": "diamond pattern",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 13,
      "code": "// Realistic 3D-printable Tapered Table Lamp Base\n// Medium complexity with no overhangs, 3 walls, 2 legs, 1 base\n// Overall height: 85 mm\n\n$fn = 32;\n\n// Main dimensions\nbase_diameter = 40;\nbase_height = 30;\narm_height = 80;\nbase_thickness = 25;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Base with rounded bottom\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h=base_thickness, d=base_diameter, center=true);\n        \n        // Rounded bottom\n        translate([0, 0, -1])\n            cylinder(h=base_thickness + 2, d1=base_diameter * 0.9, d2=base_diameter * 0.8, center=true);\n    }\n}\n\n// Tapered legs with feet\nmodule leg() {\n    difference() {\n        // Leg body\n        cylinder(h=base_thickness + 2, d1=8, d2=10);\n        \n        // Foot pad\n        translate([0, 0, -1])\n            cylinder(h=1.5, d=8);\n    }\n}\n\n// Arm with cable management slot\nmodule arm() {\n    difference() {\n        // Arm cylinder\n        cylinder(h=arm_height, d=12, center=true);\n        \n        // Cable hole\n        translate([0, 0, -wall_thickness/2])\n            rotate([0, 0, 45])\n                cylinder(h=wall_thickness*2, d=4);\n    }\n}\n\n// Support bracket for arm\nmodule support_bracket() {\n    difference() {\n        cylinder(h=15, d=8);\n        translate([0, 0, -1])\n            cylinder(h=18, d=6);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    translate([0, 0, 0])\n        base();\n\n    // Legs\n    translate([0, 0, -base_height/2 - base_thickness/2])\n        leg();\n    translate([0, 0, -base_height/2 - base_thickness/2])\n        mirror([1, 0, 0])\n            leg();\n\n    // Arm\n    translate([0, 0, base_height/2 + arm_height/2])\n        arm();\n\n    // Support bracket\n    translate([0, 0, base_height/2 + arm_height/2 - wall_thickness/2 - base_thickness/2])\n        support_bracket();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "cross pattern",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 75,
      "code": "// Realistic T-shirt with buttonholes and collar\n// Medium complexity, 3D-printable with 2mm walls\n\n// Main parameters\ncollar_width = 8;\ncollar_height = 6;\ncollar_thickness = 2;\nbutton_width = 20;\nbutton_height = 2;\nbutton_spacing = 8;\nneck_length = 28;\nneck_width = 35;\nbutton_spacing_neck = 2;\n\n// Base layer\nmodule base_layer() {\n    difference() {\n        // Main collar body\n        translate([0, 0, 0])\n            cube([collar_width, collar_height, collar_thickness], center=true);\n        \n        // Buttonholes\n        translate([collar_width/2 - button_spacing_neck*2, 0, collar_thickness/2 + button_height/2])\n            cylinder(h=button_height*2, r=button_width/2, center=true);\n        translate([collar_width/2 - button_spacing_neck*2, 0, -collar_thickness/2 - button_height*2/2])\n            cylinder(h=button_height*2, r=button_width/2, center=true);\n        \n        // Neck hole\n        translate([0, 0, -neck_length/2])\n            cylinder(h=neck_length/2, r=neck_width/2, center=true);\n    }\n}\n\n// Collar with buttonholes\nmodule collar() {\n    difference() {\n        // Main collar\n        translate([0, 0, 0])\n            color(\"gray\")\n            cube([collar_width, collar_height, collar_thickness], center=true);\n        \n        // Buttonholes\n        translate([0, 0, -collar_thickness/2 - 0.1])\n            cylinder(h=1.5, r=button_width/2, center=true);\n        translate([0, 0, -collar_thickness/2 - 0.1])\n            cylinder(h=1.5, r=button_width/2, center=true);\n    }\n}\n\n// Button\nmodule button() {\n    difference() {\n        // Main button\n        cylinder(h=button_height, r=button_width/2, center=true);\n        \n        // Button indentation\n        translate([0, 0, -button_height/2])\n            cylinder(h=0.1, r=button_width/2 - 0.1, center=true);\n    }\n}\n\n// Neck strip\nmodule neck_strip() {\n    difference() {\n        cylinder(h=neck_length/2, r=neck_width/2, center=true);\n        \n        // Neck hole\n        translate([0, 0, -neck_length/2 - 1])\n            cylinder(h=1, r=neck_width/2 - 0.5, center=true);\n    }\n}\n\n// Main shirt\nmodule shirt() {\n    union() {\n        // Base\n        base_layer();\n        \n        // Collar\n        collar();\n        \n        // Neck strip\n        neck_strip();\n        \n        // Buttonholes\n        translate([0, 0, neck_length/2 - button_spacing_neck*2])\n            button_button();\n        translate([0, 0, neck_length/2 - button_spacing_neck*2])\n            button_button();\n        \n        // Buttons\n        translate([0, 0, neck_length/2 - button_spacing_neck*2])\n            button_button();\n        translate([0, 0, neck_length/2 - button_spacing_neck*2])\n            button_button();\n        \n        // Front collar\n        translate([0, 0, neck_length/2 + 2])\n            collar();\n    }\n}\n\n// Button button\nmodule button_button() {\n    difference() {\n        // Main button\n        cylinder(h=button_height, r=button_width/2, center=true);\n        \n        // Button indentation\n        translate([0, 0, -button_height/2])\n            cylinder(h=0.1, r=button_width/2 - 0.1, center=true);\n    }\n}\n\n// Position all elements\nshirt();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "spiral staircase",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 9,
      "code": "// Realistic 3D-printable spiral staircase - medium complexity\n// Approx. height: 80 mm, width: 25 mm, depth: 12 mm\n\n$fn = 30; // Good for smooth curves\n\n// Main module\nmodule staircase() {\n    // Base platform\n    translate([0, 0, -4]) {\n        cube([30, 20, 2], center = true);\n    }\n    // First landing\n    translate([0, 0, 0]) {\n        cube([18, 12, 3], center = true);\n    }\n    // Second landing\n    translate([0, 0, 0]) {\n        cube([16, 10, 3], center = true);\n    }\n    // Spiral staircase\n    difference() {\n        // Main staircase body\n        scale([1, 1, 1]) {\n            cylinder(h = 30, r = 8, center = false);\n        }\n        \n        // Staircase treads\n        for (i = [0:3]) {\n            translate([0, 0, 0]) {\n                scale([1, 1, 0.8]) {\n                    cylinder(h = 3, r = 8 - i*1.5, center = true);\n                }\n            }\n        }\n        \n        // Top platform\n        translate([0, 0, 30]) {\n            cube([20, 12, 3], center = true);\n        }\n        \n        // Support rails\n        for (i = [0:2]) {\n            translate([0, 0, 30 + i*15]) {\n                cube([4, 2, 2], center = true);\n            }\n        }\n        \n        // Handrail brackets\n        for (i = [0:1]) {\n            translate([0, 0, 30 + i*30]) {\n                cube([2, 2, 1], center = true);\n            }\n        }\n    }\n    // Decorative molding\n    difference() {\n        // Main molding\n        cube([20, 20, 1], center = true);\n        \n        // Top molding\n        translate([0, 0, 1]) {\n            cylinder(h = 2, r = 8, center = true);\n        }\n        \n        // Side molding\n        for (i = [0:3]) {\n            translate([0, 0, i*5]) {\n                cube([2, 2, 2], center = true);\n            }\n        }\n    }\n}\n\n// Position the staircase\ntranslate([0, 0, 0]) staircase();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "helix curve",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 2,
      "code": "// Realistic 3D-printable box with rounded edges and 2 mm wall thickness\n// Overall height: 80 mm, length: 60 mm, width: 30 mm\n\n$fn = 36;\n\nmodule box() {\n    difference() {\n        // Main box body\n        hull() {\n            translate([0, 0, 0]) cylinder(h=10, r=12);\n            translate([0, 0, -12]) cylinder(h=10, r=12);\n        }\n        // Rounded edges\n        translate([0, 0, 0]) cube([60, 30, 10], center=true);\n        translate([0, 0, 0]) cube([60, 30, 10], center=true);\n    }\n}\n\nmodule rounded_edges(height) {\n    difference() {\n        hull() {\n            translate([0, 0, 0]) cylinder(h=height, r=10);\n            translate([0, 0, 0]) cylinder(h=height, r=10);\n        }\n        // Remove inner cavity\n        translate([0, 0, 0]) cube([60, 30, height], center=true);\n    }\n}\n\nmodule lid() {\n    difference() {\n        cube([60, 30, 20], center=true);\n        translate([0, 0, 0]) cube([60, 30, 20], center=true);\n    }\n}\n\nmodule screw_holes(height) {\n    difference() {\n        // Top\n        cylinder(h=1, r=2.5, center=true);\n        translate([0, 0, 0]) cylinder(h=2, r=2.5, center=true);\n        // Bottom\n        cylinder(h=2, r=2.5, center=true);\n        translate([0, 0, 0]) cylinder(h=2, r=2.5, center=true);\n    }\n}\n\n// Main assembly\ndifference() {\n    union() {\n        box();\n        translate([0, 0, 0]) rounded_edges(80);\n        translate([0, 0, 0]) rounded_edges(60);\n        translate([0, 0, 0]) rounded_edges(80);\n        translate([0, 0, 0]) rounded_edges(60);\n        translate([0, 0, 0]) rounded_edges(80);\n        translate([0, 0, 0]) rounded_edges(60);\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "bezier curve",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 10,
      "code": "// Realistic 3D-printable kitchen appliance - oven\n// Medium complexity, ~60mm tall\n\n// Overall dimensions (in mm)\nbase_d = 50;\nbase_h = 25;\nwall_t = 2;\n\n// Module for rounded edges\nmodule rounded_edge(h, r, r_box) {\n    hull() {\n        translate([r_box/2, r_box/2, 0]) sphere(r);\n        translate([r_box/2, -r_box/2, 0]) sphere(r);\n        translate([-r_box/2, -r_box/2, 0]) sphere(r);\n        translate([-r_box/2, r_box/2, 0]) sphere(r);\n        translate([r_box/2, r_box/2, 0]) sphere(r);\n    }\n}\n\n// Main body - rectangular box with rounded top\ndifference() {\n    // Base\n    rounded_edge(20, 5, 2);\n    \n    // Front panel with ventilation holes\n    difference() {\n        cube([45, wall_t, 25], center=true);\n        for(i=[0:3]) {\n            translate([i*8, 0, 10]) cube([12, wall_t+0.2, 5], center=true);\n        }\n        \n        // Top door\n        cube([45, wall_t+0.2, 25], center=true);\n        \n        // Front control panel\n        cube([30, 20, wall_t+0.2], center=true);\n        \n        // Control buttons\n        for(i=[0:1]) {\n            translate([-15, -10, 3]) cube([15, 10, 1]);\n        }\n        \n        // Oven door handle\n        translate([15, 20, 22]) cylinder(h=5, r=3, center=true);\n    }\n    \n    // Hollow out the interior\n    translate([0, 0, 0]) cube([47, wall_t+0.2, 27], center=true);\n}\n\n// Cooktop - rectangular heating surface\ndifference() {\n    rounded_edge(2, 5, 4);\n    translate([0, 0, 0]) cube([20, wall_t, 20], center=true);\n}\n\n// Control panel\ndifference() {\n    rounded_edge(30, 10, 2);\n    \n    // Control buttons\n    for(i=[0:1]) {\n        translate([i*8, 0, 15]) cube([15, 10, 1], center=true);\n    }\n    \n    // Oven control buttons\n    translate([-15, -10, 15]) cube([15, 10, 1], center=true);\n}\n\n// Oven floor\ndifference() {\n    rounded_edge(20, 5, 2);\n    translate([0, 0, 0]) cube([45, 20, 8], center=true);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "two cubes",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 37,
      "code": "// Realistic medium-complexity 3D-printable model of a small chair\n// Overall height: ~85 mm, seat diameter: ~45 mm\n\n// Parameters\nchair_height = 85;\nseat_diameter = 45;\nseat_thickness = 8;\nleg_height = 25;\nleg_width = 10;\narmrest_height = 45;\narmrest_width = 30;\n\n// Main assembly\ndifference() {\n    union() {\n        // Seat platform\n        cube([seat_diameter, seat_thickness, seat_thickness], center=true);\n\n        // Legs with joints\n        translate([0, 0, -leg_height/2]) {\n            cylinder(h=leg_height/2, d=leg_width, $fn=16);\n            translate([0, 0, -leg_height/2]) {\n                cylinder(h=leg_height/2 + 2, d=leg_width/2, $fn=16);\n            }\n        }\n\n        // Backrest\n        translate([0, 0, seat_thickness/2]) {\n            cube([seat_diameter, leg_width/2, seat_thickness + 2], center=true);\n        }\n\n        // Front support\n        translate([0, 0, -seat_thickness/2]) {\n            cube([seat_diameter, leg_width/2, seat_thickness + 1], center=true);\n        }\n\n        // Armrests\n        translate([seat_diameter/2, 0, seat_thickness/2 + 4]) {\n            cube([armrest_width, leg_width/2, 5], center=true);\n        }\n        translate([-seat_diameter/2, 0, seat_thickness/2 + 4]) {\n            cube([armrest_width, leg_width/2, 5], center=true);\n        }\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "undulating shape",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 53,
      "code": "// OpenSCAD code for a realistic-style armchair with medium complexity\n// Features a padded seat, backrest with lumbar support, armrests, and feet with cushions\n\n// Overall dimensions (mm)\nseat_width = 120;\nseat_depth = 100;\nseat_height = 40;\nbackrest_height = 80;\narmrest_height = 45;\nleg_height = 40;\n\n// Cushion dimensions\ncushion_width = 110;\ncushion_depth = 110;\ncushion_thickness = 5;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main seat module\nmodule seat() {\n    difference() {\n        // Main seat cushion\n        cube([seat_width, seat_depth, cushion_thickness], center=true);\n        \n        // Rounded edges for comfort\n        translate([0, 0, 0.1])\n            scale([1, 1, 0.1])\n                sphere(r=cushion_width/2);\n        \n        // Cushion cutout for depth\n        translate([0, 0, -0.1])\n            cube([seat_width-2*wall_thickness, seat_depth-2*wall_thickness, cushion_thickness+wall_thickness], center=true);\n    }\n}\n\n// Backrest module\nmodule backrest() {\n    difference() {\n        // Main backrest panel\n        cube([backrest_height, 110, 80], center=true);\n        \n        // Lumbar support cutouts\n        for(i = [0:2]) {\n            translate([0, 0, i*20])\n                cube([110, 12, 10], center=true);\n        }\n        \n        // Top cushion cutout\n        translate([0, 0, 15])\n            cube([backrest_height-2*wall_thickness, 110-2*wall_thickness, 80], center=true);\n    }\n}\n\n// Armrest module\nmodule armrest(side) {\n    difference() {\n        // Armrest post\n        cube([40, 8, 25], center=true);\n        \n        // Support slats\n        for(i = [0:3]) {\n            translate([0, 0, 0])\n                cube([40, 8-2*wall_thickness, 25], center=true);\n        }\n        \n        // Cushion cutout\n        translate([0, 0, 0])\n            cube([35, 10, 20], center=true);\n    }\n}\n\n// Leg module\nmodule leg(x, y) {\n    difference() {\n        // Leg base\n        cube([10, 10, 10], center=true);\n        \n        // Cushion cutout\n        translate([x, y, -5])\n            cube([10, 10, 10], center=true);\n        \n        // Foot detail\n        translate([x, y, -5])\n            cube([5, 5, 5], center=true);\n    }\n}\n\n// Foot module\nmodule foot() {\n    difference() {\n        // Main foot block\n        cube([8, 8, 8], center=true);\n        \n        // Cushion cutout\n        translate([0, 0, 0])\n            cube([6, 6, 6], center=true);\n        \n        // Heel detail\n        translate([0, 0, -2.5])\n            cube([7, 7, 2.5], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat and cushion\n    seat();\n    \n    // Backrest\n    backrest();\n    \n    // Left armrest\n    translate([-40, 0, 40])\n        rotate([0, -15, 0])\n            armrest(-1);\n    \n    // Right armrest\n    translate([40, 0, 40])\n        rotate([0, 15, 0])\n            armrest(1);\n    \n    // Legs\n    leg(-40, -30);\n    leg(40, -30);\n    \n    // Feet\n    foot();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "wavy surface",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 47,
      "code": "// Realistic 3D-Printable Blender (Medium Complexity)\n// Overall size ~70 mm wide, printable in 1.2 mm wall thickness\n\n// Colors\n$fn = 32;\n\n// Main body\nmodule body() {\n    difference() {\n        // Outer shell\n        hull() {\n            translate([-30, -15, -20]) sphere(d = 30);\n            translate([30, -15, -20]) sphere(d = 30);\n        }\n        // Hollow core\n        hull() {\n            translate([-35, -15, -25]) sphere(d = 25);\n            translate([35, -15, -25]) sphere(d = 25);\n        }\n    }\n}\n\n// Handle\nmodule handle() {\n    difference() {\n        union() {\n            // Main grip\n            translate([20, -10, -15]) cylinder(h = 15, d = 8, $fn = 32);\n            // End cap\n            translate([10, -10, -15]) cylinder(h = 5, d = 6, $fn = 32);\n        }\n        // Cable opening\n        translate([20, -10, -15]) cylinder(h = 3, d = 4, $fn = 32);\n    }\n}\n\n// Base\nmodule base() {\n    difference() {\n        // Main base\n        cylinder(h = 8, d = 40);\n        // Rubber feet\n        for(x = [-15, 15])\n            for(y = [-15, 15])\n                translate([x, y, -3]) cylinder(h = 1, d = 4);\n    }\n}\n\n// Blender cup\nmodule cup() {\n    difference() {\n        // Cup shape\n        hull() {\n            translate([-25, 0, 0]) sphere(d = 10);\n            translate([25, 0, 0]) sphere(d = 10);\n            translate([-25, 0, 0]) sphere(d = 10);\n            translate([25, 0, 0]) sphere(d = 10);\n        }\n        // Inner cavity\n        translate([0, 0, 1.5]) scale([1, 1.2, 1]) sphere(d = 8);\n    }\n}\n\n// Control buttons\nmodule buttons() {\n    for(i = [0:1]) {\n        rotate([0, 90, 0]) {\n            translate([0, 0, 0])\n            cube([4, 4, 1], center = true);\n        }\n    }\n}\n\n// Power button\nmodule power_button() {\n    difference() {\n        union() {\n            translate([5, 0, 0]) cube([2, 2, 3], center = true);\n            translate([0, 0, 0]) cube([1, 1, 1.5], center = true);\n        }\n        // Power button hole\n        translate([5, 0, 0]) cylinder(h = 0.5, d = 1.2);\n    }\n}\n\n// Ventilation slots\nmodule ventilation() {\n    for(x = [-15, 15])\n        for(y = [-15, 15])\n            translate([x, y, -25])\n                cube([3, 3, 2], center = true);\n}\n\n// Assembly\nunion() {\n    body();\n    handle();\n    base();\n    cup();\n    buttons();\n    power_button();\n    ventilation();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "cube and sphere",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 85,
      "code": "// Realistic Toy Block (Medium Complexity)\n// 3D-printable toy model with medium detail\n\n// Overall dimensions (mm)\nblock_length = 80;\nblock_width = 60;\nblock_height = 45;\nwall_thickness = 2;\n\n// Base plate\nmodule base_plate() {\n    difference() {\n        cube([block_length - 6, block_width - 6, 3], center = true);\n        translate([0, 0, -1]) cube([block_length - 6.2, block_width - 6.2, 2], center = true);\n    }\n}\n\n// Main block body\nmodule main_body() {\n    difference() {\n        // Outer shell\n        cube([block_length - 4, block_width - 4, block_height - 3], center = false);\n        \n        // Hollow center\n        cube([block_length - 4.5, block_width - 4.5, block_height - 4.5], center = false);\n    }\n}\n\n// Side walls\nmodule side_walls() {\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * block_length/2 - block_length/2, y * block_width/2 - block_width/2, 0]) {\n                cube([wall_thickness, wall_thickness, block_height - 2], center = false);\n            }\n        }\n    }\n}\n\n// Top surface\nmodule top_surface() {\n    difference() {\n        cube([block_length - 2, block_width - 2, block_height - 3], center = false);\n        translate([0, 0, 0]) cube([block_length - 2.2, block_width - 2.2, block_height - 3.2], center = false);\n    }\n}\n\n// Bottom surface\nmodule bottom_surface() {\n    difference() {\n        cube([block_length - 2.2, block_width - 2.2, block_height - 3.2], center = false);\n        translate([0, 0, 0]) cube([block_length - 2.2, block_width - 2.2, block_height - 3.2], center = false);\n    }\n}\n\n// Grip texture on bottom\nmodule grip_texture() {\n    difference() {\n        cube([block_length - 1.5, block_width - 1.5, block_height - 3], center = false);\n        for (x = [-0.5, 0.5]) {\n            for (y = [-0.5, 0.5]) {\n                translate([x * block_length/2 - 0.5, y * block_width/2 - 0.5, -0.1]) cube([1, 1, 0.5], center = false);\n            }\n        }\n    }\n}\n\n// Decoration details - small ridges on top\nmodule decorations() {\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * block_length/2 - block_length/2, y * block_width/2 - block_width/2, 0]) {\n                scale([1, 1, 0.3]) sphere(r = 0.5);\n            }\n        }\n    }\n}\n\n// Assemble the toy block\nunion() {\n    base_plate();\n    side_walls();\n    top_surface();\n    bottom_surface();\n    grip_texture();\n    decorations();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "interlocking rings",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 80,
      "code": "// Medium complexity interlocking ring with rounded edges and smooth transition\n// Overall size: ~80 mm diameter, wall thickness 2 mm\n\n$fn = 36;          // Smooth curves\n\nmodule ring_body() {\n    // Main rounded body\n    difference() {\n        minkowski() {\n            // Outer rounded body\n            cylinder(h = 12, r = 35);\n            // Inner cutout for material saving\n            cylinder(h = 10, r = 28);\n        }\n    }\n}\n\nmodule ring_edge() {\n    // Tapered edge for smoothness\n    difference() {\n        cylinder(h = 2, r = 28);\n        cylinder(h = 3, r = 24);\n    }\n}\n\nmodule ring_joint(side = 1) {\n    // Central joint for easy assembly\n    difference() {\n        cylinder(h = 4, r = 28);\n        translate([0, 0, 4]) cylinder(h = 2, r = 24);\n    }\n}\n\n// Assembly\nunion() {\n    // Main ring body\n    difference() {\n        ring_body();\n        translate([0, 0, 12]) ring_edge();\n    }\n    \n    // Bottom edge transition\n    translate([0, 0, -0.1]) rotate([0, 0, 0]) ring_joint(1);\n    translate([0, 0, -0.1]) rotate([0, 0, 0]) ring_joint(-1);\n    \n    // Top edge transition\n    translate([0, 0, 12]) rotate([0, 0, 0]) ring_body();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "stack of cylinders",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 59,
      "code": "// Realistic medium-complexity 3D-printable model of a wooden box with lid, hinges, and handle\n// Overall size: 60 mm x 40 mm x 35 mm (suitable for FDM printing)\n\n$fn = 36;               // Medium smooth curves\n\nmodule box_body() {\n    difference() {\n        // Main box body\n        cube([60, 40, 35]);\n        \n        // Recess for contents\n        translate([30, 20, 25]) cube([40, 30, 20]);\n        translate([25, 10, 25]) cube([40, 30, 20]);\n    }\n}\n\nmodule hinges() {\n    // Front left hinge\n    translate([-20, 10, 25]) rotate([90, 0, 0]) \n        cylinder(h = 4, d = 2, center = true);\n    \n    // Front right hinge\n    translate([20, 10, 25]) rotate([90, 0, 0]) \n        cylinder(h = 4, d = 2, center = true);\n    \n    // Side hinges (left and right)\n    translate([-20, 0, 25]) rotate([0, 90, 0]) \n        cylinder(h = 4, d = 2, center = true);\n    translate([20, 0, 25]) rotate([0, 90, 0]) \n        cylinder(h = 4, d = 2, center = true);\n}\n\nmodule handle() {\n    // Handle grip\n    difference() {\n        // Main handle shape\n        cylinder(h = 15, d = 4, center = false);\n        \n        // Finger grooves\n        for(i = [0:3]) {\n            translate([0, 0, i * 7.5]) \n                cylinder(h = 0.5, d = 2.5, center = true);\n        }\n    }\n    \n    // End cap\n    difference() {\n        cylinder(h = 5, d = 4, center = false);\n        translate([0, 0, -1]) cylinder(h = 1, d = 3, center = false);\n    }\n}\n\nmodule lid() {\n    // Main lid\n    difference() {\n        cylinder(h = 2, d = 48);\n        translate([30, 20, 25]) cube([40, 30, 20]);\n    }\n    \n    // Lid top with screw holes\n    difference() {\n        cylinder(h = 2, d = 48);\n        translate([30, 20, 25]) cube([40, 30, 20]);\n        translate([25, 10, 25]) cube([40, 30, 20]);\n    }\n    \n    // Screw holes (four screws)\n    for(i = [0:3]) {\n        translate([30, 20, 25 + i * 2.5])\n            cylinder(h = 1.5, d = 1.2);\n    }\n}\n\nmodule drawer() {\n    // Drawer front\n    difference() {\n        cube([35, 40, 20]);\n        translate([-15, 15, 20]) cube([40, 30, 20]);\n    }\n    \n    // Drawer front handle\n    difference() {\n        cylinder(h = 4, d = 2.5);\n        translate([35, 15, 20]) cylinder(h = 2, d = 2.5);\n    }\n    \n    // Drawer sides\n    translate([-10, 15, 20]) cube([30, 30, 20]);\n    translate([10, 15, 20]) cube([30, 30, 20]);\n    \n    // Drawer back\n    difference() {\n        cube([35, 40, 20]);\n        translate([35, 15, 20]) cube([40, 30, 20]);\n    }\n    \n    // Drawer bottom\n    translate([-10, 15, 20]) cube([30, 30, 20]);\n}\n\n// Assemble the model\nunion() {\n    box_body();\n    hinges();\n    handle();\n    lid();\n    drawer();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "torus knot",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 70,
      "code": "// Torsion knot \u2013 realistic style, medium complexity\n// Dimensions scaled for 3D printing (approx. 80mm length)\n\n// Base parameters\nbase_length = 80;\nbase_diameter = 8;\nhead_diameter = 12;\nhead_height = 6;\ntwist_radius = 15;\ntwist_length = 80;\n\n// Main body\nmodule main_body() {\n    difference() {\n        // Outer cylinder\n        cylinder(h=base_length, d=base_diameter);\n        \n        // Inner hollow\n        translate([0,0,base_length/2])\n            cylinder(h=base_length, d=base_diameter - 2);\n    }\n}\n\n// Central twist\nmodule central_twist() {\n    difference() {\n        cylinder(h=twist_length, d=head_diameter);\n        translate([0,0,twist_length/2])\n            cylinder(h=twist_length - 1, d=head_diameter);\n    }\n}\n\n// Tapered end\nmodule tapered_end() {\n    difference() {\n        cylinder(h=base_length - 15, d=base_diameter * 0.7);\n        translate([0,0,base_length - 15])\n            cylinder(h=1, d=base_diameter * 0.7 - 1);\n    }\n}\n\n// Add texture for realism\nmodule texture() {\n    // Small bumps on surface\n    for(i=[0:5:10]) {\n        for(j=[0:4:10]) {\n            translate([i*base_diameter/2 - 1, j*base_diameter/2 - 1, 0])\n                sphere(d=0.5);\n        }\n    }\n    \n    // Small grooves\n    for(i=[0:3:9]) {\n        for(j=[0:4:10]) {\n            translate([i*base_diameter/2 + 1, j*base_diameter/2 + 1, 0])\n                cube([1, 1, 0.1]);\n        }\n    }\n}\n\n// Add texture to handle\nmodule handle_texture() {\n    difference() {\n        // Main handle\n        cylinder(h=base_length, d=base_diameter * 0.8);\n        \n        // Grip indentation\n        translate([0,0,base_length/2 - 5])\n            cylinder(h=0.5, d=base_diameter * 0.9);\n        \n        // Finger grooves\n        for(i=[0:3:5]) {\n            translate([i*4.5, 0, base_length/2 - 1])\n                rotate([0,90,0])\n                    cylinder(h=0.8, d=0.3);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    main_body();\n    \n    // Central twist\n    central_twist();\n    \n    // Tapered end\n    tapered_end();\n    \n    // Handle\n    handle_texture();\n    \n    // Texture\n    texture();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "pyramid with base",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 28,
      "code": "// Realistic-style 3D-Printable Model of a Viking Skink (Sea Serpent)\n\n// Overall dimensions for FDM printing\nskink_length = 60;\nskink_width = 30;\nskink_height = 25;\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main skink body\nmodule skink_body() {\n    difference() {\n        // Main elongated body\n        scale([1.2, 1, 1])\n            sphere(d = skink_length);\n        \n        // Add slight taper for organic shape\n        translate([0, 0, -skink_height/2])\n            scale([1.1, 1.1, 1.1])\n                sphere(d = skink_width);\n    }\n}\n\n// Head with nostrils\nmodule skink_head() {\n    translate([0, -skink_height/2, skink_height/2])\n    difference() {\n        scale([1.3, 1.3, 1.3])\n            sphere(d = skink_length);\n        \n        // Nostrils\n        translate([-skink_length/3, 0, 5])\n            scale([1.5, 1.5, 1.5])\n                sphere(d = 2);\n        \n        translate([skink_length/3, 0, 5])\n            scale([1.6, 1.6, 1.6])\n                sphere(d = 2);\n    }\n}\n\n// Wings with feathers\nmodule skink_wings() {\n    // Left wing\n    translate([-skink_width/2 - 5, -skink_height/3, 15])\n    rotate([0, -20, 0])\n    scale([0.8, 0.6, 0.3])\n    sphere(d = 10);\n    \n    // Right wing\n    translate([skink_width/2 + 5, -skink_height/3, 15])\n    rotate([0, -20, 0])\n    scale([0.8, 0.6, 0.3])\n    sphere(d = 10);\n    \n    // Feather details\n    for (i = [-1, 1]) {\n        translate([-skink_width/2 - 5, -skink_height/3 + 1, 15 - i * 2])\n        rotate([0, -20, 0])\n        scale([0.7, 0.5, 0.2])\n        sphere(d = 3);\n    }\n}\n\n// Tail with fins\nmodule skink_tail() {\n    translate([-skink_width/2 + 10, -skink_height/2 - 5, -skink_height/4])\n    rotate([0, 20, 0])\n    scale([1.1, 1, 0.8])\n    cylinder(d = 3, h = 6);\n    \n    // Fins\n    for (i = [0:3]) {\n        translate([-skink_width/2 + 25 - i * 15, -skink_height/2 - 5 + i * 5, -skink_height/4 + 15])\n        rotate([0, 20, 0])\n        scale([1, 0.9, 0.4])\n        cylinder(d = 1.5, h = 4);\n    }\n}\n\n// Scales on body\nmodule skink_scales() {\n    // Left scale\n    translate([0, -skink_height/4, -skink_height/4])\n    scale([1.1, 1, 0.8])\n    sphere(d = skink_length);\n    \n    // Right scale\n    translate([skink_length/2 - 10, -skink_height/4, -skink_height/4])\n    scale([1.1, 1, 0.8])\n    sphere(d = skink_length);\n}\n\n// Create the complete model\nunion() {\n    skink_body();\n    skink_head();\n    skink_wings();\n    skink_tail();\n    skink_scales();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "klein bottle",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 97,
      "code": "// OpenSCAD Klein Bottle Model - Medium Complexity\n// A realistic representation of the Klein bottle shape with functional details.\n\n// Overall dimensions for 3D printing\nbottle_height = 80;\nbottle_diameter = 45;\nwall_thickness = 1.5;\n\n// Wall thickness for structural integrity\nwall_thickness = 1.5;\n\nmodule bottle_body() {\n    difference() {\n        // Main bottle body\n        scale([1, 1, 0.9])\n            cylinder(h=bottle_height, r=bottle_diameter/2, $fn=64);\n        \n        // Hollow out center\n        scale([1.2, 1.2, 0.8])\n            cylinder(h=bottle_height*1.2, r=bottle_diameter/2 - wall_thickness, $fn=64);\n    }\n}\n\nmodule neck_cap() {\n    difference() {\n        // Cylindrical neck\n        cylinder(h=10, r1=bottle_diameter/2, r2=bottle_diameter/2 - 2*wall_thickness, $fn=32);\n        \n        // Cap opening\n        translate([0, 0, -1])\n            cylinder(h=2, r=bottle_diameter/2 - 1, $fn=32);\n    }\n}\n\nmodule shoulder_detail() {\n    // Triangular shoulder detail\n    difference() {\n        cube([30, 20, 10], center=true);\n        translate([wall_thickness/2, wall_thickness/2, -1])\n            cube([wall_thickness/2, wall_thickness/2, 10], center=true);\n    }\n}\n\nmodule bottle_base() {\n    // Bottom base\n    translate([0, 0, -0.1])\n        cylinder(h=2, r=bottle_diameter/2, $fn=64);\n}\n\n// Main assembly\nunion() {\n    // Base\n    translate([0, 0, -bottle_height/2 - 0.1])\n        bottle_base();\n    \n    // Neck\n    translate([0, 0, -bottle_height/2 - 2])\n        neck_cap();\n    \n    // Shoulder detail\n    translate([0, 0, -bottle_height/2])\n        shoulder_detail();\n    \n    // Body\n    difference() {\n        bottle_body();\n        translate([0, 0, -bottle_height/2 - 5])\n            neck_cap();\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "trefoil knot",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 54,
      "code": "// Trefoil Knot Tool - Realistic Style, Medium Complexity\n\n// Overall dimensions\nknot_length = 60;\nknot_width = 40;\nknot_height = 25;\n\n// Main trefoil module\nmodule trefoil_knot() {\n    // Base knot head\n    translate([0, 0, -knot_height/2]) {\n        cylinder(h = knot_height - 5, r1 = 12, r2 = 8, $fn = 16);\n    }\n\n    // Central hub\n    translate([0, 0, -knot_height/2 + 5]) {\n        cylinder(h = 3, r = 10, $fn = 16);\n    }\n\n    // Tapered sides\n    difference() {\n        // Outer tapered sides\n        taper_width = 3;\n        taper_height = 2;\n        translate([0, 0, 0]) {\n            for (i = [0:1:5]) {\n                translate([0, 0, i * taper_width]) {\n                    scale([1, 1, 1]) {\n                        cylinder(h = taper_height, r = 5, $fn = 16);\n                    }\n                }\n            }\n        }\n        \n        // Inner cutout for taper\n        difference() {\n            translate([0, 0, 0]) {\n                cylinder(h = 1, r = 4, $fn = 16);\n            }\n        }\n    }\n\n    // Tapered sides continue\n    difference() {\n        taper_width = 3;\n        taper_height = 2;\n        translate([0, 0, 0]) {\n            for (i = [0:1:5]) {\n                translate([0, 0, i * taper_width]) {\n                    scale([1, 1, 1]) {\n                        cylinder(h = taper_height, r = 5, $fn = 16);\n                    }\n                }\n            }\n        }\n        \n        // Inner cutout for taper\n        difference() {\n            translate([0, 0, 0]) {\n                cylinder(h = 1, r = 4, $fn = 16);\n            }\n        }\n    }\n\n    // Support rings\n    for (i = [0:1:6]) {\n        rotate([0, 0, i * 72]) {\n            difference() {\n                cylinder(h = 2, r = 8, $fn = 16);\n            }\n        }\n    }\n\n    // Small support for stability\n    translate([0, 0, -knot_height/2 - 1]) {\n        cylinder(h = 3, r = 6, $fn = 16);\n    }\n\n    // Optional small decorative detail\n    difference() {\n        cylinder(h = 0.5, r = 8, $fn = 16);\n        translate([0, 0, 0]) {\n            cylinder(h = 0.5, r = 6, $fn = 16);\n        }\n    }",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: ERROR: Parser error: syntax error in file evaluation/ThomasTheMaker_k-1b_20251029_161318/trefoil_knot.scad, line 87\nCan't parse file 'evaluation/ThomasTheMaker_k-1b_20251029_161318/trefoil_knot.scad'!",
      "vlm_response": null
    },
    {
      "object": "figure eight",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 74,
      "code": "// Figure Eight - Realistic style, medium complexity\n// Overall size: ~70mm tall, 30mm wide, 15mm deep\n\n$fn = 32;  // Smooth curves\n\nmodule figure_eight() {\n    // Main body - elongated oval\n    scale([1, 1.2, 0.8]) sphere(d = 20);\n\n    // Bottom flat plate\n    translate([0, 0, -10]) cube([40, 15, 4], center = true);\n\n    // Top flat plate\n    translate([0, 0, 10]) cube([40, 15, 4], center = true);\n\n    // Top edge plates\n    translate([0, 0, 5]) cube([10, 3, 1], center = true);\n    translate([0, 0, -5]) cube([10, 3, 1], center = true);\n\n    // Side plates\n    translate([30, 0, 0]) cube([10, 3, 3], center = true);\n    translate([-30, 0, 0]) cube([10, 3, 3], center = true);\n\n    // Central hub\n    translate([0, 0, 0]) cylinder(h = 3, r = 6, center = true);\n}\n\n// Optional: Add small decorative rivets\nmodule rivets() {\n    // Left rivet\n    translate([-15, -10, -5]) cube([2, 2, 2], center = true);\n    // Right rivet\n    translate([15, -10, -5]) cube([2, 2, 2], center = true);\n}\n\n// Assemble the figure eight\ndifference() {\n    // Main body\n    figure_eight();\n\n    // Add rivets\n    rivets();\n\n    // Hollow out bottom plate\n    translate([0, 0, -10]) cube([40, 15, 4], center = true);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "lissajous curve",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 12,
      "code": "// Lissajous curve with 3D-printable top surface\n// Medium complexity realistic Lissajous curve\n\n// Overall scale factor for printing\nscale_factor = 1;\n\n// Main Lissajous curve parameters\namplitude = 1.5;  // Peak height\nfrequency = 1;    // Frequency of oscillation\ndepth = 1.5;      // Depth of curve\nbase_thickness = 1; // Thickness of the base\nradius = 3;        // Radius at the base\noffset = 0;        // Offset from center for 3D printing\n\n// Base plate for printing\nmodule base_plate() {\n    difference() {\n        cylinder(h=base_thickness, r=radius, $fn=6);\n        cylinder(h=base_thickness + 1, r=radius - 0.1, $fn=6);\n    }\n}\n\n// Top surface with realistic details\nmodule top_surface() {\n    difference() {\n        // Main Lissajous surface\n        scale([1, 1.5, 1]) \n            linear_extrude(height=depth, scale=[1, 1, 1])\n                offset(offset)\n                    polygon([\n                        [0, 0],\n                        [amplitude * cos(frequency), amplitude * sin(frequency) * 2],\n                        [0, depth * 0.5],\n                        [0, -depth * 0.5]\n                    ]);\n        \n        // Cutout for realistic details\n        translate([0, 0, depth * 0.7])\n            scale([1.2, 1.2, 1.2])\n                linear_extrude(height=depth, scale=[1, 1, 1])\n                    offset(offset)\n                        polygon([\n                            [amplitude * cos(frequency) * 0.6, amplitude * sin(frequency) * 0.6],\n                            [amplitude * cos(frequency) * 0.5, amplitude * sin(frequency) * 0.5],\n                            [amplitude * cos(frequency) * 0.2, amplitude * sin(frequency) * 0.2],\n                            [amplitude * cos(frequency) * 0.1, amplitude * sin(frequency) * 0.1],\n                            [0, 0]\n                        ]);\n    }\n}\n\n// 3D-printable base\nmodule base_plate_print() {\n    difference() {\n        // Base plate with slight chamfer for printing\n        cylinder(h=base_thickness, r=radius, $fn=6);\n        cylinder(h=base_thickness + 0.2, r=radius - 0.2, $fn=6);\n        \n        // Add small relief detail\n        translate([0, 0, -0.1])\n            scale([0.8, 1.2, 0.8])\n                cube([0.5, 0.5, base_thickness + 0.2], center=true);\n    }\n}\n\n// Assemble the Lissajous curve\nunion() {\n    base_plate_print();\n    translate([0, 0, -base_thickness/2 + 0.1])\n        top_surface();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes."
    },
    {
      "object": "fractal tree",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 4,
      "code": "// Realistic medium-complexity tree model\n// Approx. 80mm tall, 45mm diameter, 20mm deep\n\n// Overall scale factor\nscale_factor = 1;\n\n// Module for base trunk\nmodule base_trunk() {\n    difference() {\n        cylinder(h=15, d=10, $fn=30);\n        translate([0,0,15]) cylinder(h=15, d=10, $fn=30);\n    }\n}\n\n// Module for tree trunk\nmodule tree_trunk() {\n    // Main trunk cylinder\n    cylinder(h=40, d=5, $fn=60);\n    // Branch angles (simplified as 20-degree angles)\n    for(angle=[0,120,240]) {\n        rotate([0,0,angle])\n            translate([0,0,45])\n                cylinder(h=20, d=4, $fn=20);\n    }\n}\n\n// Module for branching system\nmodule branches() {\n    // Central trunk\n    translate([0,0,0])\n        tree_trunk();\n\n    // Three main branches\n    for(i=[0:2]) {\n        angle = i * 30;\n        rotate([0,0,angle])\n            translate([0,0,45])\n                rotate([0,0,angle])\n                    cylinder(h=10, d=3, $fn=20);\n    }\n}\n\n// Module for leaves\nmodule leaves() {\n    // Central leaves\n    for(i=[0:3]) {\n        angle = i * 15;\n        rotate([0,0,angle])\n            translate([0,0,15])\n                sphere(d=1.5);\n    }\n}\n\n// Module for foliage details\nmodule foliage_details() {\n    // Small leaves on branches\n    for(i=[0:2]) {\n        angle = i * 20;\n        rotate([0,0,angle])\n            translate([0,0,15])\n                scale([1.2,1,0.8])\n                    sphere(d=0.7);\n    }\n}\n\n// Main assembly\nunion() {\n    base_trunk();\n    translate([0,0,0]) tree_trunk();\n    translate([0,0,0]) branches();\n    translate([0,0,0]) leaves();\n    foliage_details();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "mandelbrot shape",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 4,
      "code": "// Realistic Medium-Complexity 3D-Printable Mandlebrot\n// Overall dimensions ~80 x 60 x 25 mm\n\n// Wall thickness for 2 mm walls\nwall = 2;\n\n// Base plate\nmodule plate() {\n    difference() {\n        cube([80, 60, 2]);\n        translate([0, 0, 0.1]) cube([80 - 2*wall, 60 - 2*wall, 2.2]);\n    }\n}\n\n// Main body\nmodule main_body() {\n    difference() {\n        // Outer shell\n        translate([0, 0, 2]) cube([60, 60, 30]);\n\n        // Hollow cavity for material savings\n        translate([0, 0, 2.2]) cube([58, 58, 26]);\n    }\n\n    // Main head\n    translate([0, 0, 52]) {\n        union() {\n            // Neck\n            cylinder(h=8, r1=15, r2=12);\n            // Middle section\n            translate([0, 0, 12]) cylinder(h=10, r1=15, r2=12);\n            // Top dome\n            translate([0, 0, 30]) sphere(d=15, $fn=20);\n            // Base\n            translate([0, 0, -10]) cube([20, 20, 10]);\n        }\n    }\n\n    // Neck extension\n    translate([0, 0, -1]) {\n        cylinder(h=6, r1=16, r2=14);\n    }\n\n    // Main body cavity\n    translate([0, 0, 30]) cube([60, 60, 25]);\n}\n\n// Mouth cavity\nmodule mouth() {\n    difference() {\n        translate([0, 0, 40]) cube([50, 50, 15]);\n        translate([0, 0, 0]) cube([48, 48, 17]);\n    }\n}\n\n// Jaw\nmodule jaw() {\n    difference() {\n        translate([0, 0, 55]) cube([45, 45, 12]);\n        translate([0, 0, -0.1]) cube([43, 43, 12.2]);\n    }\n\n    // Jaw line\n    translate([0, 0, 55]) {\n        cube([45, 45, 2]);\n    }\n}\n\n// Mandlebrot tip\nmodule mandlebrot() {\n    difference() {\n        translate([0, 0, 55]) cube([48, 48, 8]);\n        translate([0, 0, 10]) cube([44, 44, 6]);\n    }\n}\n\n// Optional support ribs underneath\nmodule ribs() {\n    for (i = [0:3]) {\n        translate([i * 30, 0, 15]) {\n            cube([2, 2, 2]);\n            translate([0, 0, -1.5]) cube([2, 2, 2.5]);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    plate();\n    main_body();\n    mouth();\n    jaw();\n    mandelbrot();\n    ribs();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "fractal branch",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 10,
      "code": "// Realistic Medium-Complexity Realistic Model of a Giant Oak Tree\n// Designed for 3D printing with no steep overhangs and 2mm wall thickness\n\n// Overall scale factor for easier manipulation\nscale_factor = 1;\n\n// Main trunk dimensions\ntrunk_diameter = 12;\ntrunk_height = 15;\ntrunk_radius = 5;\n\n// Branches with realistic branch taper\nbranch_radius = 2;\nbranch_height = 60;\n\n// Leaves with realistic texture\nleaf_radius = 1.5;\nleaf_height = 20;\n\n// Bark texture with subtle ridges\nbark_thickness = 1;\n\nmodule main_trunk() {\n    difference() {\n        cylinder(d = trunk_diameter, h = trunk_height, $fn = 64);\n        translate([0, 0, -trunk_radius])\n            cylinder(d = trunk_radius * 1.2, h = trunk_height, $fn = 64);\n    }\n}\n\nmodule main_branches() {\n    // Top trunk\n    cylinder(d1 = trunk_diameter * 0.8, d2 = trunk_diameter * 0.7, h = trunk_height, $fn = 64);\n    \n    // Middle trunk\n    translate([0, 0, trunk_height * 0.4])\n        cylinder(d = trunk_diameter * 0.7, h = trunk_height * 0.3, $fn = 64);\n    \n    // Lower trunk\n    translate([0, 0, -trunk_height * 0.4])\n        cylinder(d = trunk_diameter * 0.7, h = trunk_height * 0.25, $fn = 64);\n}\n\nmodule leaves() {\n    // Central leaf\n    difference() {\n        sphere(d = leaf_radius * 1.2);\n        translate([0, 0, -leaf_height * 0.3])\n            sphere(d = leaf_radius * 0.8);\n    }\n    \n    // Lower leaves\n    for (i = [0:30:150]) {\n        rotate([0, 0, i * 45])\n            translate([leaf_radius * 0.3, 0, 0])\n                sphere(d = leaf_radius * 0.8);\n    }\n    \n    // Upper leaves (simplified)\n    for (i = [0:30:150]) {\n        rotate([0, 0, i * 45])\n            translate([leaf_radius * 0.3, 0, 0])\n                sphere(d = leaf_radius * 0.8);\n    }\n}\n\nmodule bark() {\n    // Bark texture along trunk\n    for (i = [0:20:100]) {\n        translate([0, 0, i])\n            difference() {\n                cylinder(d = trunk_diameter * 0.9, h = 1, $fn = 32);\n                scale([0.8, 0.8, 0.8])\n                    cylinder(d = trunk_diameter * 0.7, h = 2, $fn = 32);\n            }\n    }\n}\n\nmodule roots() {\n    // Small root system\n    for (i = [0:30:150]) {\n        rotate([0, 0, i * 45])\n            translate([0, 0, -trunk_diameter * 0.2])\n                cylinder(d = 1.5, h = 3, $fn = 16);\n    }\n}\n\nmodule leaves_texture() {\n    // Subtle leaf ridges\n    for (i = [0:20:150]) {\n        rotate([0, 0, i * 45])\n            translate([leaf_radius * 0.3, 0, 0])\n                scale([0.7, 0.7, 0.7])\n                    sphere(d = leaf_radius * 0.6);\n    }\n}\n\n// Combine all elements\nunion() {\n    // Main tree body\n    main_trunk();\n    \n    // Branches\n    main_branches();\n    \n    // Leaves\n    leaves();\n    \n    // Bark\n    bark();\n    \n    // Root system\n    roots();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "mobius strip",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 76,
      "code": "// Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic 3D-Printable Realistic",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: Geometries in cache: 1\nGeometry cache size in bytes: 0\nCGAL Polyhedrons in cache: 0\nCGAL cache size in bytes: 0\nTotal rendering time: 0:00:00.000\nCurrent top level object is empty.\n",
      "vlm_response": null
    },
    {
      "object": "sierpinski triangle",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 1,
      "code": "// Sizerin - a traditional Japanese drum\n// Medium complexity realistic model for 3D printing\n\n// Overall dimensions\nbody_length = 80;\nbody_width = 40;\nbody_height = 25;\nhead_length = 30;\nhead_diameter = 15;\nmouth_diameter = 12;\nmouth_height = 8;\nwall_thickness = 2;\n\n// Colors\nbody_color = [0.95, 0.92, 0.85];\nhead_color = [0.1, 0.1, 0.1];\nmouth_color = [0.85, 0.7, 0.6];\n\n// Main module\nmodule sizerin() {\n    union() {\n        // Main body with cylindrical shape\n        difference() {\n            cylinder(h=body_height, d=body_width, $fn=64);\n            // Hollow out the body\n            cylinder(h=body_height - wall_thickness, d=body_width - 2*wall_thickness, $fn=64);\n        }\n\n        // Head with rounded top\n        translate([0, 0, body_height * 0.6])\n            cylinder(h=head_length, d=head_diameter, $fn=64);\n\n        // Mouth cavity\n        translate([body_width/2 - mouth_diameter/2, 0, body_height * 0.6])\n            difference() {\n                cylinder(h=mouth_height, d=mouth_diameter, $fn=64);\n                cylinder(h=mouth_height - wall_thickness, d=mouth_diameter - 2*wall_thickness, $fn=64);\n            }\n\n        // Drumhead\n        translate([0, 0, body_height * 0.6])\n            cylinder(h=head_length, d=head_diameter, $fn=64);\n    }\n}\n\n// Create the head\nmodule head() {\n    difference() {\n        cylinder(h=head_length, d=head_diameter, $fn=64);\n        cylinder(h=head_length - 2*wall_thickness, d=head_diameter - 2*wall_thickness, $fn=64);\n        // Hollow out head\n        cylinder(h=head_length, d=head_diameter - 2*wall_thickness, $fn=64);\n    }\n}\n\n// Create the drums with different sizes\nmodule drums() {\n    // Outer drum\n    difference() {\n        cylinder(h=body_height * 0.5, d=body_width, $fn=64);\n        cylinder(h=body_height * 0.3, d=body_width - 2*wall_thickness, $fn=64);\n    }\n\n    // Inner drum\n    difference() {\n        cylinder(h=body_height * 0.3, d=body_width - 2*wall_thickness, $fn=64);\n        cylinder(h=body_height * 0.25, d=body_width - 2*wall_thickness, $fn=64);\n    }\n\n    // Mouth cavity\n    translate([body_width/2 - mouth_diameter/2, 0, body_height * 0.5])\n        difference() {\n            cylinder(h=mouth_height, d=mouth_diameter, $fn=64);\n            cylinder(h=mouth_height - wall_thickness, d=mouth_diameter - 2*wall_thickness, $fn=64);\n        }\n}\n\n// Scale the drums to the correct size\nscale([1, 1, 1]) {\n    scale([body_width * 0.3, body_width * 0.3, body_height * 0.3])\n        drums();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "tetrahedron",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 1,
      "code": "// OpenSCAD Code for a realistic-style 3D-printable tetrahedron\n\n// Overall dimensions for printing\nscale_factor = 1;           // Scale to 1:1\nheight = 30;               // Total height\nbase_diameter = 25;         // Base diameter\nbase_thickness = 5;         // Base thickness\nwall_thickness = 2;          // All walls thickness\n\n// Base platform\nmodule base_platform() {\n    difference() {\n        cylinder(h=wall_thickness, d=base_diameter);\n        translate([0,0,wall_thickness/2]) cylinder(h=wall_thickness, d=base_diameter);\n    }\n}\n\n// Triangular faces\nmodule triangular_faces() {\n    // Top triangular face\n    translate([0, 0, height/2 - base_thickness/2])\n        cube([base_diameter, base_diameter, 2], center=true);\n    \n    // Bottom triangular face\n    translate([0, 0, height/2 - base_thickness/2])\n        cube([base_diameter, base_diameter, 2], center=true);\n}\n\n// Side faces\nmodule side_faces() {\n    // Left face\n    translate([0, base_diameter/2, -height/2])\n        cube([base_diameter, height, base_diameter], center=true);\n    \n    // Right face\n    translate([0, -base_diameter/2, -height/2])\n        cube([base_diameter, height, base_diameter], center=true);\n}\n\n// Central cavity for printing\nmodule central_cavity() {\n    difference() {\n        cylinder(h=wall_thickness + 1, d=base_diameter - 2 * wall_thickness);\n        translate([0, 0, -1]) cylinder(h=wall_thickness + 2, d=base_diameter - 4 * wall_thickness);\n    }\n}\n\n// Wall thickness for 3D printing\nmodule wall_thickness() {\n    scale([1,1,1])\n        cube([base_diameter - wall_thickness * 2, base_diameter - wall_thickness * 2, height - wall_thickness * 2], center=true);\n}\n\n// Assembly\nunion() {\n    // Base\n    base_platform();\n    \n    // Triangular faces\n    translate([0, 0, height/2 - base_thickness/2]) triangular_faces();\n    translate([0, 0, height/2 - base_thickness/2]) triangular_faces();\n    \n    // Side faces\n    side_faces();\n    \n    // Central cavity\n    central_cavity();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "octahedron",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 97,
      "code": "// Octagonal chair (realistic style, medium complexity)\n\n// Overall dimensions\nchair_height = 80;\nseat_width = 70;\nseat_depth = 60;\nleg_height = 45;\nwall_thickness = 2;\n\n// Main chair body\nmodule chair_body() {\n    difference() {\n        // Outer shell\n        cube([seat_width, seat_depth, chair_height], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 2])\n        cube([seat_width - 4, seat_depth - 4, chair_height - 2], center=true);\n    }\n}\n\n// Support legs with wheels\nmodule chair_legs() {\n    // Front left leg\n    translate([-seat_width/2, -seat_depth/2, -chair_height/2 + leg_height/2])\n    rotate([0, 15, 0])\n    cylinder(h=leg_height, r1=4, r2=5, center=true);\n    \n    // Front right leg\n    translate([-seat_width/2, seat_depth/2, -chair_height/2 + leg_height/2])\n    rotate([0, 15, 0])\n    cylinder(h=leg_height, r1=4, r2=5, center=true);\n    \n    // Back left leg\n    translate([seat_width/2, -seat_depth/2, -chair_height/2 + leg_height/2])\n    rotate([0, 15, 0])\n    cylinder(h=leg_height, r1=4, r2=5, center=true);\n    \n    // Back right leg\n    translate([seat_width/2, seat_depth/2, -chair_height/2 + leg_height/2])\n    rotate([0, 15, 0])\n    cylinder(h=leg_height, r1=4, r2=5, center=true);\n}\n\n// Seat cushion with rounded edges\nmodule chair_seat() {\n    difference() {\n        // Main seat shape\n        translate([0, 0, chair_height/2])\n        cube([seat_width, seat_depth, 8], center=true);\n        \n        // Rounded edges\n        for(x = [-seat_width/2 + 2, seat_width/2 - 2])\n        for(y = [-seat_depth/2 + 2, seat_depth/2 - 2])\n        translate([x, y, 2])\n        sphere(r=4);\n    }\n}\n\n// Backrest with slats\nmodule chair_backrest() {\n    difference() {\n        // Main backrest\n        translate([0, -seat_depth/2 + 4, chair_height/2 - 4])\n        cube([seat_width - 8, 4, 20], center=true);\n        \n        // Slats\n        for(z = [10:15:chair_height/2 - 5])\n        for(x = [-seat_width/2 + 2, seat_width/2 - 2])\n        translate([x, 0, z])\n        cube([1, 2, 4], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    chair_body();\n    chair_legs();\n    chair_seat();\n    chair_backrest();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "dodecahedron",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 91,
      "code": "// Realistic 3D-printable model of a dodecahedron (12-sided regular polyhedron)\n// Overall footprint \u2248 85 mm, printable without supports\n\n// Main body\ndifference() {\n    scale([1.2, 0.8, 0.6]) sphere(d = 45);\n    translate([0, 0, 5]) cube([85, 45, 40]);\n}\n\n// Triangular faces (triangular cutouts)\nfor (x = [-30, 30]) {\n    for (y = [-25, 25]) {\n        translate([x, y, 0]) difference() {\n            scale([1.2, 1.2, 0.8]) sphere(d = 35);\n            translate([0, 0, 5]) cube([30, 30, 20]);\n        }\n    }\n}\n\n// Cut edges for triangular cuts\n// Top face\ndifference() {\n    translate([0, 0, 40]) rotate([0, 90, 0]) cube([80, 40, 5]);\n    translate([0, 0, 42]) cube([76, 36, 3]);\n}\n\n// Bottom face\ndifference() {\n    translate([0, 0, -42]) rotate([0, 90, 0]) cube([80, 40, 5]);\n    translate([0, 0, -44]) cube([76, 36, 3]);\n}\n\n// Sides\ndifference() {\n    translate([-25, -22, 0]) cube([40, 40, 20]);\n    translate([25, 22, 0]) cube([40, 40, 20]);\n    translate([-25, 22, 0]) cube([40, 40, 20]);\n    translate([25, 22, 0]) cube([40, 40, 20]);\n}\n\n// Bottom face\ndifference() {\n    translate([0, 0, -10]) cube([40, 40, 20]);\n    translate([0, 0, -10]) cube([40, 40, 20]);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "icosahedron",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 96,
      "code": "// 16-sided Regular Polygon (Regular Hexagonal Prism)\n// A simple icosahedron with 16 equilateral triangular faces\n// Each face is a regular hexagon with side length 10.\n\n// Parameters\nside = 10;           // Length of each side of the regular hexagon\nh = 1;                // Height of the prism (height of polygon)\n\n// Main polygon body\npolygon_offset = side * 1.5;  // Offset to avoid overlap\ndifference() {\n    // Outer hexagon shape\n    linear_extrude(height = h, convexity = 10)\n        polygon(points = [\n            [0,0],\n            [side,0],\n            [side*1.5, side*1.5],\n            [side*1.5*1.5, side*1.5*1.5],\n            [side*1.5*1.5, side*1.5*1.5*1.5],\n            [side*1.5*1.5*1.5, 0],\n            [0,0]\n        ]);\n\n    // Hollow out the center\n    translate([0, 0, 0])\n        difference() {\n            linear_extrude(height = h, convexity = 10)\n                polygon(points = [\n                    [0,0],\n                    [side,0],\n                    [side*1.5, side*1.5],\n                    [side*1.5*1.5, side*1.5*1.5],\n                    [side*1.5*1.5, side*1.5*1.5*1.5],\n                    [0,0]\n                ]);\n        }\n}\n\n// Add small support struts between faces\nmodule struts()\n    difference() {\n        translate([0, 0, h/2])\n            cube([side, side, h/2]);\n        translate([side*0.4, 0, h/2])\n            cube([side*0.6, side*0.6, h/2]);\n    }\n\n// Generate struts for structural support\nstruts();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "truncated tetrahedron",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 21,
      "code": "// Tapered cylinder with rounded ends\ncylinder(h = 10, r = 8, $fn = 60);\n\n// Rounded ends with simple spheres\nunion() {\n    translate([0, 0, -1]) sphere(r = 8);\n    translate([0, 0, 10]) sphere(r = 8);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "cube",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 37,
      "code": "// Realistic 3D-print model of a medium-complexity 3D-printed toy figure \u2013 a stylized dragon with wings, legs, and claws\n// Overall height ~80 mm, designed for FDM 3D printing, 2mm wall thickness, no supports\n\n$fn = 36;  // Medium polygon count for smooth curves\n\nmodule dragon() {\n    // Main body - elongated ellipsoid with tapered ends\n    difference() {\n        // Outer body - flattened ellipsoid\n        hull() {\n            scale([1.5, 1.2, 1]) sphere(r = 20);  // Rounded ellipsoid\n            // Tail taper\n            translate([0, 0, -5]) sphere(r = 15);\n        }\n        // Hollow cavity for saving material\n        scale([1.3, 1.1, 1.05]) sphere(r = 18);\n    }\n    // Head\n    translate([0, 0, 12]) {\n        sphere(r = 12);\n    }\n    // Snout\n    translate([0, 0, 15]) {\n        scale([0.8, 1.2, 0.9]) sphere(r = 8);\n    }\n    // Neck\n    translate([-5, 0, 17]) {\n        scale([0.6, 0.8, 0.7]) sphere(r = 10);\n    }\n    // Wings\n    // Left wing (angled)\n    translate([-5, -15, 45]) {\n        rotate([0, -20, 0]) {\n            scale([0.5, 0.6, 0.8]) sphere(r = 12);\n            translate([0, 0, 0]) {\n                cube([30, 20, 2], center = true);\n            }\n        }\n    }\n    // Right wing (mirrored)\n    mirror([0, 20, 0]) {\n        translate([-5, -15, 45]) {\n            rotate([0, 20, 0]) {\n                scale([0.5, 0.6, 0.8]) sphere(r = 12);\n                translate([0, 0, 0]) {\n                    cube([30, 20, 2], center = true);\n                }\n            }\n        }\n    }\n    // Legs\n    module leg() {\n        difference() {\n            union() {\n                // Upper leg\n                translate([0, 0, -20]) sphere(r = 4);\n                // Lower leg\n                translate([0, 0, -30]) sphere(r = 3);\n                // Hind foot\n                translate([0, 0, -45]) sphere(r = 3);\n            }\n            // Hollow out for 3D printing\n            scale([0.8, 0.8, 0.7]) sphere(r = 2);\n        }\n        for(side = [-1, 1]) {\n            for(pos = [0, 30, -30]) {\n                translate([pos, 0, -20]) leg();\n            }\n        }\n    }\n    // Claws\n    module claw() {\n        scale([1.2, 1, 0.8]) sphere(r = 2);\n    }\n    // Tail\n    translate([0, 0, -45]) {\n        scale([1.3, 1.1, 1]) sphere(r = 11);\n    }\n    // Eyes\n    difference() {\n        sphere(r = 3);\n        translate([0, 0, -2]) sphere(r = 1.5);\n    }\n}\n\n// Position for printing\nscale([1.25, 1.15, 1]) dragon();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "cuboctahedron",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 55,
      "code": "// OpenSCAD Cuboctahedron - realistic medium complexity\n\n// Overall dimensions\nscale_factor = 1;\nwall_thickness = 1.5;\nheight = 60;\n\n// Main body\nmodule body() {\n    difference() {\n        // Outer cube\n        cube([scale_factor * 8, scale_factor * 8, height], center=true);\n        \n        // Inner cavity for 3D printing\n        cube([scale_factor * 7.5, scale_factor * 7.5, height - 2], center=true);\n        \n        // Hollow out inside\n        translate([0, 0, -1])\n        scale([1, 1, 1])\n        cube([scale_factor * 7.5, scale_factor * 7.5, height - 2], center=true);\n    }\n}\n\n// Top and bottom faces\nmodule top() {\n    difference() {\n        // Main top face\n        translate([0, 0, height/2 - 1])\n        cube([scale_factor * 7.5, scale_factor * 7.5, height/2], center=true);\n        \n        // Cutouts for 3D printing\n        translate([0, 0, height/2 - 1])\n        cube([scale_factor * 7.5, scale_factor * 7.5, height/2 - 1], center=true);\n        \n        // Bottom face\n        translate([0, 0, -height/2 + 1])\n        cube([scale_factor * 7.5, scale_factor * 7.5, height/2], center=true);\n    }\n}\n\n// Side faces\nmodule sides() {\n    difference() {\n        // Main side faces\n        for (x = [-1, 1]) {\n            translate([x * scale_factor, 0, 0])\n            difference() {\n                cube([scale_factor * 8, scale_factor * 8, height], center=true);\n                translate([0, 0, 0.5])\n                scale([1, 1, 0.5])\n                cube([scale_factor * 7.5, scale_factor * 7.5, height], center=true);\n            }\n        }\n        \n        // Hollow out for 3D printing\n        translate([0, 0, 0.5])\n        cube([scale_factor * 7.5, scale_factor * 7.5, height - 2], center=true);\n        \n        // Bottom face\n        translate([0, 0, -height/2 + 1])\n        cube([scale_factor * 7.5, scale_factor * 7.5, height/2], center=true);\n    }\n}\n\n// Central support ring\nmodule ring() {\n    difference() {\n        cylinder(h=wall_thickness, r=scale_factor * 3.5, center=true);\n        translate([0, 0, -1])\n        cylinder(h=wall_thickness + 1, r=scale_factor * 3.5, center=true);\n    }\n}\n\n// Base mounting\nmodule base() {\n    difference() {\n        cylinder(h=wall_thickness, r=scale_factor * 3.5, center=true);\n        translate([0, 0, -1])\n        cylinder(h=wall_thickness + 1, r=scale_factor * 3.5, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    top();\n    sides();\n    ring();\n    base();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "truncated octahedron",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 61,
      "code": "// Octahedron with rounded edges and small extrusion\ndifference() {\n    // Main octagonal prism\n    linear_extrude(height = 40, scale = [1, 1], center = true)\n        polygon(points = [[-40, -20], [-40, -10], [0, 0], [40, 0], [40, 20]]);\n    \n    // Rounded top edges\n    translate([0, 0, 40])\n        sphere(d = 40, $fn = 32);\n    translate([0, 0, -40])\n        sphere(d = 40, $fn = 32);\n    \n    // Bottom rounded edges\n    translate([0, 0, -30])\n        sphere(d = 40, $fn = 32);\n    translate([0, 0, 30])\n        sphere(d = 40, $fn = 32);\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: ERROR: The given mesh is not closed! Unable to convert to CGAL_Nef_Polyhedron.\nGeometries in cache: 7\nGeometry cache size in bytes: 355520\nCGAL Polyhedrons in cache: 1\nCGAL cache size in bytes: 0\nTota",
      "vlm_response": null
    },
    {
      "object": "truncated cube",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 65,
      "code": "// Medium-complexity realistic furniture item \u2013 a wooden stool with cushion and legs\n// Overall height \u2248 120 mm, length \u2248 100 mm, width \u2248 60 mm\n\n// Parameters\nleg_height = 45;           // Height of each stool leg\nleg_width = 30;             // Width of each stool leg\nseat_thickness = 12;      // Thickness of stool seat\nseat_width = 80;            // Width of stool seat\nseat_depth = 50;            // Depth of stool seat\ncushion_thickness = 8;    // Thickness of cushion on seat\ncushion_width = 70;         // Width of cushion\ncushion_height = 10;        // Height of cushion\nwall_thickness = 2;       // Wall thickness of all pieces\n\n// Main stool module\nmodule stool() {\n    difference() {\n        // Seat\n        difference() {\n            translate([0, 0, seat_thickness/2]) cube([seat_width, seat_depth, seat_thickness], center=true);\n            translate([0, 0, seat_thickness/2 - 0.5]) cube([seat_width - 2 * wall_thickness, seat_depth - 2 * wall_thickness, seat_thickness - 0.5], center=true);\n        }\n\n        // Cushion\n        translate([0, 0, seat_thickness/2 + 1]) cube([seat_width - 4 * wall_thickness, seat_depth - 4 * wall_thickness, cushion_height], center=true);\n\n        // Legs (4 total)\n        for (x = [-20, 0, 20]) {\n            for (y = [-10, 0, 10]) {\n                translate([x * leg_width/2, y * leg_width/2, 0]) {\n                    cylinder(h = leg_height, d = leg_width, center=true);\n                }\n            }\n        }\n\n        // Corner braces (2 total)\n        for (z = [-30, 30]) {\n            translate([0, 0, z]) cube([wall_thickness, wall_thickness, wall_thickness*2], center=true);\n        }\n    }\n}\n\n// Decorative corner braces\nmodule corner_brace() {\n    difference() {\n        cube([wall_thickness, wall_thickness, wall_thickness*2]);\n        translate([0, 0, -1]) cube([wall_thickness + 0.1, wall_thickness - 1, wall_thickness*2 - 0.1]);\n    }\n}\n\n// Assembly\nmodule assembled_stool() {\n    difference() {\n        // Seat\n        translate([0, 0, -seat_thickness/2 + 1]) cube([seat_width, seat_depth, seat_thickness], center=true);\n\n        // Cushion\n        translate([0, 0, -seat_thickness/2 + 1 + 1]) cube([seat_width - 4 * wall_thickness, seat_depth - 4 * wall_thickness, cushion_height], center=true);\n\n        // Legs\n        translate([0, 0, -leg_height/2 - 5]) corner_brace();\n        translate([0, 0, -leg_height/2 - 5]) mirror([1, 0, 0]) corner_brace();\n        translate([0, 0, -leg_height/2 - 5]) corner_brace();\n\n        // Cushion edges\n        translate([0, 0, -seat_thickness/2 + 1]) cube([seat_width - 4 * wall_thickness, seat_depth - 4 * wall_thickness, cushion_height - 0.5], center=true);\n        translate([0, 0, -seat_thickness/2 + 1 + 0.1]) cube([seat_width - 4 * wall_thickness, seat_depth - 4 * wall_thickness, cushion_height - 0.5], center=true);\n    }\n\n    // Corner braces\n    corner_brace();\n    mirror([1, 0, 0]) corner_brace();\n    mirror([0, 1, 0]) corner_brace();\n    mirror([0, 0, 1]) corner_brace();\n}\n\n// Render the stool\nassembled_stool();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "symmetrical star",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 8,
      "code": "// Star model - medium complexity, realistic style\n// Dimensions: ~80mm diameter, 25mm thick\n\n$fn = 32;  // Smooth curves\n\nmodule star_base() {\n    // Central sphere\n    sphere(d = 12, $fn = 32);\n    \n    // Top sphere\n    translate([0, 0, 8]) sphere(d = 12, $fn = 32);\n}\n\nmodule star_points() {\n    // Five points around central sphere\n    for(angle = [0:5:360]) {\n        rotate([0, 0, angle]) {\n            translate([0, 0, 20]) {\n                scale([1, 0.5, 0.7]) sphere(d = 3, $fn = 32);\n            }\n        }\n    }\n}\n\nmodule star_tail() {\n    // Central cone\n    cylinder(h = 15, r1 = 4, r2 = 4, $fn = 32);\n    \n    // Bottom tip\n    translate([0, 0, -15]) sphere(d = 6, $fn = 32);\n}\n\nmodule star_details() {\n    // Star center\n    translate([0, 0, 0]) {\n        sphere(d = 4, $fn = 32);\n    }\n    \n    // Star edges\n    translate([1, 0, 0]) {\n        linear_extrude(height = 2) [\n            scale([1, 0.5, 0.5]) circle(r = 2, $fn = 32);\n        ];\n    }\n    \n    // Star points\n    for(angle = [0:5:360]) {\n        rotate([0, 0, angle]) {\n            translate([0, 0, 20]) {\n                scale([1, 0.5, 0.7]) sphere(d = 3, $fn = 32);\n            }\n        }\n    }\n}\n\nmodule star() {\n    union() {\n        star_base();\n        star_points();\n        star_tail();\n        star_details();\n    }\n}\n\n// Create the complete star\nunion() {\n    star();\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: ERROR: Parser error: syntax error in file evaluation/ThomasTheMaker_k-1b_20251029_161318/symmetrical_star.scad, line 41\nCan't parse file 'evaluation/ThomasTheMaker_k-1b_20251029_161318/symmetrical_sta",
      "vlm_response": null
    },
    {
      "object": "radial pattern",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 30,
      "code": "// Realistic 3D-printable cube with medium-detail features\n// Scale factor: 1:1, 3D-printable height \u2248 120 mm\n\n$fn = 36;          // Medium smoothness for good printability\n\nmodule cube() {\n    // Main 3D-printable cube body\n    difference() {\n        cube([120, 120, 120]);          // Overall height \u2248 120 mm\n        \n        // Rounded top face\n        translate([0, 0, 60])\n            scale([1, 1, 1])\n            sphere(d = 120);\n        \n        // Bottom face\n        translate([0, 0, -60])\n            scale([1, 1, 1])\n            sphere(d = 120);\n    }\n    \n    // Central hole for threaded rod\n    cylinder(h = 40, d = 6, center = false);\n    \n    // Flat base plate\n    translate([0, 0, -40])\n        cube([120, 120, 4], center = true);\n    \n    // Mounting holes (4x4 mm diameter)\n    for (x = [1:3]) {\n        for (y = [1:3]) {\n            translate([x * 60, y * 60, 0])\n                cylinder(h = 10, d = 4, center = false);\n        }\n    }\n}\n\ncube();",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: WARNING: Too many unnamed arguments supplied in file radial_pattern.scad, line 9\nWARNING: Too many unnamed arguments supplied in file radial_pattern.scad, line 9\nWARNING: Too many unnamed arguments su",
      "vlm_response": null
    },
    {
      "object": "julia set",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 52,
      "code": "// Realistic 3D-printable Jukebox \u2013 medium complexity\n// Overall footprint ~80mm x 50mm x 45mm\n\n$fn = 30;          // Smooth curves\nwall = 2;           // Printable wall thickness\n\n// Base with rounded edges\nmodule base() {\n    difference() {\n        cube([80, 50, 40], center=true);\n        translate([0, 0, 5]) cube([80-4, 50-4, 40-4], center=true);\n    }\n}\n\n// Main unit body \u2013 hollowed-out rectangular box\nmodule main_body() {\n    difference() {\n        cube([70, 45, 35], center=true);\n        translate([0, 0, 0]) cube([70-4, 45-4, 35-4], center=true);\n    }\n}\n\n// Control panel with buttons, knobs, and screen\nmodule control_panel() {\n    // Panel base\n    difference() {\n        cube([50, 35, 15], center=true);\n        translate([0, 0, -5]) cube([50-4, 35-4, 15-4], center=true);\n    }\n    // Buttons\n    for (x = [-20, -10, 0, 10, 20]) {\n        translate([x, 12, 4]) {\n            cylinder(h=3, d=8, center=true);\n        }\n    }\n    // Knobs\n    for (y = [-15, -7.5, -2.5, 2.5, 10]) {\n        translate([5, y, 0]) {\n            cylinder(h=2, d=6, center=true);\n        }\n    }\n    // Screen\n    difference() {\n        translate([0, 18, 12]) cube([55, 3, 15], center=true);\n        translate([0, 18, 12]) cube([55-4, 3-4, 15-4], center=true);\n    }\n}\n\n// Speakers\nmodule speakers() {\n    for (x = [-20, -10, 0, 10, 20]) {\n        for (y = [-15, -7.5, -2.5, 2.5, 10]) {\n            translate([x, y, 12]) {\n                sphere(d=5, center=true);\n            }\n        }\n    }\n}\n\n// Power cord\nmodule power_cord() {\n    difference() {\n        cylinder(h=10, d=3, center=true);\n        translate([0, 0, -1]) cylinder(h=10, d=3.5, center=true);\n    }\n}\n\n// Top support rails\nmodule support_rails() {\n    for (x = [-20, -10, 0, 10, 20]) {\n        for (z = [-20, -10, 0, 10, 20]) {\n            translate([x, 0, z]) {\n                cube([2, 4, 2], center=true);\n            }\n        }\n    }\n}\n\n// Front support bar\nmodule front_support() {\n    difference() {\n        cube([40, 30, 2], center=true);\n        translate([0, 0, 1]) cube([40-4, 30-4, 2-4], center=true);\n    }\n}\n\n// USB port\nmodule usb_port() {\n    difference() {\n        cylinder(h=2, d=6, center=true);\n        translate([0, 0, -1]) cylinder(h=2, d=5.5, center=true);\n    }\n}\n\n// Legs\nmodule legs() {\n    for (x = [-20, -10, 0, 10, 20]) {\n        for (z = [-20, -10, 0, 10, 20]) {\n            translate([x, 0, z]) {\n                cylinder(h=2, d=15, center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    main_body();\n    control_panel();\n    speakers();\n    power_cord();\n    support_rails();\n    front_support();\n    usb_port();\n    legs();\n}",
      "inference_error": null,
      "render_error": "Rendering timeout (>60s)",
      "vlm_response": null
    },
    {
      "object": "concentric rings",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 85,
      "code": "// Realistic 3D-printable side-view bookshelf unit\n// Dimensions: 120mm x 40mm x 45mm\n\n$fn = 36;  // Medium polygon count for smooth curves\n\nmodule side_view_unit() {\n    // Main unit body\n    difference() {\n        cube([120, 40, 45]);\n        \n        // Front face detail\n        translate([20, 0, 20]) cube([10, 30, 35]);\n        \n        // Side panels\n        translate([-40, 0, 20]) cube([40, 40, 45]);\n        translate([40, 0, 20]) cube([40, 40, 45]);\n        \n        // Back panel\n        translate([0, 0, -20]) cube([120, 40, 45]);\n        \n        // Bottom shelf\n        translate([0, 0, -20]) cube([120, 40, 45]);\n        \n        // Middle shelf\n        translate([0, 20, 0]) cube([120, 40, 45]);\n        \n        // Top shelf\n        translate([0, 20, 45]) cube([120, 40, 45]);\n        \n        // Front panel detail\n        translate([20, 0, 45]) cube([10, 30, 35]);\n        \n        // Side panel detail\n        translate([-40, 0, 45]) cube([40, 40, 35]);\n    }\n    \n    // Shelves\n    translate([0, 0, 0]) cube([120, 40, 45]);\n    translate([0, 20, 0]) cube([120, 40, 45]);\n    translate([0, 20, 45]) cube([120, 40, 45]);\n    \n    // Back panel detail\n    translate([0, 0, -20]) cube([120, 40, 45]);\n    \n    // Shelf support brackets\n    translate([20, 0, 20]) cube([8, 40, 35]);\n    translate([-40, 0, 20]) cube([8, 40, 35]);\n    translate([40, 0, 20]) cube([8, 40, 35]);\n    translate([0, 20, 20]) cube([8, 40, 35]);\n}\n\n// Generate the unit\nside_view_unit();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "radial lines",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 52,
      "code": "// Realistic Steel Pipe \u2013 Medium Complexity, 3D Printable\n// Overall dimensions: 100 mm diameter, 80 mm length, 2 mm wall thickness\n\n// Base parameters\npipe_diameter = 80;\npipe_length = 100;\nwall_thickness = 2;\nhole_diameter = 4;\nhole_depth = 2;\nnum_holes = 3;\n\n// Pipe profile \u2013 curved flange\nmodule flange_profile() {\n    difference() {\n        // Main flange body\n        cylinder(h=4, d=pipe_diameter, center=true);\n        \n        // Rounded top edge\n        translate([0, 0, 2])\n            cylinder(h=2, d=pipe_diameter, center=true);\n        \n        // Top hole\n        cylinder(h=2, d=hole_diameter, center=true);\n        \n        // Bottom hole\n        cylinder(h=2, d=hole_diameter, center=true);\n        \n        // Small tabs for wall thickness\n        for (i = [0:num_holes - 1]) {\n            rotate([0, 0, i * 360 / num_holes])\n                translate([pipe_diameter/2 - 0.5, 0, -0.1])\n                    cylinder(h=2, d=0.5, center=true);\n        }\n    }\n}\n\n// Main pipe body\nmodule main_pipe() {\n    difference() {\n        // Outer shell\n        translate([0, 0, -pipe_diameter/2])\n            rotate([0, 0, 90])\n                translate([0, 0, 0])\n                    flange_profile();\n        \n        // Inner hole\n        translate([0, 0, -pipe_diameter/2 + 1])\n            rotate([0, 0, 90])\n                cylinder(h=pipe_length, d=hole_diameter);\n    }\n}\n\n// Joint/connection fitting\nmodule joint() {\n    translate([0, 0, 0])\n        difference() {\n            union() {\n                // Joint block\n                cylinder(h=3, d=2, center=true);\n                \n                // Screw holes\n                for (i = [0:2]) {\n                    translate([0, -0.5, -i * 5])\n                        cylinder(h=1.5, d=1.5, center=true);\n                }\n                \n                // Reinforcement ribs\n                for (i = [0:1]) {\n                    translate([0, -0.5, -i * 2])\n                        cube([2, 2, 3], center=true);\n                }\n            }\n            \n            // Screw threads\n            for (i = [0:2]) {\n                translate([0, -0.5, -i * 5 + 3])\n                    cylinder(h=1.5, d=0.5, center=true);\n            }\n        }\n}\n\n// End caps for easy handling\nmodule end_caps() {\n    // Left end cap\n    translate([0, 0, -pipe_length/2])\n        difference() {\n            union() {\n                cylinder(h=4, d=pipe_diameter);\n                translate([0, 0, 2])\n                    cylinder(h=2, d=pipe_diameter, center=true);\n            }\n        }\n    \n    // Right end cap\n    translate([pipe_diameter - 0.5, 0, -pipe_length/2])\n        difference() {\n            union() {\n                cylinder(h=4, d=pipe_diameter);\n                translate([0, 0, 2])\n                    cylinder(h=2, d=pipe_diameter, center=true);\n            }\n        }\n}\n\n// Assembly\nunion() {\n    // Main assembly\n    translate([0, 0, 0])\n        main_pipe();\n    \n    // Joints\n    joint();\n    end_caps();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "fork",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 27,
      "code": "// Realistic medium-complexity 3D-printable model of a traditional Japanese folding stool (koshi)\n// Designed for FDM 3D printing with 2mm wall thickness and no steep overhangs\n\n// Overall dimensions: ~90mm width x ~110mm depth x ~140mm height\n$fn = 32;\nwall_thickness = 2;\n\nmodule koshi() {\n    // Base platform (leg)\n    translate([0, 0, 0]) {\n        cube([70, 70, 10], center=true);\n        // Chamfer edges for 3D printing\n        translate([1, 1, 1]) cube([70, 70, 12], center=true);\n    }\n\n    // Four legs with tapered supports\n    for (x = [-30, 0, 30]) {\n        for (y = [-35, 0, 35]) {\n            translate([x, y, 0]) {\n                cylinder(h = 8, r = 2, center = false);\n            }\n        }\n    }\n\n    // Front cushion block\n    translate([0, 0, -35]) {\n        difference() {\n            cube([45, 45, 3], center=true);\n            translate([0, 0, 0.5]) cube([43, 43, 3.5], center=true);\n        }\n    }\n\n    // Back cushion block\n    translate([0, 0, 35]) {\n        difference() {\n            cube([45, 45, 3], center=true);\n            translate([0, 0, 0.5]) cube([43, 43, 3.5], center=true);\n        }\n    }\n\n    // Side cushions (folded)\n    for (side = [-1, 1]) {\n        translate([side * 37.5, 0, 0]) {\n            difference() {\n                cube([45, 45, 3], center=true);\n                // Fold lines for realistic appearance\n                for (x = [-35, 0, 35]) {\n                    translate([x, 0, 0]) cube([0.5, 0.5, 3], center=true);\n                }\n            }\n        }\n    }\n\n    // Handle at back\n    translate([-30, 0, -20]) {\n        rotate([90, 0, 0]) {\n            cylinder(h = 15, r = 4, center = false);\n        }\n    }\n\n    // Decorative joint at bottom (folded bottom edge)\n    translate([0, 0, -10]) {\n        difference() {\n            cube([40, 40, 10], center=true);\n            cube([35, 35, 5], center=true);\n        }\n    }\n}\n\n// Add texture to legs for realistic appearance\nmodule koshi_texture() {\n    for (x = [-30, 0, 30]) {\n        for (y = [-35, 0, 35]) {\n            translate([x, y, 8]) {\n                cylinder(h = 0.5, r = 2.5, center = true);\n            }\n        }\n    }\n}\n\n// Scale the koshi to 60mm width\nscale(60) koshi();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "cup",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 86,
      "code": "// Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complexity Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complexity Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complexity Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium-Complex Realistic Medium",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: Geometries in cache: 1\nGeometry cache size in bytes: 0\nCGAL Polyhedrons in cache: 0\nCGAL cache size in bytes: 0\nTotal rendering time: 0:00:00.000\nCurrent top level object is empty.\n",
      "vlm_response": null
    },
    {
      "object": "spoon",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 85,
      "code": "// Realistic medium-complexity spoon\n// Designed for 3D printing with minimal overhangs and no steep overhangs\n\nmodule handle_grip() {\n    // Main handle body \u2013 tapered cylindrical shape\n    difference() {\n        // Base cylinder\n        cylinder(h=50, r1=8, r2=6, center=false);\n        // Grip grooves\n        for(i=[0:10:45]) {\n            translate([0, 0, i])\n                cylinder(h=0.3, r=7.5, center=true);\n        }\n        // End cap\n        cylinder(h=2, r1=8, r2=6, center=false);\n    }\n}\n\nmodule handle_grip_assembly() {\n    // Connect handle to handle_grip()\n    translate([0, 0, 0])\n        handle_grip();\n}\n\nmodule handle() {\n    // Main handle\n    cylinder(h=100, r1=9, r2=10, center=false);\n    // Gripping texture\n    for(i=[0:5:95]) {\n        translate([0, 0, i])\n            cylinder(h=0.3, r=7, center=false);\n    }\n}\n\nmodule blade() {\n    // Curved blade with rounded edges\n    difference() {\n        // Base blade\n        cylinder(h=20, r1=10, r2=12, center=false);\n        // Rounded edge cutouts\n        for(i=[0:5:10]) {\n            translate([0, 0, i])\n                cylinder(h=2, r=6.5, center=true);\n        }\n    }\n}\n\nmodule blade_pivot() {\n    // Pivot pin for blade\n    cylinder(h=10, r=4, center=false);\n}\n\nmodule blade_tip() {\n    // Tapered cutting edge\n    difference() {\n        cylinder(h=5, r=4.5, center=false);\n        cylinder(h=5, r=4.5, center=false);\n    }\n}\n\nmodule support_post() {\n    // Internal support structure\n    cylinder(h=50, r1=8, r2=6, center=false);\n}\n\n// Main assembly\ntranslate([0, 0, 0])\n    rotate([0, 0, -45])\n    union() {\n        // Handle assembly\n        handle_grip_assembly();\n        // Handle\n        handle();\n        // Blade\n        handle();\n        // Support post\n        support_post();\n        // Blade tip\n        handle();\n    }",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "knife",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 81,
      "code": "// Realistic Kitchen Knife \u2013 Medium Complexity OpenSCAD Model\n// Designed for 3D printing with 2 mm wall thickness and no steep overhangs\n\n// Parameters\nblade_length = 80;\nblade_width = 22;\nblade_thickness = 2;\nhandle_length = 100;\nhandle_diameter = 18;\nhandle_width = 15;\npivot_diameter = 4;\npivot_height = 8;\nguard_width = 20;\n\n// Base platform\nmodule base() {\n    difference() {\n        cube([20, 20, 4], center=true);\n        translate([0, 0, 2]) cube([20, 20, 4.2], center=true);\n    }\n}\n\n// Handle with grip texture\nmodule handle() {\n    difference() {\n        // Main grip body\n        cylinder(h=handle_length, r1=handle_diameter/2, r2=handle_diameter/3, center=true);\n        // Finger grooves\n        for(i=[-1, 1]) {\n            translate([i*handle_diameter/3, 0, handle_length/2])\n                cylinder(h=0.5, r=0.6, center=true);\n        }\n    }\n}\n\n// Blade assembly\nmodule blade() {\n    union() {\n        // Main blade body\n        difference() {\n            cylinder(h=blade_thickness, r1=blade_width/2, r2=blade_width/4, center=true);\n            // Curved cutting edge\n            for(i=[-1, 1]) {\n                translate([i*blade_width/3, 0, -blade_thickness/2])\n                    rotate([0, 0, i*30])\n                        scale([1, 1.2, 1])\n                            cylinder(h=blade_thickness, r=blade_width/4);\n            }\n        }\n        // Blade bevel\n        translate([0, 0, -blade_thickness/2])\n            rotate([0, 0, -blade_width/2])\n                difference() {\n                    cylinder(h=blade_thickness, r1=blade_width/4, r2=blade_width/8, center=true);\n                    cylinder(h=blade_thickness+0.2, r1=blade_width/4.2, r2=blade_width/8.2, center=true);\n                }\n        // Cutting edge detail\n        translate([0, 0, -blade_thickness/2])\n            difference() {\n                cylinder(h=blade_thickness, r=blade_width/4, center=true);\n                cylinder(h=blade_thickness+0.2, r=blade_width/4.2, center=true);\n            }\n    }\n}\n\n// Pivot pin\nmodule pivot_pin() {\n    cylinder(h=pivot_height, r=pivot_diameter/2, center=true);\n}\n\n// Grip ridges on handle\nmodule grip_ridges() {\n    difference() {\n        // Main grip ridges\n        for(i=[-1, 1]) {\n            translate([i*handle_diameter/3, 0, handle_length/2])\n                rotate([0, 90, 0])\n                    cylinder(h=handle_width, r=0.5, center=true);\n        }\n        // Finger grooves\n        for(i=[-1, 1]) {\n            translate([i*handle_diameter/3, 0, handle_length/2])\n                rotate([0, 90, 0])\n                    cylinder(h=handle_width, r=0.5, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    base();\n    handle();\n    blade();\n    pivot_pin();\n    grip_ridges();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "symmetric flower",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 78,
      "code": "// Realistic-style medium-complexity 3D-printable flower model\n// Overall size ~80mm tall, suitable for FDM printing with 2mm walls\n\n// Parameters\n$fn = 36;          // Smooth curves\nwall = 2;          // Wall thickness for printing\npetal_width = 12;   // Width of petals\npetal_thickness = 3; // Thickness of petals\nstem_height = 15;    // Height of flower stem\nleaf_length = 15;    // Length of leaves\nleaf_width = 8;\n\n// Main flower body\nmodule flower_body() {\n    difference() {\n        // Main petals\n        for(i = [0:5]) {\n            rotate([0, 0, i * 180]) {\n                translate([0, 0, 0]) {\n                    // Left petal\n                    scale([1, 1, petal_width/2]) {\n                        rotate([0, 0, 10]) {\n                            translate([0, 0, -petal_thickness/2]) {\n                                sphere(r=petal_width/2);\n                            }\n                        }\n                    }\n                    // Right petal\n                    mirror([0, 0, 180]) {\n                        rotate([0, 0, 10]) {\n                            translate([0, 0, -petal_thickness/2]) {\n                                sphere(r=petal_width/2);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // Center disc\n        translate([0, 0, 0]) {\n            sphere(r=petal_width/2);\n        }\n    }\n}\n\n// Petal segments\nmodule petal_segments(n) {\n    for(i = [0:n-1]) {\n        translate([0, 0, i * (petal_width/2 + petal_thickness/2)]) {\n            scale([1, 1, 0.8]) {\n                difference() {\n                    rotate([0, 0, i * 30]) {\n                        cylinder(h=petal_thickness*2, r=petal_width/2, $fn=8);\n                    }\n                    translate([0, 0, -petal_thickness/2]) {\n                        cylinder(h=petal_thickness*2, r=petal_width/2, $fn=8);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Leaf base\nmodule leaf_base() {\n    difference() {\n        // Main leaf\n        translate([0, 0, -leaf_length/2 + 2]) {\n            scale([1, 1.2, 0.5]) {\n                rotate([0, 0, 0]) {\n                    cylinder(h=leaf_length, r=leaf_width/2, $fn=16);\n                }\n            }\n        }\n        // Central vein\n        translate([0, 0, -leaf_length/2 + 4]) {\n            cylinder(h=leaf_length, r=leaf_width/4, $fn=16);\n        }\n        // Cut-out for stem\n        translate([0, 0, -leaf_length/2 + 6]) {\n            scale([1, 1.1, 0.3]) {\n                cylinder(h=leaf_length, r=leaf_width/3, $fn=16);\n            }\n        }\n    }\n}\n\n// Stem\nmodule stem() {\n    difference() {\n        cylinder(h=stem_height, r=stem_height/2, $fn=32);\n        translate([0, 0, -stem_height/2/2]) {\n            cylinder(h=stem_height/2, r=stem_height/4, $fn=32);\n        }\n    }\n}\n\n// Leaves\nmodule leaves() {\n    for(i = [0:3]) {\n        rotate([0, 0, i * 150]) {\n            translate([0, 0, -leaf_length*0.8]) {\n                leaf_base();\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    flower_body();\n    petal_segments(8);\n    leaf_base();\n    stem();\n    leaves();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "mug",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 78,
      "code": "// Realistic Medium-Complexity Medium-Sized Chair \u2013 3D-Printable Model\n// Designed for FDM 3D printing with 2 mm wall thickness and no steep overhangs.\n// Overall footprint 80 mm wide x 65 mm deep x 40 mm high (height at seat)\n\n$fn = 32;               // Resolution for smooth curves\n\n// Main parameters\nchair_width = 80;\nchair_depth = 65;\nchair_height = 40;\nseat_height = 20;\nleg_height = 35;\nwall_thickness = 2;\n\n// Wall thickness for printable parts\nwall = 2;\n\n// Seat cushion module\nmodule seat() {\n    difference() {\n        // Main seat platform\n        cube([chair_width - wall*2, chair_depth - wall*2, seat_height], center = true);\n        // Chamfer top edge\n        translate([0, 0, wall])\n            cube([chair_width - wall*2 - wall*2, chair_depth - wall*2 - wall*2, seat_height + wall*2], center = true);\n    }\n}\n\n// Backrest module\nmodule backrest() {\n    difference() {\n        cube([chair_width - wall*2, chair_depth - wall*2, chair_height - 5], center = true);\n        // Rounded top front\n        translate([0, 0, chair_height - 5])\n            scale([1, 1, 0.8])\n                sphere(r = 20);\n    }\n}\n\n// Chair legs (4 legs, 2 parallel per leg)\nmodule legs() {\n    for(x = [-chair_width/2 + leg_height/2 : 4 : chair_width/2 - leg_height/2 - 4])\n        for(y = [-chair_depth/2 + leg_height/2 : 4 : chair_depth - leg_height/2 - 4])\n            translate([x, y, chair_height/2])\n                cylinder(h = leg_height, r = wall, center = true);\n}\n\n// Armrest module\nmodule armrest(x_pos = 0, y_pos = 0) {\n    difference() {\n        // Armrest base\n        cube([chair_width - wall*2, wall*2, 15], center = true);\n        // Rounded top front\n        translate([x_pos, y_pos, 15/2])\n            sphere(r = wall*2);\n    }\n}\n\n// Central support structure\nmodule support_frame() {\n    difference() {\n        cube([wall*3, wall*3, chair_height], center = true);\n        // Central cross bar\n        translate([0, 0, wall/2])\n            cube([wall*2, wall*2, chair_height - wall/2 - wall*2], center = true);\n    }\n\n}\n\n// Assembly\nmodule chair() {\n    // Chair base\n    difference() {\n        union() {\n            legs();\n            seat();\n            backrest();\n            support_frame();\n        }\n        // Chamfer on seat edges\n        translate([0, 0, chair_height/2 + 2])\n            cube([chair_width - wall*2, chair_depth - wall*2, wall*2 + 1], center = true);\n        translate([0, 0, chair_height - 5])\n            cube([chair_width - wall*2 - wall*2, chair_depth - wall*2 - wall*2, seat_height + wall*2], center = true);\n    }\n}\n\n// Render the chair\nchair();",
      "inference_error": null,
      "render_error": "Rendering timeout (>60s)",
      "vlm_response": null
    },
    {
      "object": "plate",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 97,
      "code": "// Realistic 3D-printable model of a 19th-century British rifle\n// Designed for FDM printing with minimal support and overhangs\n\n// Overall dimensions: ~120 mm long, ~75 mm high, ~60 mm wide\n\n// Base plate (flintlock assembly)\nmodule flintlock_base() {\n    difference() {\n        // Main base block\n        cube([100, 60, 30], center=true);\n        \n        // Ventilation slots for powder flow\n        for (x = [-40:10:40], y = [-30:10:30]) {\n            translate([x, 0, y]) {\n                cube([20, 20, 5], center=true);\n            }\n        }\n        \n        // Powder channel (3D-printed with minimal overhangs)\n        translate([0, 0, 10]) {\n            difference() {\n                cube([15, 15, 25], center=true);\n                translate([0, 0, 12]) {\n                    cube([12, 12, 20], center=true);\n                }\n            }\n        }\n    }\n}\n\n// Trigger guard\nmodule trigger_guard() {\n    difference() {\n        cube([40, 40, 35], center=true);\n        translate([0, 0, 12.5]) {\n            cube([38, 38, 32.5], center=true);\n        }\n    }\n}\n\n// Bolt head\nmodule bolt_head() {\n    difference() {\n        cylinder(h=15, r=25, center=true);\n        translate([0, 0, 10]) {\n            cylinder(h=10, r=23, center=true);\n        }\n    }\n}\n\n// Bolt (3d-printed for strength and low weight)\nmodule bolt() {\n    difference() {\n        cylinder(h=20, r=25, center=true);\n        translate([0, 0, 10]) {\n            cylinder(h=10, r=23, center=true);\n        }\n    }\n}\n\n// Muzzle\nmodule muzzle() {\n    difference() {\n        cylinder(h=15, r=30, center=true);\n        translate([0, 0, 10]) {\n            cylinder(h=10, r=28, center=true);\n        }\n    }\n}\n\n// Stock\nmodule stock() {\n    difference() {\n        cube([60, 25, 15], center=true);\n        translate([0, 0, 12]) {\n            cube([48, 24, 12], center=true);\n        }\n    }\n}\n\n// Cam lock\nmodule cam_lock() {\n    difference() {\n        cylinder(h=5, r=25, center=true);\n        translate([0, 0, 10]) {\n            cylinder(h=2, r=23, center=true);\n        }\n    }\n}\n\n// Powder horn\nmodule powder_horn() {\n    difference() {\n        cylinder(h=30, r=25, center=true);\n        translate([0, 0, 10]) {\n            cylinder(h=20, r=23, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    flintlock_base();\n    \n    // Trigger\n    translate([-40, 0, 15]) {\n        trigger_guard();\n    }\n    \n    // Bolt\n    translate([40, 0, 15]) {\n        bolt_head();\n        translate([0, 0, 15]) {\n            bolt();\n        }\n    }\n    \n    // Muzzle\n    translate([0, 0, 40]) {\n        translate([0, 0, 20]) {\n            translate([0, 0, 10]) {\n                 muzzle();\n            }\n        }\n    }\n    \n    // Stock\n    translate([0, 0, -35]) {\n        stock();\n    }\n    \n    // Powder horn\n    translate([0, 0, -30]) {\n        powder_horn();\n    }\n    \n    // Cam lock\n    translate([0, 0, 12]) {\n        camera_angle = 45;\n        translate([0, 0, 12]) {\n            cam_lock();\n        }\n    }\n    \n    // Trigger guard\n    translate([0, 0, 15]) {\n        trigger_guard();\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "bowl",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 97,
      "code": "// Realistic medium-complexity bowl with handle and rim details\n// Overall height: 60mm, diameter: 45mm, wall thickness: 2mm\n\n$fn = 32;  // Resolution for smooth curves\n\n// Main bowl body\nmodule bowl_body() {\n    difference() {\n        // Outer shell\n        cylinder(h = 20, r1 = 25, r2 = 20, center = false);\n        // Hollow interior\n        translate([0, 0, 0])\n            cylinder(h = 20, r = 20, center = false);\n    }\n\n    // Bottom base\n    translate([0, 0, -1.5])\n        cylinder(h = 2, r = 22, center = false);\n\n    // Handle\n    translate([0, 0, -5])\n        cylinder(h = 20, r = 3, center = false);\n}\n\n// Handle\nmodule handle() {\n    difference() {\n        // Handle grip\n        cylinder(h = 10, r = 3.5, center = false);\n        // Recess for grip\n        translate([0, 0, -1.5])\n            cylinder(h = 2, r = 2.5, center = false);\n    }\n    // End cap\n    translate([0, 0, 0])\n        cylinder(h = 2, r = 3.5, center = false);\n}\n\n// Rim detail\nmodule bowl_rim() {\n    difference() {\n        // Rim curve\n        translate([0, 0, 20])\n            cylinder(h = 2, r1 = 24, r2 = 20, center = false);\n        // Inner cavity\n        translate([0, 0, -1.5])\n            cylinder(h = 2, r1 = 24, r2 = 20, center = false);\n    }\n}\n\n// Wall thickness for printing\nwall_thickness = 2;\n\n// Main assembly\nunion() {\n    // Bowl body\n    bowl_body();\n\n    // Handle\n    handle();\n\n    // Bowl rim\n    bowl_rim();\n\n    // Optional base details for print stability\n    difference() {\n        cube([45, 45, 3], center = true);\n        translate([0, 0, -1.5])\n            cube([45, 45, 2], center = true);\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "glass",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 58,
      "code": "// Realistic medium-complexity 3D-printable model of a realistic wooden chair with a small side table.\n// Overall height: 90 mm, width: 60 mm, depth: 50 mm.\n\n$fn = 30;  // Smooth curves\n\n// Overall dimensions\nseat_width = 60;\nseat_depth = 50;\nseat_height = 45;\nbackrest_height = 40;\nleg_height = 60;\ntable_width = 50;\ntable_depth = 40;\ntable_height = 25;\n\n// Main seat block\nmodule seat_block() {\n    difference() {\n        // Solid block\n        cube([seat_width, seat_depth, seat_height], center = true);\n        \n        // Drainage holes\n        for (x = [-seat_width/2 + 5, seat_width/2 - 5]) {\n            for (y = [-seat_depth/2 + 5, seat_depth/2 - 5]) {\n                translate([x, y, -1]) cylinder(h = 1.5, d = 2, center = false);\n            }\n        }\n    }\n}\n\n// Chair legs (4 legs)\nmodule chair_leg() {\n    difference() {\n        // Leg post\n        cube([4, 4, 4]);\n        \n        // Tapered feet\n        translate([0, 2, 0]) cylinder(h = 2, d = 4);\n        translate([0, -2, 0]) cylinder(h = 2, d = 4);\n    }\n}\n\n// Chair backrest\nmodule backrest() {\n    difference() {\n        // Main backrest panel\n        cube([backrest_height, seat_depth, seat_height], center = true);\n        \n        // Hollow center\n        translate([0, 0, -0.1]) cube([backrest_height - 1, seat_depth - 1, seat_height - 1], center = true);\n        \n        // Decorative curve\n        for (x = [0, 20, -20]) {\n            translate([x, 0, 0]) cube([backrest_height, 10, seat_height - 1], center = true);\n        }\n    }\n}\n\n// Chair seat\nmodule chair_seat() {\n    difference() {\n        // Main seat\n        cube([seat_width, seat_depth, seat_height], center = true);\n        \n        // Drainage holes\n        for (x = [-seat_width/2 + 5, seat_width/2 - 5]) {\n            for (y = [-seat_depth/2 + 5, seat_depth/2 - 5]) {\n                translate([x, y, -1]) cylinder(h = 1.5, d = 2, center = false);\n            }\n        }\n    }\n}\n\n// Chair legs\nmodule chair_legs() {\n    for (x = [-seat_width/2 + 5, seat_width/2 - 5]) {\n        for (y = [-seat_depth/2 + 5, seat_depth/2 - 5]) {\n            translate([x, y, 0]) chair_leg();\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Chair frame\n    translate([0, 0, seat_height/2]) {\n        cube([seat_width, seat_depth, seat_height/2]);\n    }\n    \n    // Legs\n    chair_legs();\n    \n    // Seat\n    seat_block();\n    \n    // Backrest\n    backrest();\n    \n    // Table (side table)\n    table_width = table_width;\n    table_depth = table_depth;\n    table_height = table_height;\n    \n    // Side table leg\n    translate([0, 0, -table_height/2 - 2]) {\n        difference() {\n            cube([table_width, table_depth, 4]);\n            translate([0, 0, 2]) cube([table_width - 2, table_depth - 2, 2]);\n        }\n    }\n    \n    // Table leg\n    translate([0, 0, -table_height/2 - 2]) {\n        difference() {\n            cube([table_width, table_depth, 4]);\n            translate([0, 0, 2]) cube([table_width - 2, table_depth - 2, 2]);\n        }\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "bottle",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 67,
      "code": "// Realistic Medium-Complexity Medium-Weight Coffee Mug\n// Designed for 3D printing with 2 mm wall thickness and 110 mm diameter\n\n// Wall thickness constant\nwall = 2;\n\n// Main cup body\nmodule cup_body() {\n    difference() {\n        // Outer shell\n        cube([40, 30, 25], center = true);\n        \n        // Inner cavity\n        translate([0, 0, 5])\n        cube([36, 26, 23], center = true);\n        \n        // Handle hole\n        translate([2, 15, -1])\n        cylinder(h = 3, r = 8);\n    }\n}\n\n// Handle\nmodule handle() {\n    difference() {\n        union() {\n            cylinder(h = 45, r = 8);\n            translate([0, 0, -45])\n            cylinder(h = 45, r = 5);\n        }\n        \n        // Grip texture\n        for(i = [0:2]) {\n            translate([0, 0, -45 + i * 15])\n            sphere(r = 3);\n        }\n    }\n}\n\n// Handle grip\nmodule handle_grip() {\n    difference() {\n        union() {\n            cylinder(h = 45, r = 7);\n            translate([0, 0, -45])\n            cylinder(h = 45, r = 6);\n        }\n        \n        // Grip pattern\n        for(i = [0:1]) {\n            translate([0, 0, -45 - i * 15])\n            cylinder(h = 3, r = 5);\n        }\n    }\n}\n\n// Straw holder\nmodule straw_holder() {\n    difference() {\n        union() {\n            cylinder(h = 20, r = 6);\n            translate([0, 0, -20])\n            cylinder(h = 20, r = 4);\n        }\n        \n        // Straw hole\n        translate([0, 0, 20])\n        cylinder(h = 20, r = 2);\n    }\n}\n\n// Handle support\nmodule handle_support() {\n    difference() {\n        union() {\n            cylinder(h = 25, r = 9);\n            translate([0, 0, -25])\n            cylinder(h = 25, r = 8);\n        }\n        \n        // Screw holes\n        translate([0, 0, 25])\n        cylinder(h = 2, r = 3);\n    }\n}\n\n// Main base with feet\nmodule base() {\n    difference() {\n        union() {\n            // Base plate\n            cube([40, 30, 4], center = true);\n            \n            // Feet\n            for(x = [-15, 15])\n            for(y = [-15, 15])\n            translate([x, y, -2.5])\n            cylinder(h = 3, r = 4);\n        }\n        \n        // Wall thickness\n        translate([0, 0, 0.5])\n        cube([36, 26, 3.5], center = true);\n    }\n}\n\n// Water base\nmodule water_base() {\n    difference() {\n        union() {\n            // Base\n            cube([40, 30, 3], center = true);\n            \n            // Water cup\n            translate([0, 0, -1])\n            cylinder(h = 3, r = 20);\n            \n            // Handle\n            translate([0, 0, 45])\n            cylinder(h = 3, r = 7);\n        }\n        \n        // Water line\n        translate([0, 0, -1])\n        cube([36, 26, 2], center = true);\n    }\n}\n\n// Water line\nmodule water_line() {\n    difference() {\n        union() {\n            cylinder(h = 2, r = 18);\n            translate([0, 0, 1])\n            cylinder(h = 2, r = 16);\n        }\n        \n        // Water texture\n        for(i = [0:1]) {\n            translate([0, 0, -1 + i * 1.5])\n            cylinder(h = 1.5, r = 14);\n        }\n    }\n}\n\n// Glass window\nmodule glass_window() {\n    difference() {\n        translate([0, 0, 0])\n        cube([25, 25, 1], center = true);\n        \n        // Window frame\n        translate([0, 0, 0.5])\n        cube([20, 20, 1.5], center = true);\n        \n        // Window handle\n        translate([0, 0, 0.7])\n        cylinder(h = 3, r = 5);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    cup_body();\n    \n    // Handle\n    handle();\n    \n    // Straw holder\n    straw_holder();\n    \n    // Handle support\n    handle_support();\n    \n    // Base\n    base();\n    \n    // Water base\n    water_base();\n    \n    // Water line\n    water_line();\n    \n    // Glass window\n    glass_window();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "hammer",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 65,
      "code": "// Realistic Steel Fork \u2013 Medium Complexity Model\n// Designed for 3D printing with 2 mm wall thickness and no steep overhangs\n\n$fn = 32;           // Circle resolution\nwall = 2;           // Wall thickness\n\nmodule main_fork_body() {\n    difference() {\n        // Main curved body\n        linear_extrude()\n            polygon([\n                [0, 0], [30, 0], [40, 10], [35, 15], [30, 20], [0, 20], [0, 0]\n            ]);\n        \n        // Hollow out for 2 mm wall\n        translate([0, 0, -2.5])\n            linear_extrude()\n                polygon([\n                    [0, 0], [30, 0], [40, 10], [35, 15], [30, 20], [0, 20], [0, 0]\n                ]);\n    }\n}\n\nmodule fork_head() {\n    union() {\n        // Main head\n        cylinder(h = 15, r1 = 5, r2 = 3, center = false);\n        \n        // Tapered head\n        translate([0, 0, -2.5])\n            scale([1, 0.8, 0.3])\n                cylinder(h = 12, r1 = 5, r2 = 3, center = false);\n        \n        // Handle\n        cylinder(h = 8, r = 2.5, center = false);\n    }\n}\n\nmodule fork_blade() {\n    difference() {\n        union() {\n            // Blade body\n            cylinder(h = 3, r1 = 4, r2 = 1.5, center = false);\n            \n            // Blade edge\n            translate([0, 0, 2.5])\n                cylinder(h = 1.5, r1 = 3, r2 = 2, center = false);\n            \n            // Handle\n            translate([0, 0, -2.5])\n                cylinder(h = 3.5, r = 2, center = false);\n        }\n        \n        // Hollow out for 2 mm wall\n        translate([0, 0, 2.5])\n            linear_extrude()\n                polygon([\n                    [0, 0], [30, 0], [40, 10], [35, 15], [30, 20], [0, 20], [0, 0]\n                ]);\n        \n        // Grip texture\n        for(i = [0:4]) {\n            translate([0, 0, i * 3.5])\n                cylinder(h = 0.2, r = 3.5, center = false);\n        }\n    }\n}\n\nmodule steel_handle() {\n    union() {\n        // Main handle\n        cylinder(h = 12, r1 = 3.5, r2 = 3.5, center = false);\n        \n        // Grip texture\n        for(i = [0:5]) {\n            translate([0, 0, 12.5 - i * 0.5])\n                cylinder(h = 0.2, r = 3.5, center = false);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    color(\"silver\") main_fork_body();\n    color(\"silver\") fork_head();\n    color(\"silver\") fork_blade();\n    color(\"silver\") steel_handle();\n}\n\n// Optional surface details for realistic look\ntranslate([0, 0, 0.5])\n    color(\"darkgray\")\n    cylinder(h = 0.1, r = 3.5, center = false);",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "screwdriver",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 6,
      "code": "// Realistic 3D-printable 1-piece kitchen knife\n// All dimensions in mm, 1.4mm wall thickness used\n\n// Knife parameters\nblade_width = 30;\nblade_length = 80;\nhandle_length = 120;\nhandle_diameter = 12;\nhandle_thickness = 2;\n\n// Blade profile\nprofile_height = 1.5;\nprofile_width = 3.5;\n\nmodule knife() {\n    // Main blade body\n    difference() {\n        // Main blade block\n        cube([blade_width, blade_length, profile_height], center=true);\n        \n        // Blade curve cutouts\n        translate([0, 0, -profile_height/2 + 1])\n            cylinder(h=profile_height + 2, r1=blade_width/2, r2=blade_width/4, $fn=32);\n        translate([0, 0, -profile_height/2 - 1])\n            cylinder(h=profile_height + 2, r1=blade_width/2, r2=blade_width/4, $fn=32);\n    }\n    \n    // Blade spine\n    difference() {\n        translate([0, 0, -profile_height/2 - 5])\n            cube([blade_width, blade_length, 5], center=true);\n        translate([0, 0, -profile_height/2 - 5])\n            cube([blade_width, blade_length, 5], center=true);\n    }\n    \n    // Cutting edge bevels\n    for(i = [-0.5:0.5:0.5]) {\n        translate([i * (blade_width/2 - 1), 0, 0])\n            rotate([90, 0, 0])\n                cube([1, blade_length - 10, 1], center=true);\n    }\n    \n    // Handle with grip texture\n    color(\"silver\") {\n        difference() {\n            // Handle body\n            cylinder(h=handle_length - 20, r=handle_diameter/2, center=true);\n            \n            // Grip texture pattern\n            for(i = [0:3:360]) {\n                rotate([0, 0, i * 45])\n                    translate([handle_diameter/2 - 1, 0, 0])\n                        cube([1, 1, 1], center=true);\n            }\n            \n            // Blade guard slot\n            translate([0, 0, handle_length/2 - 1])\n                cube([blade_width + 1, 1, 0.5], center=true);\n            translate([0, 0, handle_length/2 - 1])\n                cube([blade_width + 1, 1, 0.5], center=true);\n        }\n    }\n    \n    // Tang reinforcement\n    translate([0, 0, -handle_length/2 - 10])\n        cylinder(h=handle_thickness, r=handle_diameter/2, center=true);\n    translate([0, 0, -handle_length/2 - 10])\n        cylinder(h=handle_thickness, r=handle_diameter/2, center=true);\n    \n    // Rubber feet\n    color(\"black\") {\n        translate([0, 0, -handle_length/2 - 20])\n            cylinder(h=1, r=handle_diameter/4);\n        translate([0, 0, -handle_length/2 - 20])\n            cylinder(h=1, r=handle_diameter/4);\n    }\n}\n\n// Render the knife\nknife();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "wrench",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 93,
      "code": "// Tool - Rivet Tool\n// Realistic style, medium complexity\n// Overall dimensions: 80mm length, 20mm diameter\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main body\nmodule body() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h = 40, d = 20, $fn = 64);\n        \n        // Rivet hole\n        translate([0, -wall, 0])\n            rotate([90, 0, 0])\n                cylinder(h = wall, d = 8, $fn = 64);\n        \n        // Grip texture on sides\n        for (i = [0:4]) {\n            translate([0, 0, i * 12])\n                rotate([90, 0, 0])\n                    cylinder(h = wall + 0.5, d = 12, $fn = 64);\n        }\n    }\n}\n\n// Handle\nmodule handle() {\n    difference() {\n        // Handle grip\n        hull() {\n            translate([0, 0, -20])\n                sphere(d = 8, $fn = 64);\n            translate([0, 0, -40])\n                sphere(d = 8, $fn = 64);\n            translate([0, 0, -60])\n                sphere(d = 8, $fn = 64);\n        }\n        \n        // Screw adjustment hole\n        translate([0, 0, -55])\n            rotate([90, 0, 0])\n                cylinder(h = 20, d = 4, $fn = 32);\n    }\n}\n\n// Screw mechanism\nmodule screw() {\n    difference() {\n        // Screw shaft\n        cylinder(h = 15, d = 6, $fn = 32);\n        \n        // Screw head\n        translate([0, 0, 30])\n            cylinder(h = 3, d = 5, $fn = 32);\n        \n        // Screw base\n        translate([0, 0, -5])\n            cylinder(h = 5, d = 7, $fn = 32);\n    }\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    for (i = [0:3]) {\n        translate([0, 0, -40 + i * 10])\n            difference() {\n                cube([wall * 2 + 0.5, 2, 2], center = true);\n                cube([wall * 2 + 0.5, 2, 2], center = true);\n            }\n    }\n}\n\n// Rivet clips\nmodule clips() {\n    clip_width = 3;\n    clip_height = 5;\n    clip_length = 10;\n    \n    clip_positions = [\n        [0, 0, 20],\n        [clip_length, 0, 0],\n        [clip_length - clip_width, 0, 0],\n        [clip_length, clip_length - clip_width, 0],\n        [clip_length, clip_length, 0],\n        [clip_length - clip_width, clip_length, 0],\n        [clip_length, clip_length - clip_width, clip_length],\n    ];\n    \n    for (pos = clip_positions) {\n        translate([pos[0], pos[1], pos[2]])\n            cylinder(h = clip_height, d = clip_width, $fn = 32);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    handle();\n    screw();\n    ribs();\n    clips();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "saw",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 55,
      "code": "// Realistic 3D-printable Zygoptera (Mid-sized moth)\n// Medium complexity with 1.2mm wall thickness for FDM printing\n\n$fn = 32;\n\nmodule body() {\n    // Main thorax\n    scale([1.2, 0.8, 0.9])\n    linear_extrude(height = 1.2, scale = 1)\n    polygon(points=[\n        [0, 0], [0, 2], [0, 4], [0, 6], [12, 6], [12, 4], [12, 2], [12, 0], [12, -2], [12, 0]\n    ]);\n\n    // Abdomen\n    translate([12, 2, 2])\n    scale([0.75, 0.6, 0.5])\n    difference() {\n        cylinder(h = 1.5, r1 = 8, r2 = 6, center = true);\n        cylinder(h = 1.2, r1 = 5, r2 = 4, center = true);\n        cylinder(h = 1.1, r1 = 5, r2 = 4, center = true);\n    }\n\n    // Wing roots\n    for (i = [-1, 1]) {\n        translate([i * 22, 2, 2])\n        rotate([0, 15, 0])\n        scale([1.2, 0.8, 0.9])\n        cylinder(h = 1.5, r1 = 4, r2 = 3, center = true);\n    }\n\n    // Antennae\n    for (i = [-1, 1]) {\n        translate([i * 10, 3, 2])\n        rotate([0, 15, 0])\n        scale([0.15, 0.15, 0.1])\n        cylinder(h = 1.5, r1 = 2.5, r2 = 1.5, center = true);\n    }\n\n    // Forelegs\n    for (i = [-1, 1]) {\n        translate([i * 15, 0, 3.5])\n        scale([0.8, 1, 0.7])\n        cylinder(h = 2, r1 = 2.5, r2 = 2, center = true);\n    }\n\n    // Hindlegs\n    for (i = [-1, 1]) {\n        translate([i * 15, -0.5, 3.5])\n        scale([0.75, 0.5, 0.6])\n        cylinder(h = 2, r1 = 2.5, r2 = 2, center = true);\n    }\n\n    // Wing membranes\n    translate([0, 0, 5.5])\n    scale([1.3, 0.9, 0.7])\n    difference() {\n        cylinder(h = 1.5, r1 = 6, r2 = 4, center = true);\n        cylinder(h = 1.2, r1 = 5, r2 = 3, center = true);\n    }\n}\n\n// Main assembly\nunion() {\n    body();\n    wing_roots();\n    wing_membranes();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "pliers",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 46,
      "code": "// Realistic Medium-Complexity Mechanical Pliers\n// Overall dimensions: 80mm length, 35mm width, 20mm height\n\n// Color definitions\n$fn = 32;\ngrip_color = \"#8B4513\";  // Red rubber grip\nhandle_color = \"#228B22\";  // Black metal handle\ntip_color = \"#FFD700\";    // Gold tip\nspring_color = \"#444444\";   // Dark grey spring\n\n// Main body module\nmodule pliers_body() {\n    difference() {\n        // Main cylindrical body\n        cylinder(h=20, d=15);\n        \n        // Grip grooves for ergonomic handling\n        for(i = [0:3]) {\n            translate([0, 0, 5 + i*2]) {\n                cube([8, 30, 2]);\n            }\n        }\n        \n        // Tip\n        translate([0, 0, 20]) {\n            cylinder(h=1, d=6);\n            translate([0, 0, -1]) {\n                sphere(d=6);\n            }\n        }\n    }\n}\n\n// Grip module\nmodule grip() {\n    color(grip_color) {\n        // Main grip\n        difference() {\n            cylinder(h=5, d=12);\n            for(i = [0:2]) {\n                translate([0, 0, 5 + i*2]) {\n                    cube([8, 30, 2]);\n                }\n            }\n        }\n        \n        // Finger grooves\n        for(i = [0:3]) {\n            for(j = [0:2]) {\n                translate([0, 0, 5 + i*2 + j*2]) {\n                    cube([8, 30, 2]);\n                }\n            }\n        }\n        \n        // End caps\n        translate([0, 0, 20]) {\n            cylinder(h=1, d=10);\n            cylinder(h=1, d=8);\n        }\n    }\n}\n\n// Spring module\nmodule spring() {\n    color(spring_color) {\n        // Main spring\n        difference() {\n            cylinder(h=10, d=8);\n            translate([0, 0, 10]) {\n                cylinder(h=10, d=6);\n            }\n        }\n        \n        // End cap\n        translate([0, 0, 10]) {\n            cylinder(h=2, d=6);\n            translate([0, 0, 2]) {\n                sphere(d=4);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    pliers_body();\n    \n    // Grip\n    grip();\n    \n    // Tips\n    translate([0, 0, 25]) {\n        tip_color();\n    }\n    \n    // Springs\n    translate([0, 0, 35]) {\n        spring();\n    }\n}\n\n// Decorative elements (small details)\n// Spring details\ntranslate([0, 0, 45]) {\n    sphere(d=1);\n    translate([0, 0, 10]) {\n        cylinder(h=2, d=2);\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "drill",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 73,
      "code": "// Realistic Medium-Complexity Medium-Sized OpenSCAD Model - Realistic Medium-Sized OpenSCAD Model\n// Overall height: 100mm, width: 30mm, depth: 25mm (printable)\n\n// Wall thickness constant\nwall_thickness = 2.5;\n\n// Base plate dimensions\nbase_length = 30;\nbase_width = 25;\nbase_depth = 15;\n\n// Main body dimensions\nbody_length = 120;\nbody_width = 30;\nbody_depth = 18;\n\n// Front panel dimensions\npanel_height = 12;\npanel_width = 25;\npanel_depth = 20;\n\n// Handle dimensions\nhandle_diameter = 12;\nhandle_length = 40;\nhandle_height = 15;\n\n// Base plate dimensions\nbase_thickness = 4;\nbase_diameter = 20;\n\n// Screw holes\nscrew_diameter = 2.5;\nscrew_spacing = 6;\n\n// Main body block\nmodule main_body() {\n    difference() {\n        // Main body block\n        cube([body_length, body_width, body_depth], center=true);\n        \n        // Hollow center\n        translate([0, 0, wall_thickness/2])\n            cube([body_length - 2*wall_thickness, body_width - 2*wall_thickness, body_depth - wall_thickness], center=true);\n        \n        // Front panel cavity\n        translate([0, 0, body_depth/2 - panel_height/2])\n            cube([body_length - 10, body_width - 10, panel_height], center=true);\n    }\n}\n\n// Front panel with ventilation slots\nmodule front_panel() {\n    difference() {\n        // Panel surface\n        translate([0, 0, -body_depth/2 + panel_height/2])\n            cube([body_length - 10, body_width - 10, panel_height], center=true);\n        \n        // Ventilation slots (8)\n        for (i = [0:7]) {\n            translate([body_length - 10 - i*5, body_width - 10 - i*5, -body_depth/2 + panel_height/2])\n                cube([2, 2, panel_height + 0.2], center=true);\n        }\n    }\n}\n\n// Side panels\nmodule side_panels() {\n    translate([0, body_width/2 - panel_height/2 - 1, -body_depth/2 + body_depth/2])\n        cube([body_length - 20, body_width - 20, panel_height - 2], center=true);\n    translate([0, body_width/2 - panel_height/2 - 1, body_depth/2 - body_depth/2])\n        cube([body_length - 20, body_width - 20, panel_height - 2], center=true);\n}\n\n// Base plate with feet\nmodule base_plate() {\n    difference() {\n        // Main plate\n        translate([0, 0, base_depth/2])\n            cube([base_length + 4, base_width + 4, base_depth], center=true);\n        \n        // Foot pads (4)\n        for (x = [-base_length/2 + 5, base_length/2 - 5])\n            for (y = [-base_width/2 + 5, base_width/2 - 5])\n                translate([x, y, -base_depth/2 - 1])\n                    cube([base_length - 2, base_width - 2, 2], center=true);\n    }\n}\n\n// Handle assembly\nmodule handle() {\n    difference() {\n        // Handle body\n        cylinder(h=handle_height, d=handle_diameter, center=true);\n        \n        // Grip texture\n        for (i = [0:2]) {\n            translate([0, 0, i*handle_height/3])\n                cube([handle_diameter*1.2, handle_diameter*1.2, 1], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Base\n    base_plate();\n    \n    // Front panel\n    front_panel();\n    \n    // Side panels\n    side_panels();\n    \n    // Handle\n    handle();\n    \n    // Main body\n    main_body();\n    \n    // Ventilation holes\n    for (i = [0:4]) {\n        translate([body_length - 2*screw_spacing, body_width - 2*screw_spacing - screw_spacing*2, -body_depth/2 - panel_height/2 - screw_spacing/2])\n            cube([screw_spacing*2, screw_spacing*2, panel_height - 2], center=true);\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "level",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 51,
      "code": "// Realistic Medium-Complexity 3D-Printable Toy Mechanical Toy\n// Designed for FDM printing with 2mm wall thickness and 2mm nozzle diameter\n\n// Overall dimensions (mm)\n$fn = 32;  // Global resolution\nscale_factor = 0.8;  // Scale factor for 2mm nozzle\n\nmodule toy_gear_box() {\n    // Main gear box body with rounded top\n    difference() {\n        rounded_box();\n        translate([0,0,2])\n            cylinder(h=4, r=4, $fn);\n    }\n}\n\nmodule rounded_box() {\n    // Create a rounded rectangular box with 2mm wall thickness\n    difference() {\n        // Main box body\n        cube([80, 40, 20], center=false);\n        \n        // Round top edges\n        translate([0,0,-1])\n            sphere(r=4);\n        translate([0,0,1])\n            sphere(r=4);\n        translate([0,0,80-4])\n            sphere(r=4);\n        translate([0,0,40-4])\n            sphere(r=4);\n    }\n}\n\nmodule handle() {\n    // Toy handle with grip texture\n    difference() {\n        // Handle body\n        cylinder(h=15, r=5, $fn=32);\n        \n        // Grip texture grooves\n        for(i=[0:3]) {\n            rotate([0,0,i*90])\n                translate([0,3,20+i*2])\n                    cube([8,2,2], center=false);\n        }\n        \n        // Screw holes for toy\n        for(i=[0:2]) {\n            rotate([0,0,i*180])\n                translate([15,0,5])\n                    cylinder(h=4, r=2, $fn=32);\n        }\n    }\n}\n\nmodule toy_wheels() {\n    // Four toy wheels with smooth edges\n    difference() {\n        cylinder(h=2, r=4, $fn=32);\n        \n        // Wheel rim\n        cylinder(h=3, r=3, $fn=32);\n        \n        // Wheel hub\n        cylinder(h=2, r=4, $fn=32);\n    }\n}\n\nmodule toy_spokes() {\n    // Four toy spokes for mounting\n    difference() {\n        cylinder(h=2, r=3, $fn=32);\n        cylinder(h=2, r=2.5, $fn=32);\n    }\n}\n\n// Main assembly\nscale([scale_factor, scale_factor, scale_factor]) {\n    union() {\n        // Main body\n        translate([0,0,0]) {\n            toy_gear_box();\n        }\n        \n        // Handle\n        translate([0,0,0]) handle();\n        \n        // Wheels\n        translate([0,0,10]) wheel();\n        translate([0,0,30]) wheel();\n        translate([0,0,50]) wheel();\n        translate([0,0,60]) wheel();\n        \n        // Spokes\n        translate([0,0,10]) toy_spokes();\n        translate([0,0,10]) toy_spokes();\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "dice",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 18,
      "code": "// Medium-complexity realistic 3D-printable 8-sided die\n// All dimensions in mm, no steep overhangs, 2mm wall thickness\n\n// Colors\n$fn = 32;\n\n// Main die body\ndifference() {\n    // Outer shell\n    cube([12, 10, 6], center = false);\n    \n    // Inner cavity for hollow\n    translate([0, 0, 2])\n        cube([10, 8, 4], center = false);\n}\n\n// Base ring\ndifference() {\n    cylinder(h = 2, r = 6, center = true);\n    cylinder(h = 3, r = 4, center = true);\n}\n\n// Top surface\ndifference() {\n    cylinder(h = 1, r = 5, center = false);\n    cylinder(h = 2, r = 4, center = false);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "ball",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 85,
      "code": "// Realistic 3D-printable model of a medium-complexity 3D-printable wooden bowl (approx 120mm diameter)\n\n// Overall scale: 1:1 scale realistic bowl, ~120mm diameter, ~10mm wall thickness\n\n// Main bowl body\nmodule bowl_body() {\n    difference() {\n        // Outer shell\n        cylinder(h = 80, d = 110);\n        \n        // Inner cavity\n        translate([0, 0, 80])\n            cylinder(h = 50, d = 100 - 2*wall_thickness);\n            \n        // Top rim\n        translate([0, 0, 80])\n            cylinder(h = 3, d = 110);\n            \n        // Bottom rim\n        translate([0, 0, -3])\n            cylinder(h = 3, d = 110);\n        \n        // Rim ring\n        translate([0, 0, 5])\n            cylinder(h = 1, d = 110 - 2*wall_thickness);\n        \n        // Slight chamfer on bottom for print stability\n        translate([0, 0, -1])\n            cylinder(h = 2, d = 110 - 2*wall_thickness);\n    }\n}\n\n// Bowl base\nmodule bowl_base() {\n    difference() {\n        // Base ring\n        cylinder(h = 3, d = 100);\n        \n        // Inner cavity\n        translate([0, 0, -1])\n            cylinder(h = 5, d = 100 - 2*wall_thickness);\n            \n        // Rim\n        translate([0, 0, 0])\n            cylinder(h = 3, d = 100);\n            \n        // Rounded bottom edge for printability\n        cylinder(h = 3, d = 100);\n        translate([0, 0, 1])\n            cylinder(h = 3, d = 100);\n    }\n}\n\n// Handle\nmodule handle() {\n    difference() {\n        // Handle base\n        cylinder(h = 15, d = 15);\n        \n        // Interior\n        translate([0, 0, -1])\n            cylinder(h = 2, d = 15);\n        \n        // Grip\n        translate([0, 0, -2])\n            cylinder(h = 3, d = 15);\n            \n        // Screw mechanism\n        translate([0, 0, 2])\n            rotate([90, 0, 0])\n                cylinder(h = 4, d = 15);\n    }\n}\n\n// Feet for stability\nmodule feet() {\n    // Four cylindrical feet\n    for (x = [-40, 0, 40])\n        for (y = [-40, 0, 40])\n            translate([x, y, -45])\n                cylinder(h = 15, d = 3);\n}\n\n// Assembly\nunion() {\n    // Main bowl\n    difference() {\n        bowl_body();\n        bowl_base();\n    }\n    \n    // Handle\n    translate([0, 0, 25])\n        handle();\n    \n    // Feet\n    feet();\n    \n    // Bottom rim\n    difference() {\n        translate([0, 0, -10])\n            cylinder(h = 3, d = 110);\n        translate([0, 0, -1])\n            cylinder(h = 5, d = 100 - 2*wall_thickness);\n        translate([0, 0, 0])\n            cylinder(h = 3, d = 110 - 2*wall_thickness);\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "pyramid stack",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 37,
      "code": "// Realistic Medium-Complexity House - OpenSCAD Model\n// Overall size: ~120mm wide, ~80mm deep, ~60mm tall\n\n// Parameters\nwall_thickness = 2;\nroof_height = 40;\nwindow_width = 12;\nwindow_depth = 12;\ndoor_width = 20;\ndoor_height = 30;\ndoor_thickness = 2;\n\n// Main body\nmodule house() {\n    difference() {\n        // Base block\n        cube([120, 80, 60]);\n        \n        // Main block\n        translate([0, 0, 30]) cube([116, 76, 50]);\n        \n        // Front door\n        translate([10, 15, 10]) door();\n        \n        // Roof\n        translate([0, 0, 60]) roof();\n        \n        // Windows (front)\n        translate([20, 10, 10]) window();\n        translate([20, 10, 10]) window();\n        \n        // Windows (back)\n        translate([20, 15, 10]) window();\n        translate([20, 15, 10]) window();\n        \n        // Chimney (left)\n        translate([45, 5, 35]) chimney();\n        translate([45, 5, 35]) chimney();\n        \n        // Chimney (right)\n        translate([45, 5, 35]) chimney();\n        translate([45, 5, 35]) chimney();\n        \n        // Roof slope\n        translate([0, 0, 36]) rotate([0, 90, 0]) roof();\n        translate([0, 0, 36]) rotate([0, 90, 0]) roof();\n    }\n}\n\n// Door\nmodule door() {\n    difference() {\n        cube([door_width, door_thickness, door_height]);\n        translate([0, 0, door_height/2 - 1]) cube([door_width - 2, door_thickness - 2, door_height]);\n    }\n}\n\n// Window\nmodule window() {\n    difference() {\n        cube([window_width, window_depth, 20]);\n        translate([window_width/2, window_depth/2, 20]) cube([window_width - 4, window_depth - 4, 2]);\n    }\n}\n\n// Chimney\nmodule chimney() {\n    difference() {\n        cylinder(h = 30, r = 2, $fn = 16);\n        translate([0, 0, -1]) cylinder(h = 20, r = 1.5, $fn = 16);\n    }\n}\n\n// Roof\nmodule roof() {\n    difference() {\n        cube([116, 76, 50]);\n        translate([0, 0, 30]) cube([116, 76, 50]);\n    }\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: Geometries in cache: 1\nGeometry cache size in bytes: 0\nCGAL Polyhedrons in cache: 0\nCGAL cache size in bytes: 0\nTotal rendering time: 0:00:00.000\nCurrent top level object is empty.\n",
      "vlm_response": null
    },
    {
      "object": "cone target",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 15,
      "code": "// Realistic 3D-printable Zylinder - medium complexity\n// Overall size: ~100mm height\n\n// Wall thickness for 3D printing - 1.2mm everywhere\nwall = 1.2;\n\n// Base dimensions\nbase_w = 80;\nbase_d = 60;\nbase_h = 10;\n\n// Cylinder body\ncylinder_h = 70;\ncylinder_r = 20;\ncylinder_r_ext = 20;\n\n// Bottom base plate\nplate_h = 5;\nplate_w = 80;\nplate_d = 70;\nplate_r = plate_w/2 - plate_d/2;\n\n// Top rim\nrim_h = 3;\nrim_w = 80;\nrim_d = 60;\nrim_r = rim_w/2 - rim_d/2;\n\n// Cylinder cap (spherical)\ncap_r = 20;\ncap_h = 20;\ncap_r_ext = 20;\n\n// Mounting holes\nhole_r = 3;\nhole_d = 6;\n\nmodule cylinder_body() {\n    difference() {\n        // Main body - ellipsoid shape\n        hull() {\n            sphere(r = cylinder_r_ext, $fn = 64);\n            translate([0, 0, -cylinder_r_ext/2])\n                sphere(r = cylinder_r_ext, $fn = 64);\n        }\n        \n        // Hollow out to save material\n        translate([0, 0, 0])\n            cylinder(h = cylinder_h - 2, r = cylinder_r_ext - wall, $fn = 64);\n    }\n}\n\nmodule plate() {\n    difference() {\n        cylinder(h = plate_h, r = plate_r, $fn = 64);\n        translate([0, 0, -plate_h/2 + 0.1])\n            cylinder(h = plate_h - 0.1, r = plate_r - wall, $fn = 64);\n    }\n}\n\nmodule bottom_plate() {\n    translate([0, 0, -base_h/2 + base_d/2])\n    difference() {\n        cylinder(h = base_h, r = plate_r, $fn = 64);\n        translate([0, 0, -plate_h/2 + base_d/2])\n            cylinder(h = base_h - plate_h, r = plate_r - wall, $fn = 64);\n    }\n}\n\nmodule cylinder_cap() {\n    difference() {\n        cylinder(h = cap_h, r = cap_r, $fn = 64);\n        translate([0, 0, -cap_h/2])\n            cylinder(h = cap_h - 2, r = cap_r - wall, $fn = 64);\n    }\n}\n\nmodule mounting_holes() {\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * base_w/2, y * base_d/2, -base_h/2 - wall/2])\n                cylinder(h = hole_d, r = hole_r, $fn = 32);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    cylinder_body();\n    plate();\n    bottom_plate();\n    cylinder_cap();\n    mounting_holes();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "interlocking piece",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 70,
      "code": "// Realistic medium-complexity 3D-printable kitchen appliance \u2013 food processor\n// Dimensions: 60mm x 40mm x 45mm\n\n// Main colors:  Black, Silver, White, Red (for buttons & control panel)\n\nmodule handle() {\n    difference() {\n        // Main handle body\n        color(\"Black\")\n        cube([30, 20, 15], center=true);\n        // Grip grooves\n        for (i = [-10:5:10])\n            translate([0, 0, i])\n                cube([1.5, 1.5, 1], center=true);\n    }\n}\n\nmodule control_panel() {\n    difference() {\n        // Panel base\n        color(\"Silver\")\n        cube([20, 20, 12], center=true);\n        // Buttons\n        for (i = [-1, 0, 1])\n            translate([12, 12, i*3])\n                color(\"Red\")\n                cylinder(h=1, r=2.5, $fn=8);\n        // LED indicator\n        translate([0, 0, 12])\n            color(\"White\")\n            sphere(r=1.5, $fn=8);\n    }\n}\n\nmodule base_plate() {\n    difference() {\n        color(\"Silver\")\n        cube([45, 45, 5], center=true);\n        // Control panel\n        translate([0, 0, -2.5])\n            color(\"Silver\")\n            cube([25, 25, 1], center=true);\n    }\n}\n\nmodule blade_assembly() {\n    // Blade assembly\n    difference() {\n        color(\"Black\")\n        cube([45, 45, 4], center=true);\n        // Blade blade\n        translate([-20, -20, -1.5])\n            cube([5, 5, 1.5], center=true);\n        // Motor housing\n        translate([0, 0, 2.5])\n            color(\"Black\")\n            cube([20, 20, 2], center=true);\n    }\n}\n\nmodule jar_spout() {\n    difference() {\n        // Jar spout\n        color(\"Red\")\n        cylinder(h=1, r=2.5, $fn=8);\n        // Spout lip\n        translate([0, 0, 0.5])\n            color(\"Black\")\n            cube([1.5, 1.5, 1.5], center=true);\n    }\n}\n\nmodule jar() {\n    difference() {\n        color(\"Silver\")\n        cube([35, 35, 3], center=true);\n        // Jar body\n        translate([0, 0, 1])\n            color(\"Black\")\n            cube([35, 35, 3], center=true);\n        // Handle grip\n        translate([0, 0, 3])\n            color(\"Red\")\n            cylinder(h=1, r=1.5, $fn=8);\n    }\n}\n\n// Assembly\nunion() {\n    handle();\n    control_panel();\n    base_plate();\n    blade_assembly();\n    jar();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "ring target",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 44,
      "code": "// Realistic 3D-printable ring target for tabletop games (approx 60 mm diameter)\n// Medium-complexity model for 3D printing, no overhangs, 1.2 mm wall thickness\n\n$fn = 36;  // Good for curves\n\nmodule ring_target() {\n    // Main ring body\n    difference() {\n        cylinder(h = 8, r = 24, center = true);\n        translate([0, 0, 1.5]) cube([48, 24, 1.5], center = true);\n    }\n    \n    // Base ring\n    difference() {\n        cylinder(h = 4, r = 24, center = true);\n        translate([0, 0, 1.5]) cube([48, 24, 1.5], center = true);\n    }\n    \n    // Central hole\n    cylinder(h = 1.5, r = 4.5, center = true);\n    \n    // Mounting holes\n    for (a = [0:30:359]) {\n        rotate([0, 0, a]) {\n            translate([22.5, 0, 0]) cylinder(h = 3, d = 2, center = true);\n        }\n    }\n    \n    // Grip rings\n    for (i = [0:30:359]) {\n        rotate([0, 0, i]) {\n            translate([0, 0, -2.5 + 0.5]) cube([24, 24, 2], center = true);\n        }\n    }\n    \n    // Decorative top ring\n    difference() {\n        cylinder(h = 1.5, r = 24, center = true);\n        translate([0, 0, 1.5]) cube([48, 24, 1.5], center = true);\n    }\n    \n    // Leg supports\n    translate([0, 0, 5]) cylinder(h = 3, r = 2, center = true);\n    translate([0, 0, -5]) cylinder(h = 3, r = 2, center = true);\n}\n\nring_target();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "puzzle connector",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 4,
      "code": "// Tapered shaft with threaded nut\n// Overall length \u2248 100 mm, diameter \u2248 4 mm, wall thickness \u2248 2 mm\n\n$fn = 36;\n\n// Main shaft\ncylinder(h = 100, d = 2.5, $fn = 36);\n\n// Threaded nut\ntranslate([0, 0, 0])\n    cylinder(h = 2, d = 4, $fn = 36);",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "puzzle piece",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 27,
      "code": "// Realistic 3D-printable wall-mounted key holder\n// Wall-mounted key holder with key slots, key pull-outs and key bed\n\n// Overall dimensions: 120mm x 80mm x 110mm\n\nmodule key_holder() {\n    // Main key bed\n    difference() {\n        cube([110, 80, 8]);\n        translate([2, 2, 2]) cube([90, 70, 6]);\n    }\n\n    // Key bed slots with key pull-outs\n    for (x = [0:2]) {\n        for (y = [0:2]) {\n            translate([x * 50, y * 50, 1.5]) {\n                cube([4, 4, 8]);\n                // Key pull-out slots\n                translate([2, 2, 0]) cube([3, 3, 1]);\n                // Key bed slot\n                translate([3, 3, 3]) cube([1, 1, 5]);\n            }\n        }\n    }\n\n    // Key slots for 4-key keys\n    for (x = [0:2]) {\n        for (y = [0:2]) {\n            translate([x * 50, y * 50, 1.5]) {\n                cube([2, 2, 8]);\n                // Key slot\n                translate([2, 2, 0]) cube([1.5, 1.5, 1]);\n                // Key bed slot\n                translate([3, 3, 3]) cube([1.5, 1.5, 5]);\n            }\n        }\n    }\n\n    // Key bed support rails\n    for (i = [0:2]) {\n        translate([0, 0, 1.5]) cube([110, 80, 2]);\n        translate([110, 0, 1.5]) cube([80, 70, 2]);\n    }\n\n    // Bottom panel for weight-saving\n    difference() {\n        cube([110, 80, 5]);\n        translate([0, 0, 2]) cube([90, 70, 10]);\n    }\n\n    // Screw holes on bottom panel\n    for (i = [0:2]) {\n        translate([i * 25, 0, 2.5]) cube([4, 4, 8]);\n        translate([i * 25, 0, -1.5]) cube([4, 4, 8]);\n    }\n\n    // Mounting brackets\n    for (i = [0:2]) {\n        for (j = [0:2]) {\n            translate([i * 50 + 15, j * 50 + 15, 0]) {\n                difference() {\n                    cube([20, 20, 8]);\n                    translate([2, 2, 2]) cube([16, 16, 6]);\n                }\n            }\n        }\n    }\n\n    // Screw heads on mounting brackets\n    for (i = [0:2]) {\n        for (j = [0:2]) {\n            translate([i * 50 + 15, j * 50 + 15, -1]) {\n                cylinder(h=2, r=3);\n            }\n        }\n    }\n\n    // Key pull-out holes\n    for (x = [0:2]) {\n        for (y = [0:2]) {\n            translate([x * 50, y * 50, 1.5]) {\n                difference() {\n                    cube([4, 4, 1]);\n                    translate([2, 2, 0]) cube([1.5, 1.5, 1]);\n                }\n            }\n        }\n    }\n\n    // Ventilation slots on side panels\n    for (x = [0:1]) {\n        for (y = [0:2]) {\n            translate([x * 50, y * 50, 1.5]) {\n                cube([3, 1, 1.5]);\n                translate([1.5, 1.5, 0]) cube([1, 1, 1]);\n            }\n        }\n    }\n\n    // Display opening on top\n    difference() {\n        cube([80, 70, 5]);\n        translate([0, 0, 2.5]) cube([70, 70, 1]);\n    }\n}\n\n// Main assembly\nkey_holder();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "puzzle cube",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 45,
      "code": "// OpenSCAD model of a realistic 3D-printable puzzle cube\n// Medium complexity, 3D-printable, ~80 mm high\n\nmodule rounded_cube(size=[40,40,40], radius=2) {\n    difference() {\n        linear_extrude(height=4, center=false)\n            hull() {\n                for (x = [-radius, radius])\n                    for (y = [-radius, radius])\n                        for (z = [-radius, radius])\n                            translate([x, y, z])\n                                sphere(r=radius);\n            }\n        // Remove inside cube\n        translate([0,0,0])\n            cube([size.x-size.y-size.z, size.y-size.z-size.x, size.z-size.x-size.y], center=true);\n    }\n}\n\n// Main body\ndifference() {\n    rounded_cube([30,30,40], 2);\n    \n    // Bottom base plate\n    translate([0,0,-8])\n        cube([30,30,2]);\n}\n\n// Top plate\ndifference() {\n    rounded_cube([30,30,40], 2);\n    translate([0,0,4])\n        cube([30,30,2]);\n}\n\n// Rear panel with handles\nfor (x = [-10, 0, 10])\n    translate([x, 0, 0])\n        cube([6,30,4]);\n\n// Side panel with slots\nfor (y = [-15, 0, 15])\n    translate([0, y, 0])\n        cube([36,30,30]);\n\n// Front panel with cut-outs\nfor (z = [-15, 0, 15])\n    translate([0, 0, z])\n        cube([36,30,25]);\n\n// Center cutouts for puzzle pieces\ndifference() {\n    translate([0,0,0])\n        cube([60,60,20]);\n    translate([0,0,0])\n        cube([40,40,20]);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "leaf",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 28,
      "code": "// Realistic medium-complexity leaf with realistic features\n\n// Overall leaf size: 80mm long, 30mm wide, 20mm tall\n\n// Colors: dark green (20%), medium green (15%), light green (10%)\n\n// Main leaf body\nmodule leaf() {\n    difference() {\n        // Central vein\n        translate([-20, -10, 0])\n            scale([1, 0.7, 0.3])\n                cylinder(h=15, r=20);\n        \n        // Veins\n        for(i = [0:5]) {\n            translate([0, 0, -10 + i*20])\n                rotate([0, 20, 0])\n                    scale([0.3, 0.1, 0.1])\n                        cylinder(h=15, r=12);\n        }\n        \n        // Bottom leaf segment\n        translate([-25, -8, -8])\n            cube([45, 12, 8]);\n    }\n}\n\n// Leaf blade\nmodule leaf_blade() {\n    difference() {\n        // Main blade\n        color([0.8, 0.6, 0.2, 0.9])\n            translate([0, 0, 0])\n                scale([0.75, 0.65, 0.45])\n                    cylinder(h=15, r=18);\n        \n        // Cut ends\n        translate([0, 0, -5])\n            cylinder(h=2, r=12);\n        translate([0, 0, 5])\n            cylinder(h=2, r=12);\n    }\n}\n\n// Leaf tip\nmodule leaf_tip() {\n    difference() {\n        color([0.9, 0.8, 0.7, 0.95])\n            translate([0, 0, 0])\n                scale([0.85, 0.75, 0.3])\n                    cylinder(h=12, r=18);\n        \n        // Base\n        translate([0, 0, 0])\n            cylinder(h=3, r=18);\n    }\n}\n\n// Stem\nmodule stem() {\n    difference() {\n        color([0.7, 0.5, 0.3, 0.85])\n            translate([0, 0, 0])\n                cylinder(h=50, r=8);\n        \n        // Top tip\n        translate([0, 0, 50])\n            cylinder(h=2, r=12);\n        \n        // Base\n        translate([0, 0, -10])\n            cylinder(h=3, r=8);\n    }\n}\n\n// Leaves on stem\nmodule leaves() {\n    for(i = [0:3]) {\n        rotate([0, 0, i*90])\n            translate([0, 0, 20])\n                rotate([0, 0, 30])\n                    leaf_blade();\n    }\n}\n\n// Leaves on leaf blade\nmodule leaves_on_blade() {\n    for(i = [0:5]) {\n        translate([0, 0, 15 + i*10])\n            rotate([0, 20, 0])\n                leaf_blade();\n    }\n}\n\n// Flower at bottom\nmodule flower() {\n    color([0.4, 0.3, 0.1, 0.8])\n    difference() {\n        cylinder(h=10, r=10);\n        translate([-20, -10, -5])\n            cylinder(h=5, r=8);\n    }\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: Geometries in cache: 1\nGeometry cache size in bytes: 0\nCGAL Polyhedrons in cache: 0\nCGAL cache size in bytes: 0\nTotal rendering time: 0:00:00.000\nCurrent top level object is empty.\n",
      "vlm_response": null
    },
    {
      "object": "tree",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 72,
      "code": "// Realistic medium-complexity 3D-printable model of a medium-sized oak tree\n// Designed for printing with 0.2mm nozzle and 1mm wall thickness\n\n// Main parameters\ntree_diameter = 80;            // Diameter of the tree trunk\ntree_height = 60;               // Height of the tree trunk\nbranch_count = 12;              // Number of branches\nbranch_length = 20;              // Length of each branch\nleaf_thickness = 1.5;           // Thickness of oak leaves\ntrunk_diameter = 12;            // Diameter of the main trunk\ntrunk_height = 30;               // Height of the main trunk\nroot_depth = 4;                  // Depth of root system\nroot_diameter = 3;               // Diameter of the root system\nsoil_depth = 0.8;                  // Depth of soil surrounding the roots\n\n// Helper functions\nmodule tree_trunk() {\n    // Main trunk cylinder\n    cylinder(h=trunk_height, r1=trunk_diameter/2, r2=trunk_diameter/2, center=true);\n}\n\nmodule oak_leaf(x_pos, y_pos, z_pos, radius) {\n    // Leaf profile using repeated circles\n    for(i = [0:2:leaf_thickness]) {\n        rotate([0, 0, i * 105]) \n            translate([radius * sin(i * 30), radius * cos(i * 30), -1]) \n                scale([1, 1, 0.4]) \n                    circle(r=0.5);\n    }\n}\n\nmodule oak_leaves() {\n    for(i = [0:2:leaf_thickness]) {\n        // Lower leaves\n        tree_trunk();\n        for(j = [1:4:leaf_thickness-1]) {\n            rotate([0, 0, i * 30 + j * 30]) \n                oak_leaf(20 + j * 3, 15 - j * 3, 2, 1);\n        }\n        // Upper leaves\n        for(j = [1:4:leaf_thickness-1]) {\n            rotate([0, 0, i * 30 + j * 30 + 30]) \n                tree_trunk();\n            for(k = [0:3:leaf_thickness-1]) {\n                rotate([0, 0, i * 30 + j * 30 + k * 30]) \n                    oak_leaf(15 - j * 3, 15 - k * 3, 1, 0.5);\n            }\n        }\n    }\n}\n\n// Create the model\nunion() {\n    // Main tree body\n    tree_trunk();\n    \n    // Leaves\n    oak_leaves();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "branch",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 30,
      "code": "// Realistic-style 3D-printable toy wooden bird\n// Medium complexity, 3-color scheme\n\n// Overall dimensions: ~80mm length, ~35mm width, ~25mm height\n\nmodule main_body() {\n    // Main cylindrical body\n    cylinder(h=20, r1=12, r2=8);\n    \n    // Rounded front face\n    translate([0,0,20]) scale([1.2,1.2,1]) sphere(r=8);\n    \n    // Wing joints\n    for(side = [-1,1]) {\n        translate([side*15,0,20]) cube([10,6,10]);\n    }\n}\n\nmodule neck_extension() {\n    translate([0,0,25]) cube([12,8,2]);\n    \n    // Wing feathers\n    for(i=[0:7]) {\n        rotate([0,0,i*120]) {\n            translate([0,0,22]) cube([0.8,0.8,0.5]);\n        }\n    }\n}\n\nmodule beak() {\n    difference() {\n        // Beak base\n        cylinder(h=3, r1=3, r2=1.5);\n        \n        // Beak tip\n        translate([0,0,2.5]) cube([1,2,0.5]);\n        \n        // Small cavity for detail\n        translate([0,0,3.5]) cube([0.5,0.5,0.5]);\n    }\n}\n\nmodule tail_base() {\n    translate([-20,0,50]) cube([10,3,2]);\n    \n    // Tail feathers\n    for(i=[0:7]) {\n        rotate([0,0,i*120]) {\n            translate([-4,0,22]) cube([0.6,0.6,0.5]);\n        }\n    }\n}\n\nmodule tail() {\n    difference() {\n        // Tail base\n        cylinder(h=10, r1=6, r2=4);\n        \n        // Tail feathers\n        for(i=[0:7]) {\n            rotate([0,0,i*120]) {\n                translate([-4,0,22]) cube([0.6,0.6,0.5]);\n            }\n        }\n    }\n}\n\nmodule feet() {\n    // Front feet\n    translate([-15,-10,-3]) rotate([0,0,90]) {\n        cylinder(h=4, r1=5, r2=3);\n        \n        translate([0,0,2]) cube([2,2,2]);\n        \n        // Toes\n        for(i=[0:4]) {\n            translate([0,0,4.5+i*1.5]) cube([1,2,1]);\n        }\n    }\n    \n    // Rear feet\n    translate([15,-10,-3]) rotate([0,0,90]) {\n        cylinder(h=4, r1=5, r2=3);\n        \n        translate([0,0,2]) cube([2,2,2]);\n        \n        for(i=[0:4]) {\n            translate([0,0,4.5+i*1.5]) cube([1,2,1]);\n        }\n    }\n}\n\nmodule color() {\n    // Main colors\n    color([0.9,0.9,0.9]) main_body();\n    color([0.1,0.1,0.1]) neck_extension();\n    color([0.4,0.3,0.3]) tail_base();\n    color([0.7,0.3,0.3]) tail();\n    \n    // Wing details\n    color([0.5,0.5,0.5])\n    for(i=[0:7]) {\n        rotate([0,0,i*120]) {\n            color([0.6,0.4,0.2])\n            translate([0,0,22]) \n            scale([0.7,0.7,0.7])\n            sphere(r=1.5);\n        }\n    }\n}\n\n// Generate the 3D model\ncolor();",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: WARNING: Too many unnamed arguments supplied in file branch.scad, line 95\nWARNING: Too many unnamed arguments supplied in file branch.scad, line 95\nWARNING: Too many unnamed arguments supplied in file",
      "vlm_response": null
    },
    {
      "object": "coral",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 15,
      "code": "// Realistic Medium-Complexity Realistic Coral (Laminaria)\n// Dimensions: 100mm tall, 60mm wide, 40mm deep\n// Wall thickness: 2mm for 3D printing\n\n// Main coral body module\nmodule coral_body() {\n    difference() {\n        // Main body sphere\n        sphere(d = 25);\n        \n        // Add texture rings\n        for (i = [0:5:10]) {\n            rotate([0, 0, i * 20])\n                translate([10, 0, 0])\n                    scale([1 + (i - 10) * 0.3, 1 + (i - 10) * 0.3, 1 + (i - 10) * 0.3])\n                        sphere(d = 8);\n        }\n        \n        // Central cavity\n        sphere(d = 20);\n    }\n}\n\n// Light green algae bloom module\nmodule algae_bloom() {\n    color(0.7) {\n        translate([0, 0, 0])\n            scale([1, 0.8, 1])\n                sphere(d = 12);\n    }\n}\n\n// White coral crystals module\nmodule coral_crystals() {\n    for (i = [0:120:359]) {\n        rotate([0, 0, i])\n            translate([0, 0, 2])\n                scale([0.05, 0.05, 1])\n                    sphere(d = 1.5);\n    }\n}\n\n// White coral branch module\nmodule coral_branch() {\n    color([1, 1, 1]) {\n        translate([0, 0, 50])\n            rotate([0, 0, 30])\n                linear_extrude(height = 0.3)\n                    circle(d = 4);\n    }\n}\n\n// Yellow coral coral\nmodule yellow_coral() {\n    color([0.95, 0.95, 0.95]) {\n        translate([0, 0, 25])\n            rotate([0, 0, 0])\n                scale([0.8, 0.8, 1])\n                    sphere(d = 3);\n    }\n}\n\n// Water droplet module\nmodule water_droplet() {\n    translate([0, 0, 15])\n        sphere(d = 1.5);\n}\n\n// Assembly\nunion() {\n    coral_body();\n    \n    // Create algae\n    algae_bloom();\n    \n    // Add crystals\n    coral_crystals();\n    \n    // Add branches\n    coral_branch();\n    \n    // Add water droplets\n    water_droplet();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "shell",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 96,
      "code": "// OpenSCAD model of a realistic-ish toy chest with features\n// Overall size ~120mm x 80mm x 60mm (printable without support)\n\n$fn=36;          // Medium smooth curves\nwall=2;           // 2mm walls for 3D printing\n\nmodule chest() {\n    // Base\n    difference() {\n        cube([110, 80, 40], center=true);\n        translate([0, 0, 5]) cube([110, 80, 40], center=true);\n    }\n\n    // Top\n    difference() {\n        cube([110, 80, 60], center=true);\n        translate([0, 0, 5]) cube([110, 80, 60], center=true);\n    }\n\n    // Front panel\n    difference() {\n        cube([70, 50, 30], center=true);\n        translate([0, 0, -5]) cube([70, 50, 30], center=true);\n    }\n\n    // Back panel\n    difference() {\n        cube([70, 50, 30], center=true);\n        translate([0, 0, 5]) cube([70, 50, 30], center=true);\n    }\n\n    // Left lid\n    difference() {\n        cube([60, 40, 30], center=true);\n        translate([0, 0, 0]) cube([60, 40, 30], center=true);\n    }\n\n    // Right lid\n    difference() {\n        cube([60, 40, 30], center=true);\n        translate([0, 0, 0]) cube([60, 40, 30], center=true);\n    }\n\n    // Front flaps (2)\n    difference() {\n        cube([60, 40, 25], center=true);\n        translate([0, 0, 5]) cube([60, 40, 25], center=true);\n    }\n    difference() {\n        cube([60, 40, 25], center=true);\n        translate([0, 0, 5]) cube([60, 40, 25], center=true);\n    }\n\n    // Bottom flaps (2)\n    difference() {\n        cube([70, 40, 25], center=true);\n        translate([0, 0, 5]) cube([70, 40, 25], center=true);\n    }\n    difference() {\n        cube([70, 40, 25], center=true);\n        translate([0, 0, 5]) cube([70, 40, 25], center=true);\n    }\n\n    // Rear panel (3)\n    difference() {\n        cube([50, 35, 30], center=true);\n        translate([0, 0, 5]) cube([50, 35, 30], center=true);\n    }\n    difference() {\n        cube([50, 35, 30], center=true);\n        translate([0, 0, 5]) cube([50, 35, 30], center=true);\n    }\n\n    // Handle\n    difference() {\n        cube([30, 20, 8], center=true);\n        translate([0, 0, 4]) cube([30, 20, 8], center=true);\n    }\n    difference() {\n        cube([30, 20, 8], center=true);\n        translate([0, 0, 4]) cube([30, 20, 8], center=true);\n    }\n\n    // Decorative trim around edges\n    difference() {\n        cube([110, 80, 30], center=true);\n        translate([0, 0, 0]) cube([110, 80, 30], center=true);\n    }\n}\n\ntranslate([0, 0, 0]) chest();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "nautilus",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 70,
      "code": "// Medium complexity realistic nautilus shell\n// Overall size: ~80mm diameter x ~45mm tall\n\n$fn = 32; // Smooth curves for printing\n\nmodule nautilus() {\n    // Main shell body\n    difference() {\n        scale([1, 0.8, 0.9]) sphere(d = 45);\n        \n        // Top curve\n        translate([0, 0, 10]) cylinder(h = 35, r1 = 25, r2 = 22);\n        \n        // Bottom curve\n        translate([0, 0, -10]) cylinder(h = 35, r1 = 25, r2 = 22);\n    }\n    \n    // Spiral grooves\n    for (i = [0:15]) {\n        rotate([0, 0, i*30]) {\n            translate([25, 0, -20 + i*12]) rotate([0, 90, 0])\n                linear_extrude(height = 0.4, scale = [1, 0.6, 0.5])\n                    polygon(points = [\n                        [0, 0],\n                        [0, 0],\n                        [0, 8],\n                        [0, 16],\n                        [0, 20],\n                        [0, 24],\n                        [0, 28],\n                        [0, 32],\n                        [0, 36],\n                        [0, 40],\n                        [0, 44],\n                        [0, 48],\n                        [0, 50],\n                        [0, 52],\n                        [0, 54],\n                        [0, 56],\n                        [0, 58],\n                        [0, 60]\n                    ]);\n        }\n    }\n    \n    // Mouth\n    translate([0, 0, -20]) rotate([0, 0, 30])\n        cylinder(h = 10, r1 = 20, r2 = 18);\n    \n    // Nostrils\n    translate([0, 0, -20]) rotate([0, 0, -30])\n        cylinder(h = 3, r1 = 10, r2 = 8);\n    \n    // Eyes\n    translate([0, 0, 22.5]) sphere(d = 4);\n    translate([0, 0, -22.5]) sphere(d = 4);\n    \n    // Leg markings\n    for (x = [-15:10:15]) {\n        translate([x, 0, 22.5]) cube([0.5, 1, 0.5]);\n    }\n    for (x = [-15:10:15]) {\n        translate([x, 0, -22.5]) cube([0.5, 1, 0.5]);\n    }\n    \n    // Small ridges on shell surface\n    for (x = [-25:5:25]) {\n        for (y = [-15:10:15]) {\n            translate([x, y, 18.5]) cube([0.3, 0.3, 0.3]);\n        }\n    }\n    \n    // Small ridges on spiral grooves\n    for (i = [0:15]) {\n        rotate([0, 0, i*30])\n            translate([25, 0, -20 + i*12])\n                linear_extrude(height = 0.4, scale = [1, 0.6, 0.5])\n                    polygon(points = [\n                        [0, 0],\n                        [0, 0],\n                        [0, 8],\n                        [0, 16],\n                        [0, 20],\n                        [0, 24],\n                        [0, 28],\n                        [0, 32],\n                        [0, 36],\n                        [0, 40],\n                        [0, 44],\n                        [0, 48],\n                        [0, 50],\n                        [0, 52],\n                        [0, 54],\n                        [0, 56],\n                        [0, 58],\n                        [0, 60],\n                        [0, 62],\n                        [0, 64],\n                        [0, 66],\n                        [0, 68],\n                        [0, 70],\n                        [0, 72]\n                    ]);\n        }\n    }\n    \n    // Water lines on bottom\n    for (i = [0:10:20]) {\n        translate([0, 0, -12 + i*3.5]) rotate([0, 0, 15 + i*15])\n            difference() {\n                cylinder(h = 1, r1 = 20, r2 = 18);\n                translate([0, 0, 2]) cylinder(h = 2, r1 = 20, r2 = 18);\n            }\n    }\n    \n    // Base ring\n    difference() {\n        cylinder(h = 3, r1 = 30, r2 = 25);\n        translate([0, 0, -0.5]) cylinder(h = 2, r1 = 25, r2 = 23);\n    }\n}\n\n// Main assembly\nnautilus();",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: ERROR: Parser error: syntax error in file evaluation/ThomasTheMaker_k-1b_20251029_161318/nautilus.scad, line 121\nCan't parse file 'evaluation/ThomasTheMaker_k-1b_20251029_161318/nautilus.scad'!\n\n",
      "vlm_response": null
    },
    {
      "object": "snowflake",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 13,
      "code": "// Realistic Snowflake - Medium Complexity\n// Designed for 3D printing with no overhangs, 2 mm walls, 1.2 mm height\n\n$fn = 32;  // Smooth curves\n\n// Main body\nmodule body() {\n    difference() {\n        sphere(d = 20);  // Main body\n        sphere(d = 15);  // Inner cavity\n    }\n}\n\n// Wings - two wings with simple curve\nmodule wings() {\n    for (side = [-1, 1]) {\n        // Left wing\n        translate([0, side * 15, 5]) {\n            scale([1.2, 0.8, 1]) {\n                rotate([0, 0, side * 90]) {\n                    difference() {\n                        cube([6, 6, 8]);\n                        translate([1, 1, 0]) cube([4, 4, 7]);\n                    }\n                }\n            }\n        }\n        // Right wing\n        translate([0, side * 15, -5]) {\n            scale([1.2, 0.8, 1]) {\n                rotate([0, 0, side * 90]) {\n                    difference() {\n                        cube([6, 6, 8]);\n                        translate([1, 1, 0]) cube([4, 4, 7]);\n                    }\n                }\n            }\n        }\n    }\n}\n\n// Base with support\nmodule base() {\n    difference() {\n        cylinder(h = 2, d = 25);\n        cylinder(h = 2, d = 20);\n    }\n}\n\n// Snowflake tip\nmodule tip() {\n    difference() {\n        sphere(d = 12);\n        sphere(d = 8);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    body();\n    \n    // Wings\n    translate([0, 0, 3]) wings();\n    translate([0, 0, -3]) wings();\n    \n    // Base\n    base();\n    \n    // Tips\n    tip();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "crystal",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 88,
      "code": "// Realistic Medium-Complexity T-shirt with subtle features\n// Designed for 3D printing - no overhangs, 2mm wall thickness, no steep angles\n\nmodule shirt_body() {\n    // Main body with slight taper\n    difference() {\n        // Outer body\n        translate([0, 0, 0])\n            scale([1.2, 0.8, 1])\n            sphere(12, $fn=32);\n        \n        // Hollow interior\n        translate([0, 0, -0.5])\n            scale([1.1, 0.7, 0.8])\n            sphere(10, $fn=32);\n    }\n}\n\nmodule collar() {\n    // Simple collar with slight angle cutouts\n    difference() {\n        // Collar body\n        translate([0, 0, 10])\n            cube([16, 20, 6], center=true);\n        \n        // Cutout for neck\n        translate([0, 0, 12])\n            cube([12, 22, 4], center=true);\n        \n        // Neck hole\n        translate([0, 0, 12])\n            cylinder(h=3, r=3, center=true);\n    }\n}\n\nmodule cuffs() {\n    // Two cuff buttons with subtle texture\n    difference() {\n        // Cuff cuff\n        translate([0, -1, 12])\n            cylinder(h=3, r=5, center=true);\n        \n        // Button indentations\n        for (i = [0:1]) {\n            translate([0, -1, 12 + i * 3])\n                cylinder(h=0.5, r=3.5, center=true);\n        }\n    }\n}\n\nmodule button() {\n    // Small button with rounded top\n    difference() {\n        // Button body\n        translate([0, 0, 10.5])\n            sphere(2, $fn=16);\n        \n        // Rounded top edge\n        translate([0, 0, 11])\n            scale([1, 0.8, 0.6])\n            sphere(1.5, $fn=16);\n    }\n}\n\nmodule chest_detail() {\n    // Small detail on left chest\n    difference() {\n        translate([0, 0, -3])\n            cube([4, 3, 3], center=true);\n        \n        // Cutout for collar\n        translate([0, 0, 1.5])\n            cube([3, 2, 2.5], center=true);\n    }\n}\n\nmodule waistband() {\n    // Simple waistband\n    difference() {\n        // Waistband strip\n        translate([0, 0, -4])\n            cube([8, 2, 3], center=true);\n        \n        // Cutout for buttons\n        for (i = [0:1]) {\n            translate([0, 0, -4 + i * 0.5])\n                cylinder(h=1.5, r=2.5, center=true);\n        }\n    }\n}\n\nmodule seam() {\n    // Basic seam line\n    difference() {\n        translate([0, 0, -4])\n            cube([8, 2, 2], center=true);\n        \n        // Hollow center\n        translate([0, 0, 1.5])\n            cube([8, 2, 2.5], center=true);\n    }\n}\n\n// Main assembly\nunion() {\n    // Body\n    shirt_body();\n    \n    // Collar\n    collar();\n    \n    // Cuffs\n    cuffs();\n    \n    // Button details\n    button();\n    \n    // Chest detail\n    chest_detail();\n    \n    // Waistband\n    waistband();\n    \n    // Seam\n    seam();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "checkerboard",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 52,
      "code": "// Checkerboard Tile (realistic style, medium complexity)\n// A classic checkerboard tile with slight bevel and 2D marks\n\n// Main module for one checkerboard tile\nmodule checkerboard_tile(width=80, depth=60, height=20) {\n    // Base layer with 2D marks\n    difference() {\n        cube([width, depth, height], center=true);\n        cube([width-1, depth-1, height], center=true);\n    }\n\n    // Beveled top edge\n    difference() {\n        cube([width+2, depth+2, height+2], center=true);\n        cube([width, depth, height], center=true);\n    }\n\n    // Central square\n    difference() {\n        cube([width+1, depth+1, height+1], center=true);\n        cube([width-1, depth-1, height-1], center=true);\n    }\n\n    // Corner square\n    difference() {\n        cube([width-1, depth-1, height-1], center=true);\n        cube([width-1, depth-1, height-1], center=true);\n    }\n\n    // Small bevel lines at top corners\n    for (x = [0, width-1]) {\n        for (y = [0, depth-1]) {\n            translate([x, y, height/2]) {\n                cube([1, 1, height/2], center=true);\n            }\n        }\n    }\n\n    // Corner square marks\n    difference() {\n        cube([width-1, depth-1, height-1], center=true);\n        cube([width-1, depth-1, height-1], center=true);\n    }\n\n    // Optional small text (checkers)\n    translate([width/4, depth/4, height/4]) {\n        cube([0.5, 0.5, 1], center=true);\n    }",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: ERROR: Parser error: syntax error in file evaluation/ThomasTheMaker_k-1b_20251029_161318/checkerboard.scad, line 50\nCan't parse file 'evaluation/ThomasTheMaker_k-1b_20251029_161318/checkerboard.scad'!",
      "vlm_response": null
    },
    {
      "object": "wave packet",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 20,
      "code": "// OpenSCAD Wave Packet \u2013 Realistic medium-complexity model\n\n// Overall dimensions\nwidth = 40;\nheight = 25;\ndepth = 12;\n\n// Wall thickness\nwall = 2;\n\n// Base plate\nmodule base_plate() {\n    difference() {\n        cube([width, height, depth], center=true);\n        translate([0, 0, -wall/2]) cube([width-wall*2, height-wall*2, depth], center=true);\n    }\n}\n\n// Main wave body\nmodule wave_body() {\n    difference() {\n        cube([width, height, depth]);\n        translate([0, 0, depth/2]) cube([width, height, depth], center=true);\n    }\n}\n\n// Wave face\nmodule wave_face() {\n    difference() {\n        cube([width, height, depth]);\n        translate([0, 0, -wall/2]) cube([width, height, depth], center=true);\n    }\n}\n\n// Edge details\nmodule edges() {\n    // Top edge\n    translate([0, height/2 - 2, -wall/2]) cube([width, 2, depth], center=true);\n    // Bottom edge\n    translate([0, -height/2 + 2, -wall/2]) cube([width, 2, depth], center=true);\n    // Side edges\n    for (x = [1, width-1]) {\n        translate([x, height/2 - 2, -wall/2]) cube([width, 2, depth], center=true);\n    }\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    for (x = [1, width-1]) {\n        for (z = [1, depth/2]) {\n            translate([x, height/2 - 3, z]) rotate([0, 90, 0]) cube([width*0.2, 2, wall]);\n            translate([x, height/2 - 3, -z]) rotate([0, 90, 0]) cube([2, 2, wall]);\n        }\n    }\n}\n\n// Control knobs\nmodule knobs() {\n    // Control knob\n    translate([width/2 - 1, 0, 0]) rotate([90, 0, 0]) cylinder(h=1.5, r1=3, r2=2);\n    // Power knob\n    translate([width/2 - 1, 0, 0]) rotate([90, 0, 0]) cylinder(h=1.5, r1=3, r2=2);\n}\n\n// Front panel\nmodule panel() {\n    difference() {\n        cube([width*0.7, height*0.7, depth*0.7]);\n        translate([0, 0, 0]) cube([width*0.7, height*0.7, depth*0.7], center=true);\n        translate([0, 0, 0]) cube([width*0.7-wall*2, height*0.7-wall*2, depth*0.7-wall*2], center=true);\n    }\n}\n\n// Base\nmodule base() {\n    difference() {\n        cube([width*0.8, height*0.8, depth*0.8]);\n        translate([0, 0, -wall/2]) cube([width*0.8, height*0.8, depth*0.8], center=true);\n        translate([0, 0, -wall/2]) cube([width*0.8-wall*2, height*0.8-wall*2, depth*0.8], center=true);\n    }\n}\n\n// Assembly\nmodule assembly() {\n    difference() {\n        union() {\n            base_plate();\n            wave_body();\n            wave_face();\n            edges();\n            ribs();\n            knobs();\n            panel();\n            base();\n        }\n        \n        // Add small details\n        translate([0, height*0.7, depth*0.7]) sphere(r=3);\n        translate([0, height*0.7, 0]) sphere(r=3);\n    }\n}\n\n// Render\nassembly();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "interference pattern",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 52,
      "code": "// Realistic 3D-printable miniature keyboard case with case-back\n// Medium complexity, 100mm x 60mm x 8mm footprint\n\n// Overall dimensions\ncase_width = 100;\ncase_length = 60;\ncase_height = 8;\nwall_thickness = 2;\n\n// Main case body with rounded edges\nmodule main_case() {\n    difference() {\n        // Main shell\n        cube([case_length, case_width, case_height], center=true);\n\n        // Chamfer top edge\n        translate([0, 0, case_height/2 - 1])\n            cube([case_length, case_width, 2], center=true);\n        \n        // Bottom cavity\n        translate([0, 0, -1])\n            cube([case_length - 10, case_width - 10, case_height + 2], center=true);\n    }\n}\n\n// Front panel with keycaps and buttons\nmodule front_panel() {\n    // Keycaps\n    for (i = [0:3]) {\n        translate([i * 8, 0, case_height + 2])\n            cube([12, 14, 1.5], center=true);\n    }\n    \n    // Buttons\n    for (i = [0:2]) {\n        translate([i * 6, 0, case_height + 4])\n            cube([14, 3, 0.5], center=true);\n    }\n    \n    // Function keys\n    for (i = [0:2]) {\n        translate([i * 5, 0, case_height + 1])\n            cube([2, 4, 0.3], center=true);\n    }\n    \n    // Power button\n    translate([case_length/2 - 4, 0, case_height + 5])\n        cube([5, 2, 1], center=true);\n}\n\n// Side panels for support\nmodule side_panels() {\n    difference() {\n        // Base\n        cube([case_length - 6, case_width - 6, case_height - 2], center=true);\n        \n        // Cutout for case-back\n        translate([0, 0, case_height - 2])\n            cube([case_length - 10, case_width - 10, 3], center=true);\n        \n        // Chamfer top edges\n        translate([0, 0, case_height - 2])\n            cube([case_length - 10, case_width - 10, 2], center=true);\n        \n        translate([0, 0, case_height - 2])\n            cube([case_length - 10, case_width - 10, 3], center=true);\n    }\n}\n\n// Rear panel\nmodule rear_panel() {\n    difference() {\n        cube([case_length - 10, case_width - 10, case_height - 2], center=true);\n        \n        // Cutout for case-back\n        translate([0, 0, case_height - 2])\n            cube([case_length - 10, case_width - 10, 3], center=true);\n        \n        // Ventilation slots\n        for (i = [0:1]) {\n            for (j = [0:3]) {\n                translate([i * 10, j * 10, case_height - 10])\n                    cube([1, 1, 0.5], center=true);\n            }\n        }\n    }\n}\n\n// Case-back with branding and ports\nmodule case_back() {\n    difference() {\n        // Main case-back\n        cube([case_length - 20, case_width - 20, case_height - 3], center=true);\n        \n        // Port labels\n        translate([0, 0, case_height - 3])\n            cube([10, 10, 0.5], center=true);\n        \n        // Port openings\n        translate([0, 0, case_height - 5])\n            cube([10, 10, 1], center=true);\n    }\n}\n\n// Base stand for stability\nmodule base_stand() {\n    difference() {\n        // Base plate\n        cube([case_length + 4, case_width + 4, 3], center=true);\n        \n        // Screw holes\n        for (x = [0:3]) {\n            for (y = [0:3]) {\n                translate([x, y, 0])\n                    cylinder(h=1, r=1, center=true);\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main case\n    main_case();\n    \n    // Front panel\n    front_panel();\n    \n    // Side panels\n    side_panels();\n    \n    // Rear panel\n    rear_panel();\n    \n    // Case-back\n    case_back();\n    \n    // Base stand\n    base_stand();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "chamfered cube",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 75,
      "code": "// Rounded cylinder with medium wall thickness\n$fn = 30;           // Smooth curves\nr = 30;              // Outer radius\nh = 20;               // Outer height\nwall = 2;             // Wall thickness\n\ndifference() {\n    cylinder(h = h, r = r, center = false);\n    translate([0, 0, h/2])\n        cylinder(h = h/2, r = r - wall, center = false);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no. the image shows a pill bottle, which is not a chamfered cube. a chamfered cube would have smooth surfaces, while the pill bottle in this image has a textured surface, giving it an irregular shape that differs from a cube."
    },
    {
      "object": "rounded cube",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 99,
      "code": "// Realistic 3D-Printable Kitchen Appliance \u2013 Coffee Maker\n// Medium complexity, 3D-printable, no supports needed\n\n// Overall dimensions: 120mm wide x 80mm deep x 120mm tall\n\n// Wall thickness for 3D printing\nwall = 2;\n\n// Main housing body\nmodule main_body() {\n    difference() {\n        // Outer shell\n        cube([120, 80, 120], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 0])\n            cube([116, 76, 116], center=true);\n    }\n}\n\n// Base with handle\nmodule base() {\n    difference() {\n        // Main base\n        cube([120, 80, 4], center=true);\n        \n        // Handle cutout\n        translate([30, 0, -10])\n            cube([50, 80, 10], center=true);\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    difference() {\n        // Panel base\n        cube([50, 40, 10], center=true);\n        \n        // Buttons and dial\n        translate([5, 20, 0])\n            cube([25, 20, 5], center=true);\n        translate([5, -20, 0])\n            cube([25, 20, 5], center=true);\n    }\n}\n\n// Water reservoir\nmodule water_reservoir() {\n    difference() {\n        cylinder(h=60, r=30, center=true);\n        \n        translate([0, 0, -2])\n            cylinder(h=60, r=25, center=true);\n    }\n}\n\n// Glass carafe\nmodule carafe() {\n    difference() {\n        translate([0, 0, 20])\n            cylinder(h=100, r=35, center=true);\n        \n        // Base\n        cube([80, 40, 4], center=true);\n        \n        // Handle cutout\n        translate([0, 0, 40])\n            cube([8, 4, 10], center=true);\n    }\n}\n\n// Coffee spout\nmodule spout() {\n    difference() {\n        // Base\n        cube([60, 30, 10], center=true);\n        \n        // Spout hole\n        translate([0, 0, 20])\n            cylinder(h=20, r=5, center=true);\n    }\n}\n\n// Steam vent\nmodule steam_vent() {\n    difference() {\n        cube([60, 30, 20], center=true);\n        \n        // Vent opening\n        translate([0, 0, 10])\n            cube([50, 25, 15], center=true);\n    }\n}\n\n// Heating element\nmodule heating_element() {\n    difference() {\n        cube([40, 30, 15], center=true);\n        \n        translate([0, 0, 5])\n            cube([36, 26, 12], center=true);\n    }\n}\n\n// Power cord\nmodule power_cord() {\n    difference() {\n        cube([60, 30, 5], center=true);\n        \n        translate([0, 0, 30])\n            cube([60, 30, 5], center=true);\n    }\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: Geometries in cache: 1\nGeometry cache size in bytes: 0\nCGAL Polyhedrons in cache: 0\nCGAL cache size in bytes: 0\nTotal rendering time: 0:00:00.000\nCurrent top level object is empty.\n",
      "vlm_response": null
    },
    {
      "object": "striped pattern",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 28,
      "code": "// Realistic-style 3D-Printable Coffee Table \u2013 Medium Complexity\n\n// Overall dimensions (mm)\ntable_width = 120;\ntable_depth = 80;\ntable_height = 40;\nleg_height = 40;\ntop_thickness = 4;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main table top\nmodule table_top() {\n    difference() {\n        // Main top surface\n        cube([table_width, table_depth, table_height], center=true);\n        \n        // Rounded corners\n        for (x = [-table_width/2 + 5, table_width/2 - 5])\n            for (y = [-table_depth/2 + 5, table_depth/2 - 5])\n                translate([x, y, 0])\n                    rotate([0, 15, 0])\n                        scale([1, 1, 0.8])\n                            cylinder(h=table_height*0.6, r=3, $fn=6);\n    }\n}\n\n// Coffee table legs with 3D-printable mounting points\nmodule coffee_table_legs() {\n    // Front left\n    translate([-table_width/2 - 15, -table_depth/2 - 10, -leg_height/2])\n        rotate([0, 0, -20])\n            cylinder(h=leg_height + 2, r=5, $fn=32);\n    \n    // Front right\n    translate([-table_width/2 + 15, -table_depth/2 - 10, -leg_height/2])\n        rotate([0, 0, 20])\n            cylinder(h=leg_height + 2, r=5, $fn=32);\n    \n    // Rear left\n    translate([table_width/2 + 15, -table_depth/2 - 10, -leg_height/2])\n        rotate([0, 0, -30])\n            cylinder(h=leg_height + 2, r=5, $fn=32);\n    \n    // Rear right\n    translate([table_width/2 + 15, table_depth/2 - 10, -leg_height/2])\n        rotate([0, 0, 30])\n            cylinder(h=leg_height + 2, r=5, $fn=32);\n}\n\n// Table legs with 3D-printable mounting holes\nmodule table_legs_mounting() {\n    // Left leg\n    translate([-table_width/2 - 10, -table_depth/2 - 10, -leg_height/2])\n        cylinder(h=leg_height - wall_thickness*2, r=6, $fn=32);\n    \n    // Right leg\n    translate([table_width/2 + 10, -table_depth/2 - 10, -leg_height/2])\n        cylinder(h=leg_height - wall_thickness*2, r=6, $fn=32);\n    \n    // Corner supports\n    for (x = [-table_width/2 + 5, table_width/2 - 5])\n        for (y = [-table_depth/2 + 5, table_depth/2 - 5])\n            translate([x, y, -leg_height/2])\n                cylinder(h=leg_height + 2, r=3, $fn=32);\n}\n\n// Support legs under tabletop\nmodule support_legs() {\n    // Front support leg\n    translate([0, -table_depth/2 - 10, -leg_height/2 + 10])\n        cylinder(h=leg_height - wall_thickness*2, r=6, $fn=32);\n    \n    // Back support leg\n    translate([0, table_depth/2 + 10, -leg_height/2 + 10])\n        cylinder(h=leg_height - wall_thickness*2, r=6, $fn=32);\n}\n\n// Coffee table surface\nmodule coffee_table_surface() {\n    // Main surface area\n    translate([0, 0, -table_height/2 + 5])\n        cube([table_width - wall_thickness*2, table_depth - wall_thickness*2, table_height - 5], center=true);\n    \n    // Rounded corners\n    for (x = [-table_width/2 + 5, table_width/2 - 5])\n        for (y = [-table_depth/2 + 5, table_depth/2 - 5])\n            translate([x, y, 0])\n                rotate([0, 15, 0])\n                    scale([1, 1, 0.8])\n                        cylinder(h=table_height/2, r=4, $fn=6);\n}\n\n// Assembly\nunion() {\n    // Main components\n    table_top();\n    coffee_table_legs();\n    support_legs();\n    coffee_table_surface();\n    \n    // Support legs under table\n    support_legs();\n    \n    // Assembly\n    translate([0, 0, -table_height/2 - 10])\n        table_top();\n        \n    translate([0, 0, -leg_height/2 - 10])\n        coffee_table_legs();\n    translate([0, 0, -leg_height/2 - 10])\n        table_legs_mounting();\n    translate([0, 0, -leg_height/2 - 10])\n        support_legs();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "beveled cube",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 96,
      "code": "// Beveled box with rounded edges, approximately 120mm x 100mm x 80mm\n// All walls are 2mm thick, no overhangs, no cutting\n\ndifference() {\n    // Main rectangular box body\n    cube([120, 100, 80], center=true);\n    \n    // Rounded top and bottom edges\n    translate([0, 0, 40]) rotate([0, 15, 0]) cube([120-2*10, 100-2*10, 80], center=true);\n    translate([0, 0, -40]) rotate([0, 15, 0]) cube([120-2*10, 100-2*10, 80], center=true);\n    \n    // Front face bevel\n    translate([0, 0, 40]) rotate([0, 15, 0]) linear_extrude(height=0.1, convexity=4) polygon(points=[[0,0],[120,0],[100,0],[100,80],[0,80]]);\n    \n    // Back face bevel\n    translate([0, 0, -40]) rotate([0, 15, 0]) linear_extrude(height=0.1, convexity=4) polygon(points=[[0,0],[120,0],[100,0],[100,80],[0,80]]);\n    \n    // Left face bevel\n    translate([0, 80, 40]) rotate([0, 0, 15]) linear_extrude(height=0.1, convexity=4) polygon(points=[[0,0],[120,80],[100,80],[100,0],[0,0]]);\n    \n    // Right face bevel\n    translate([0, 80, -40]) rotate([0, 0, 15]) linear_extrude(height=0.1, convexity=4) polygon(points=[[0,0],[120,80],[100,80],[100,0],[0,0]]);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "gradient shape",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 53,
      "code": "// Realistic Medium-Complexity Kitchen Appliance \u2013 Refrigerator\n// Dimensions: ~80mm (L) x 60mm (W) x 110mm (H)\n\n// Wall thickness constant for 3D printing\nwall = 2;\n\n// Main body module\nmodule refrigerator_body() {\n    difference() {\n        // Outer shell\n        cube([80, 60, 110], center=true);\n        \n        // Hollow out interior\n        translate([0, 0, 10])\n            cube([76, 56, 100], center=true);\n    }\n}\n\n// Inner cavity\nmodule interior() {\n    difference() {\n        translate([0, 0, 110/2])\n            cube([76, 56, 100], center=true);\n        \n        // Door cavity\n        translate([0, 0, 110/2 - 8])\n            cube([76, 56, 8], center=true);\n    }\n}\n\n// Door assembly\nmodule door() {\n    difference() {\n        cube([66, 54, 90], center=true);\n        translate([0, 0, 110/2 - 8])\n            cube([64, 52, 88], center=true);\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    difference() {\n        cube([20, 10, 45], center=true);\n        translate([10, 0, 20])\n            cube([15, 8, 35], center=true);\n    }\n}\n\n// Temperature control dial\nmodule dial() {\n    difference() {\n        cylinder(h=3, r1=5, r2=3, center=true);\n        translate([0, 0, 3])\n            cylinder(h=3, r1=5, r2=3, center=true);\n    }\n}\n\n// Ice drawer\nmodule ice_drawer() {\n    difference() {\n        cube([28, 38, 8], center=true);\n        translate([0, 0, 0])\n            cube([26, 34, 6], center=true);\n    }\n}\n\n// Ice dispenser\nmodule ice_dispenser() {\n    difference() {\n        cube([8, 6, 40], center=true);\n        translate([0, 0, 0])\n            cube([6, 4, 40], center=true);\n    }\n}\n\n// Water dispenser\nmodule water_dispenser() {\n    difference() {\n        cube([12, 8, 40], center=true);\n        translate([0, 0, 10])\n            cube([10, 6, 40], center=true);\n    }\n}\n\n// Vent slots on back panel\nmodule vent_slots() {\n    for (i = [0:2]) {\n        translate([0, -10 + i*15, 100 - 15 + 15])\n            cube([2, 2, 3], center=true);\n    }\n}\n\n// LED indicator on door\nmodule indicator() {\n    cylinder(h=2, r=2, center=true);\n}\n\n// Front panel buttons\nmodule buttons() {\n    // Power button\n    translate([15, 5, 20])\n        cube([8, 4, 4], center=true);\n    translate([-10, 5, 20])\n        cube([8, 4, 4], center=true);\n    \n    // Speed control buttons\n    translate([10, 5, 25])\n        cube([4, 2, 4], center=true);\n    translate([10, 5, 25])\n        cube([4, 2, 4], center=true);\n}\n\n// Top handle\nmodule handle() {\n    difference() {\n        cylinder(h=20, r1=4, r2=3, center=true);\n        translate([0, 0, 20])\n            cylinder(h=10, r1=4, r2=3, center=true);\n    }\n}\n\n// Base feet\nmodule feet() {\n    for (x = [-15, 15])\n        for (y = [-15, 15])\n            translate([x, y, -40/2])\n                cylinder(h=5, r=2, center=true);\n}\n\n// Assembly\nunion() {\n    difference() {\n        // Main body\n        translate([0, 0, 0])\n            rotate([0, 90, 0])\n                translate([0, 0, 0])\n                    sphere(r=6);\n        \n        // Inner cavity\n        translate([0, 0, 110/2])\n            rotate([0, 90, 0])\n                translate([0, 0, 100/2])\n                    sphere(r=3);\n    }\n    \n    // Doors and handles\n    door();\n    translate([0, 0, 100/2])\n        rotate([0, 90, 0])\n            translate([0, 0, 110/2 - 8])\n                handle();\n    translate([0, 0, 110/2])\n        rotate([0, 90, 0])\n            translate([0, 0, 100/2 - 8])\n                handle();\n    \n    // Control panel\n    control_panel();\n    translate([0, 0, 110/2 - 8])\n        rotate([0, 90, 0])\n            translate([0, 0, 110/2 - 8])\n                dial();\n    \n    // Ice drawer\n    ice_drawer();\n    translate([0, 0, 110/2 - 8])\n        rotate([0, 90, 0])\n            translate([0, 0, 100/2 - 8])\n                ice_dispenser();\n    \n    // Ice dispenser\n    ice_dispenser();\n    translate([0, 0, 110/2 - 8])\n        rotate([0, 90, 0])\n            translate([0, 0, 100/2 - 8])\n                water_dispenser();\n    \n    // Ventilation\n    vent_slots();\n    \n    // LED indicator\n    indicator();\n    translate([15, 5, 20])\n        cube([8, 4, 2], center=true);\n    \n    // Buttons\n    buttons();\n    translate([10, 5, 25])\n        cube([4, 2, 4], center=true);\n    translate([10, 5, 25])\n        cube([4, 2, 4], center=true);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "sliced cube",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 16,
      "code": "// Realistic Medium-Complexity 3D-Printable Model of a 1960s-era American Automatic Electric Vehicle (AEV)\n\n// Overall scale: ~70 mm long, ~50 mm wide, ~40 mm high\n\n// Main parameters\nbody_length = 70;\nbody_width = 50;\nbody_height = 35;\nwheelbase = 40;\nwheel_radius = 20;\naxle_diameter = 4;\nfloor_height = 8;\nwindow_height = 3;\n\n// Module for wheel with tire and spokes\nmodule wheel() {\n    difference() {\n        cylinder(h = wheel_height, d = wheel_radius);\n        translate([0, 0, wheel_height - wheel_height/2])\n            cylinder(h = wheel_height - wheel_height/2, d = wheel_radius);\n        cylinder(h = 2, d = 2, center = true);\n    }\n}\n\n// Module for chassis frame with 4-wheel axles\nmodule chassis() {\n    difference() {\n        union() {\n            // Main body - rounded rectangle\n            translate([0, 0, body_height/2 + floor_height/2])\n                scale([1, 1, 0.8])\n                    sphere(d = body_width * 0.4, $fn = 16);\n            // Front and rear wheels\n            for (side = [-1, 1]) {\n                translate([side * body_length/2, 0, body_height/2 + floor_height/2])\n                    wheel();\n            }\n            // Axle holes\n            for (side = [-1, 1]) {\n                for (i = [0:3]) {\n                    rotate([0, 0, i * 90])\n                        translate([body_length/2 - axle_diameter/2, 0, body_height/2 + floor_height/2 + wheel_height/2 - axle_diameter/2])\n                        cylinder(h = axle_diameter/2 + 1, d = 3, $fn = 8);\n                }\n            }\n        }\n        // Floor detail\n        translate([0, 0, body_height/2 - floor_height/2])\n            cube([body_length, body_width, floor_height], center = false);\n    }\n}\n\n// Module for engine compartment\nmodule engine_compartment() {\n    difference() {\n        cube([body_length * 0.6, body_width * 0.6, body_height * 0.3]);\n        translate([body_length * 0.4, body_width * 0.4, body_height * 0.15])\n            cube([body_length * 0.6 - 0.2, body_width * 0.6 - 0.2, body_height * 0.3 - 0.1]);\n    }\n}\n\n// Module for doors\nmodule doors() {\n    difference() {\n        translate([body_length * 0.15, body_width * 0.15, body_height * 0.1])\n            cube([body_length * 0.3, body_width * 0.3, 8], center = true);\n        translate([body_length * 0.15, body_width * 0.15, body_height * 0.1])\n            cube([body_length * 0.3 - 0.2, body_width * 0.3 - 0.2, 6], center = true);\n    }\n}\n\n// Module for windows\nmodule windows() {\n    translate([body_length * 0.7, body_width * 0.7, body_height * 0.3])\n        difference() {\n            cube([body_length * 0.8, body_width * 0.8, 1.5], center = true);\n            translate([0, 0, 0.5])\n                cube([body_length * 0.8 - 0.1, body_width * 0.8 - 0.1, 1.1], center = true);\n        }\n}\n\n// Main assembly\nunion() {\n    chassis();\n    chassis();\n    engine_compartment();\n    doors();\n    windows();\n    wheels();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "radial symmetry",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 62,
      "code": "// OpenSCAD model of a realistic-looking \"Skybox\" - a medium-complexity 3D-printable\n// housing for a small, desk-sized power supply unit (PSU) with cooling fins and vents.\n\n// Overall dimensions for 2 mm wall thickness\nbody_width = 80;\nbody_height = 80;\nbody_depth = 60;\n\n// Wall thickness for 2 mm walls\nwall_thickness = 2;\n\n// Main body shell with rounded top\nmodule body() {\n    difference() {\n        // Outer rounded top\n        hull() {\n            translate([0, 0, body_height/2]) sphere(r = body_width/2);\n            translate([0, 0, body_height/2 + body_depth/2]) sphere(r = body_width/2);\n        }\n\n        // Inner cavity\n        difference() {\n            hull() {\n                translate([0, 0, body_height/2]) sphere(r = body_width/2);\n                translate([0, 0, body_height/2 + body_depth/2]) sphere(r = body_width/2);\n            }\n            // Cut out hollow center\n            translate([0, 0, body_height/2 + body_depth/2 - wall_thickness/2]) cube([body_width - 2*wall_thickness, body_height - 2*wall_thickness, body_depth - wall_thickness]);\n        }\n    }\n}\n\n// Power vent grill on top\nmodule vent() {\n    difference() {\n        // Main vent opening\n        cube([body_width - 10, body_height - 10, body_depth - 5]);\n        // Cutout for cooling fins\n        translate([body_width - 8, body_height - 8, body_depth - 5]) cube([body_width - 12, body_height - 12, 3]);\n    }\n}\n\n// Front panel with power button and USB ports\nmodule front() {\n    difference() {\n        // Main panel\n        cube([body_width - 20, body_height - 20, body_depth - 10]);\n        // Button recess\n        translate([body_width/2 - 5, body_height/2 - 5, body_depth/2 - 2]) cube([5, 5, 3]);\n        // USB port cutouts\n        translate([-body_width/2 - 5, body_height/2 - 5, -2]) cube([2, 2, 3]);\n    }\n}\n\n// Ventilation slots around edges\nmodule vents() {\n    for (x = [-body_width/2 + 2, body_width/2 - 2]) {\n        for (y = [-body_height/2 + 2, body_height/2 - 2]) {\n            translate([x, y, body_height/2 - wall_thickness/2]) {\n                cube([4, 4, 1]);\n            }\n        }\n    }\n}\n\n// Bottom cable management slot\nmodule cable_management() {\n    difference() {\n        cube([body_width - 12, body_height - 12, body_depth - 8]);\n        // Cable opening\n        translate([0, 0, -1]) cube([body_width - 14, body_height - 14, 2]);\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        body();\n        vent();\n        front();\n        vents();\n        cable_management();\n    }\n    \n    // Add bottom cable access\n    translate([body_width/2 - 2, body_height/2 - 2, body_depth/2 - 4]) {\n        cube([body_width - 16, body_height - 16, 2]);\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "rotational symmetry",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 67,
      "code": "// Realistic 3D-printable model of a wooden chest with decorative carving\n// Designed for 3D printing with no overhangs and minimum wall thickness.\n\n$fn = 30;              // Good quality curves\nwall = 1.5;              // Printable wall thickness\nscale_factor = 1;       // Makes the chest bigger without being huge\n\n// Main dimensions\nchest_width = 70;\nchest_depth = 50;\nchest_height = 40;\nwall_thickness = 1.5;\n\nmodule chest() {\n    difference() {\n        // Main wooden panel with cavity\n        cube([chest_width, chest_depth, chest_height]);\n        \n        // Hollow out interior for structural integrity\n        translate([wall_thickness, wall_thickness, wall_thickness])\n            cube([chest_width - 2*wall_thickness, chest_depth - 2*wall_thickness, chest_height - 2*wall_thickness]);\n        \n        // Carving details (decorative elements)\n        for (x = [-chest_width/3, chest_width/3])\n            for (y = [-chest_depth/3, chest_depth/3])\n                translate([x, y, wall_thickness/2])\n                    cylinder(h = chest_height - 2*wall_thickness, r = 1.5, center = true);\n    }\n}\n\nmodule decorative_panels() {\n    // Top lid\n    difference() {\n        // Lid panel\n        translate([0, 0, chest_height - wall_thickness/2])\n            cube([chest_width, chest_depth, wall_thickness]);\n        \n        // Recess for decoration\n        translate([wall_thickness, wall_thickness, chest_height - wall_thickness])\n            cube([chest_width - wall_thickness*2, chest_depth - wall_thickness*2, wall_thickness]);\n    }\n    \n    // Left decorative panel\n    translate([-chest_width/2, 0, chest_height - wall_thickness/2])\n        difference() {\n            cube([wall_thickness, chest_depth, chest_height - wall_thickness]);\n            translate([wall_thickness, wall_thickness, wall_thickness])\n                cube([chest_width - wall_thickness*2, chest_depth - wall_thickness*2, wall_thickness]);\n        }\n    \n    // Right decorative panel\n    translate([chest_width/2, 0, chest_height - wall_thickness/2])\n        difference() {\n            cube([wall_thickness, chest_depth, chest_height - wall_thickness]);\n            translate([wall_thickness, wall_thickness, wall_thickness])\n                cube([chest_width - wall_thickness*2, chest_depth - wall_thickness*2, wall_thickness]);\n        }\n}\n\nmodule screws() {\n    // Bottom screw holes\n    for (x = [-chest_width/2 - 2, chest_width/2 + 2])\n        for (y = [-chest_depth/2 - 2, chest_depth/2 + 2])\n            translate([x, y, -wall_thickness/2])\n                cylinder(h = wall_thickness, r = 0.5, center = false);\n}\n\n// Assemble the complete chest\ndifference() {\n    chest();\n    decorative_panels();\n    screws();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "bilateral symmetry",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 81,
      "code": "// Realistic medium-complexity 3D-printable model of a standard 20mm (H) medium-complexity desk lamp\n// All parts are designed to be printed with 0.2mm wall thickness and no overhangs above 45 degrees.\n\n// Overall size: 110mm (H) x 105mm (W) x 85mm (D)\n\nmodule bulb(diameter, height) {\n    // White LED with 5-color LED ring\n    difference() {\n        // Main bulb body\n        cylinder(d=diameter, h=height, $fn=32);\n        \n        // LED ring\n        translate([0,0,height-5]) {\n            color(\"white\") cube([diameter*2, diameter*2, 1], center=true);\n        }\n        \n        // Power cord\n        translate([0,0,-1]) {\n            cylinder(d=diameter+2, h=4, $fn=32);\n        }\n    }\n    \n    // Base\n    difference() {\n        cylinder(d=diameter*1.2, h=40, $fn=32);\n        translate([0,0,2]) sphere(d=diameter*1.2);\n    }\n    \n    // Base\n    difference() {\n        cylinder(d=diameter*1.2, h=40, $fn=32);\n        translate([0,0,-1]) sphere(d=diameter*1.2);\n    }\n    \n    // LED\n    translate([0,0,height-2]) {\n        color(\"white\") cube([diameter*2, diameter*2, 2], center=true);\n        translate([0,0,height-3]) {\n            color(\"white\") cube([diameter, diameter, 2], center=true);\n        }\n    }\n}\n\nmodule arm(height) {\n    // Metal arm with 5-hole grip\n    difference() {\n        cylinder(d=diameter*1.2, h=height, $fn=32);\n        \n        // Grip holes\n        for(i=[0:5]) {\n            rotate([0,0,i*180/5]) {\n                translate([diameter/2, 0, 0]) {\n                    cylinder(d=diameter*0.8, h=height, $fn=32);\n                }\n            }\n        }\n        \n        // Screw holes\n        translate([diameter/2, diameter/2, height/2]) {\n            cylinder(d=diameter*0.8, h=1.5, $fn=32);\n        }\n    }\n}\n\nmodule wall_mount(x, y, z) {\n    // Wall mount plate with screws\n    difference() {\n        cylinder(d=diameter*1.2, h=40, $fn=32);\n        translate([0,0,2]) sphere(d=diameter*1.2);\n    }\n    \n    // Screw holes\n    for(i=[0:3]) {\n        for(j=[0:4]) {\n            translate([x, y, z*j/4]) {\n                cylinder(d=diameter*0.8, h=1.5, $fn=32);\n            }\n        }\n    }\n}\n\n// Main desk assembly\ndifference() {\n    union() {\n        // Main body\n        cylinder(d=diameter, h=100, $fn=32);\n        \n        // Base\n        cylinder(d=diameter*1.2, h=40, $fn=32);\n        \n        // Front panel\n        translate([0,0,20]) {\n            difference() {\n                cylinder(d=diameter*1.2, h=40, $fn=32);\n                translate([0,0,2]) sphere(d=diameter*1.2);\n            }\n        }\n        \n        // Back panel\n        difference() {\n            cylinder(d=diameter*1.2, h=40, $fn=32);\n            translate([0,0,20]) {\n                difference() {\n                    cylinder(d=diameter*1.2, h=40, $fn=32);\n                    translate([0,0,2]) sphere(d=diameter*1.2);\n                }\n            }\n        }\n        \n        // Support legs\n        for(x=[-20, 20]) {\n            for(y=[-50, 50]) {\n                // Leg base\n                cylinder(d=diameter*1.2, h=10, $fn=32);\n                translate([x*diameter/2, y*diameter/2, -10]) {\n                    cylinder(d=diameter*0.8, h=15, $fn=32);\n                }\n            }\n        }\n        \n        // Front panel\n        translate([0,0,100]) {\n            difference() {\n                cylinder(d=diameter*1.2, h=40, $fn=32);\n                translate([0,0,2]) sphere(d=diameter*1.2);\n            }\n        }\n        \n        // Side panels\n        for(x=[-30, 30]) {\n            for(y=[-40, 40]) {\n                translate([x, y, -100]) {\n                    difference() {\n                        cylinder(d=diameter*1.2, h=40, $fn=32);\n                        translate([0,0,2]) sphere(d=diameter*1.2);\n                    }\n                }\n            }\n        }\n        \n        // Top\n        difference() {\n            translate([0,0,100]) {\n                cylinder(d=diameter*1.2, h=40, $fn=32);\n                translate([0,0,2]) sphere(d=diameter*1.2);\n            }\n        }\n        \n        // Bottom\n        translate([0,0,-100]) {\n            difference() {\n                cylinder(d=diameter*1.2, h=40, $fn=32);\n                translate([0,0,2]) sphere(d=diameter*1.2);\n            }\n        }\n        \n        // USB-C port\n        translate([0, 30, 100]) {\n            difference() {\n                cylinder(d=diameter*1.2, h=10, $fn=32);\n                translate([0,0,2]) sphere(d=diameter*1.2);\n            }\n        }\n    }\n}\n\nmodule screw(x, y, z) {\n    translate([x, y, z*0.7]) {\n        difference() {\n            cylinder(d=diameter*1.1, h=2, $fn=32);\n            cylinder(d=diameter*1.1, h=2.5, $fn=32);\n        }\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "tiny cube",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 51,
      "code": "// Realistic 3D-print friendly small cube\n// Approx 30 mm cube, 2 mm walls, no overhangs\n\n$fn = 30;\n\n// Base module\nmodule base() {\n    difference() {\n        cube([20, 20, 15], center = true);\n        translate([0, 0, 3.5]) cube([20, 20, 15], center = true);\n    }\n}\n\n// Main cube body\nmodule main_body() {\n    difference() {\n        cube([30, 30, 15], center = true);\n        translate([0, 0, -0.1]) cube([30, 30, 15], center = true);\n    }\n}\n\n// Top surface\nmodule top() {\n    difference() {\n        cube([30, 30, 15], center = true);\n        translate([0, 0, 3.5]) cube([30, 30, 15], center = true);\n    }\n}\n\n// Bottom surface\nmodule bottom() {\n    difference() {\n        cube([30, 30, 15], center = true);\n        translate([0, 0, -0.1]) cube([30, 30, 15], center = true);\n    }\n}\n\n// Central support block\nmodule central_block() {\n    difference() {\n        cube([15, 15, 15], center = true);\n        translate([0, 0, 0]) cube([15, 15, 15], center = true);\n    }\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: Geometries in cache: 1\nGeometry cache size in bytes: 0\nCGAL Polyhedrons in cache: 0\nCGAL cache size in bytes: 0\nTotal rendering time: 0:00:00.000\nCurrent top level object is empty.\n",
      "vlm_response": null
    },
    {
      "object": "mirror symmetry",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 39,
      "code": "// Realistic Medium-Complexity 3D-Printable Model of a Medium-Sized Mechanical Tool\n// Overall dimensions: ~115 mm length, ~80 mm height, ~50 mm width\n\n// Base body dimensions\nbody_length = 115; body_width = 80; body_height = 50; wall_thickness = 2;\n\n// Handle dimensions\nhandle_length = 110; handle_diameter = 12; handle_width = 15; grip_width = 8;\n\n// Mounting flange\nflange_thickness = 4; flange_length = 30; flange_width = 8;\n\n// Screw holes\nscrew_diameter = 3; screw_depth = 6;\n\n// Main assembly module\nmodule tool_assembly() {\n    union() {\n        // Main body\n        translate([0, 0, body_height/2 + wall_thickness/2])\n            cylinder(h=body_height, d=body_width, $fn=64);\n\n        // Handle\n        translate([0, 0, body_height/2 + wall_thickness + handle_height/2])\n            cylinder(h=handle_length, d=handle_diameter, $fn=64);\n\n        // Mounting flange\n        translate([0, 0, body_height/2])\n            cylinder(h=flange_thickness, d=body_width, $fn=64);\n\n        // Screw holes\n        for (z = [body_height/4, body_height/2, body_height/3])\n            translate([0, 0, z])\n                cylinder(h=screw_depth, d=screw_diameter, $fn=32);\n    }\n}\n\n// Handle grip details\nmodule grip() {\n    color(\"red\")\n    difference() {\n        // Main grip block\n        cylinder(h=grip_width, d=handle_diameter, $fn=32);\n        // Grip ridges\n        for (i = [0:4:grip_width-4])\n            translate([0, 0, i])\n                cylinder(h=0.5, d=handle_diameter + 1, $fn=32);\n    }\n    color(\"black\")\n    difference() {\n        cylinder(h=grip_width+0.2, d=handle_diameter*0.8, $fn=32);\n        cylinder(h=grip_width+0.2, d=handle_diameter*0.8, $fn=32);\n    }\n}\n\n// Screw head details\nmodule screw_head() {\n    color(\"silver\")\n    difference() {\n        cylinder(h=screw_depth, d=screw_diameter, $fn=32);\n        cylinder(h=screw_depth+0.1, d=screw_diameter-2, $fn=32);\n    }\n}\n\n// Main assembly\ntool_assembly();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "small cube",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 3,
      "code": "// Realistic-style 3D-printable 3D-print model of a 19th-century office desk\n// Overall size: 70mm x 50mm x 15mm (fits 2mm wall thickness)\n// Wall thickness is 2mm for easy printing without support\n\n// Main desk surface\nmodule desk_surface() {\n    difference() {\n        // Solid desk top\n        cube([70, 50, 2], center=true);\n        // Rounded corner fillets\n        translate([2,2,2]) cube([60,40,1.5], center=true);\n        translate([-2,2,2]) cube([60,40,1.5], center=true);\n        translate([2, -2, 2]) cube([60,40,1.5], center=true);\n        translate([-2, -2, 2]) cube([60,40,1.5], center=true);\n    }\n}\n\n// Four legs\nmodule legs() {\n    for (x = [0,35,70,110]) {\n        translate([x, 2, -10.5]) cube([12, 12, 2], center=true);\n    }\n}\n\n// Filing drawers\nmodule drawers() {\n    // Left drawer\n    translate([-30, -20, 5]) {\n        difference() {\n            cube([8, 3, 12], center=true);\n            translate([0,0,3]) cube([7, 2.5, 10], center=true);\n        }\n    }\n    // Right drawer\n    translate([30, -20, 5]) {\n        difference() {\n            cube([8, 3, 12], center=true);\n            translate([0,0,3]) cube([7, 2.5, 10], center=true);\n        }\n    }\n}\n\n// Desk accessories\nmodule accessories() {\n    // Pencil holder\n    translate([-30, 25, 5]) {\n        difference() {\n            cube([10, 1.5, 5], center=true);\n            translate([0,0,2.5]) cube([8, 1, 2.5], center=true);\n        }\n    }\n    // Pen holder\n    translate([30, 25, 5]) {\n        difference() {\n            cube([10, 1.5, 5], center=true);\n            translate([0,0,3]) cube([8, 1, 2.5], center=true);\n        }\n    }\n}\n\n// Main desk assembly\nmodule desk() {\n    union() {\n        desk_surface();\n        legs();\n        drawers();\n        accessories();\n    }\n}\n\n// Render the desk with appropriate scale for printing\ndesk();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "rotated cube",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 87,
      "code": "// Realistic medium-complexity 3D-printable cube with rounded edges\n// Overall size: ~100 mm x 80 mm x 40 mm\n\nmodule rounded_cube(size, radius) {\n    difference() {\n        scale([1, 1, 1]) sphere(r=radius);\n        for(i = [0:4]) {\n            for(j = [0:4]) {\n                for(k = [0:4]) {\n                    translate([0, 0, 0]) sphere(r=radius);\n                }\n            }\n        }\n    }\n}\n\n// Main body\ndifference() {\n    rounded_cube([100, 80, 40], 5);\n    // Bottom fillet\n    translate([0, 0, -1]) fillet(5);\n}\n\n// Top fillet\ndifference() {\n    rounded_cube([100, 80, 40], 5);\n    translate([0, 0, 2]) fillet(5);\n}\n\n// Side walls\ndifference() {\n    rounded_cube([80, 100, 30], 5);\n    translate([0, 0, 10]) cylinder(h=10, r=20);\n    translate([0, 100, 10]) cylinder(h=10, r=20);\n}\n\n// Front wall\ndifference() {\n    rounded_cube([80, 100, 30], 5);\n    translate([0, 0, 5]) cylinder(h=10, r=20);\n}\n\n// Back wall\ndifference() {\n    rounded_cube([80, 100, 30], 5);\n    translate([0, 100, 5]) cylinder(h=10, r=20);\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: WARNING: Ignoring unknown module 'fillet' in file rotated_cube.scad, line 21\nWARNING: Ignoring unknown module 'fillet' in file rotated_cube.scad, line 27\nGeometries in cache: 10\nGeometry cache size in",
      "vlm_response": null
    },
    {
      "object": "huge cube",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 6,
      "code": "// Realistic 3D-printable cube with medium complexity\n// Overall footprint ~120mm x 100mm x 80mm, 80% wall thickness\n\n$fa = 1; $fs = 0.5;\n\nmodule cube() {\n    difference() {\n        // Main body block\n        cube([120, 100, 80], center = true);\n        \n        // Hollow interior\n        translate([0, 0, 0])\n            cube([120 - 2*wall, 100 - 2*wall, 80 - wall], center = true);\n        \n        // Top face detail\n        translate([0, 0, 80/2])\n            cube([120, 100, 2], center = true);\n    }\n}\n\n// Generate cube with 80mm walls for 3D printing\ncube();",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: WARNING: Too many unnamed arguments supplied in file huge_cube.scad, line 9\nWARNING: variable center not specified as parameter in file huge_cube.scad, line 9\nWARNING: Too many unnamed arguments suppl",
      "vlm_response": null
    },
    {
      "object": "large cube",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 52,
      "code": "// Realistic Toy Box - Medium Complexity\n// A vintage-style wooden toy box with paint details and seam lines\n\nmodule box_base() {\n    // Main box body with rounded edges\n    difference() {\n        cube([60, 50, 30], center=true);\n        translate([0, 0, 5]) cube([62, 52, 30], center=true);\n        // Bottom panel with rounded edges\n        translate([0, 0, -10]) cube([64, 54, 20], center=true);\n    }\n}\n\nmodule box_sides() {\n    // Side panels with realistic joints\n    difference() {\n        cube([45, 45, 40], center=true);\n        translate([15, 15, 10]) cube([35, 35, 30], center=true);\n    }\n}\n\nmodule box_top() {\n    // Top panel with seam lines\n    difference() {\n        cube([55, 55, 35], center=true);\n        translate([0, 0, 15]) cube([54, 54, 33], center=true);\n        // Seam lines using subtle ridges\n        for(i=[0:3]) {\n            translate([0, 0, 22 + i*5]) cube([52, 52, 2], center=true);\n        }\n    }\n}\n\nmodule box_lid() {\n    // Lid with paint details\n    difference() {\n        cylinder(h=5, r=40, center=true);\n        // Paint spots - realistic paint chips\n        for(i=[0:3]) {\n            translate([0, 0, 22 + i*5]) cube([6, 6, 0.5], center=true);\n        }\n    }\n}\n\nmodule handle() {\n    // Small wooden handle\n    difference() {\n        cylinder(h=15, r=6, center=true);\n        // Handle grip texture\n        translate([0, 0, -15]) cylinder(h=2, r=6.5, center=true);\n        // Grip ridges\n        for(i=[0:3]) {\n            translate([0, 0, -15 + i*3]) cylinder(h=1, r=5.5, center=true);\n        }\n    }\n}\n\nmodule hinge() {\n    // Hinged top with realistic joints\n    difference() {\n        cube([45, 45, 25], center=true);\n        translate([15, 15, 10]) cube([35, 35, 20], center=true);\n        // Hinged joints\n        for(i=[0:3]) {\n            translate([0, 0, 22 + i*5]) cube([40, 40, 2], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    box_base();\n    box_sides();\n    box_top();\n    box_lid();\n    handle();\n    hinge();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "medium cube",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 9,
      "code": "// Realistic Medium-Size Toy Box \u2013 80mm x 60mm x 40mm\n\n// Overall dimensions\nbox_w = 80;\nbox_d = 60;\nbox_h = 40;\n\n// Wall thickness\nwall_th = 2;\n\n// Base plate\nbase_pl = [0, 0, 0];\n\n// Top surface\ntop_pl = [0, 0, 40];\n\n// Lid \u2013 slightly recessed\nlid_h = 5;\nlid_w = 40;\nlid_d = 80;\n\n// Reinforcement ribs (horizontal)\nrib_w = 1.5;\nrib_h = wall_th;\nrib_spacing = 10;\n\n// Reinforcement ribs (vertical)\nrib_h = wall_th;\nrib_spacing = 10;\n\n// Door cutout\ndoor_w = 40;\ndoor_h = 45;\ndoor_gap = 10;\ndoor_offset = box_d - 4;\n\n// Main box body\ndifference() {\n    cube([box_w, box_d, box_h]);\n    \n    // Hollow out for material savings\n    translate([wall_th, wall_th, wall_th])\n        cube([box_w - 2*wall_th, box_d - 2*wall_th, box_h - wall_th]);\n    \n    // Hollow out top\n    translate([door_offset, door_offset, box_h/2])\n        cube([door_w, door_w, box_h*0.7]);\n    \n    // Hollow out bottom\n    translate([0, 0, -box_h/2])\n        cube([box_w - 2*wall_th, box_d - 2*wall_th, box_h - box_h*0.7]);\n    \n    // Lid cutout\n    translate([box_w/2 - lid_w/2, box_d/2 - lid_w/2, box_h/2 + lid_h/2])\n        cube([lid_w, lid_w, lid_h]);\n    \n    // Reinforcement ribs (front)\n    for (i = [-1, 0, 1]) {\n        translate([i * rib_spacing, -rib_h/2, box_h/2 + rib_h/2])\n            cube([rib_w, box_d/2 - 2*rib_w, rib_h]);\n    }\n    \n    // Reinforcement ribs (back)\n    for (i = [-1, 0, 1]) {\n        translate([i * rib_spacing, box_d/2 - 2*rib_w, box_h/2 + rib_h/2])\n            cube([rib_w, box_d/2 - 2*rib_w, rib_h]);\n    }\n    \n    // Reinforcement ribs (sides) \u2013 top\n    for (i = [0, 1]) {\n        translate([i * rib_spacing, -rib_h/2, box_h/2 + 2*rib_h])\n            cube([rib_w, box_d/2 - 2*rib_w, rib_h]);\n    }\n    \n    for (i = [-1, 1]) {\n        translate([i * rib_spacing, -rib_h/2, box_h/2 + 2*rib_h])\n            cube([rib_w, box_d/2 - 2*rib_w, rib_h]);\n    }\n}\n\n// Top surface details\ntop_pl_offset = box_w * 0.3;\ntop_pl_height = box_h * 0.3;\ntop_pl_w = box_d * 0.3;\ntop_pl_d = box_h * 0.3;\n\n// Side panels \u2013 simple rectangles\ndifference() {\n    cube([box_w - 2*wall_th, box_d - 2*wall_th, box_h - wall_th]);\n    translate([0, -rib_h/2, box_h/2 + rib_h/2])\n        cube([box_w - 2*wall_th, box_d - 2*wall_th, box_h - box_h*0.7]);\n    translate([box_w - 2*wall_th, -rib_h/2, box_h/2 + rib_h/2])\n        cube([box_w - 2*wall_th, box_d - 2*wall_th, box_h - box_h*0.7]);\n    translate([0, -rib_h/2, box_h/2 + rib_h/2])\n        cube([box_w - 2*wall_th, box_d - 2*wall_th, box_h - box_h*0.7]);\n}\n\n// Base\ntranslate([0, 0, -box_h/2])\n    cube([box_w, box_d, box_h/2]);\n\n// Handle holes (top)\nhandle_w = 6;\nhandle_h = 2;\nhandle_r = 3;\nhandle_spacing = box_w - handle_w;\n\n// Handle grips\nfor (i = [-1, 1]) {\n    translate([i * handle_spacing, handle_r, handle_h/2])\n        rotate([90, 0, 0])\n            cylinder(h = handle_h, r = handle_r);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "thin wall",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 8,
      "code": "// Realistic 3D-printable 2D-plane (20 mm wide, 20 mm deep, 20 mm high)\n// Designed for FDM printing with minimal supports and no overhangs.\n\n$fn = 36;\n\n// Main body\ndifference() {\n    // Outer shell\n    cube([20, 20, 20], center = true);\n    \n    // Hollow interior\n    translate([0, 0, 0])\n        cube([20, 20, 20], center = true);\n    \n    // Front face\n    translate([10, 10, 10])\n        cube([10, 10, 10], center = true);\n    \n    // Rear face\n    translate([-10, 10, 10])\n        cube([10, 10, 10], center = true);\n    \n    // Bottom face\n    translate([10, 10, 10])\n        cube([10, 10, 10], center = true);\n}\n\n// Side walls\ndifference() {\n    translate([0, 0, 20])\n        cube([20, 20, 20], center = true);\n    \n    translate([0, 0, -20])\n        cube([20, 20, 20], center = true);\n}\n\n// Roof\ndifference() {\n    // Base plate\n    cube([20, 20, 20], center = true);\n    \n    // Ventilation slots (top)\n    for (x = [-5, 5])\n        translate([x, 0, 0])\n            cube([10, 20, 2], center = true);\n}\n\n// Back wall\ndifference() {\n    translate([0, 0, -20])\n        cube([20, 20, 20], center = true);\n    \n    translate([0, 0, 20])\n        cube([20, 20, 20], center = true);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "medium wall",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 76,
      "code": "// OpenSCAD model of a medium-sized wooden box with hinges and side reinforcement\n// Overall size: 120 mm wide x 80 mm deep x 60 mm high\n\n// Parameters\nbox_w = 120;\nbox_d = 80;\nbox_h = 60;\nwall_t = 2.5;\nhinge_l = 60;\nhinge_w = 2;\nhinge_h = 3;\n\n// Main box body\nmodule box() {\n    difference() {\n        cube([box_w, box_d, box_h], center=true);\n        translate([0, 0, -0.5]) cube([box_w-4, box_d-4, box_h-4], center=true);\n    }\n}\n\n// Side reinforcement panels\nmodule side_panel() {\n    difference() {\n        cube([box_w, box_d, wall_t], center=true);\n        translate([0, 0, -wall_t/2]) cube([box_w-4, box_d-4, wall_t], center=true);\n    }\n}\n\n// Front panel with hinges\nmodule front_panel() {\n    difference() {\n        cube([box_w-4, box_d-4, box_h-4], center=true);\n        translate([0, 0, -box_h/2-hinge_h/2]) cube([box_w-4, box_d-4, box_h-4], center=true);\n    }\n}\n\n// Hinges\nmodule hinges() {\n    translate([0, 0, box_h/2+hinge_h/2]) {\n        rotate([0, 90, 0]) {\n            linear_extrude(height=hinge_l)\n                difference() {\n                    cube([hinge_w, hinge_w, hinge_h]);\n                    cube([hinge_w, hinge_w, hinge_h]);\n                }\n            }\n        translate([0, 0, -box_h/2-hinge_h/2]) {\n            rotate([0, 90, 0]) {\n                cube([1.5, 1.5, hinge_l]);\n            }\n        }\n    }\n}\n\n// Corner reinforcement\nmodule corner_reinforcement() {\n    difference() {\n        cube([box_w-4, box_d-4, box_h-4], center=true);\n        translate([0, 0, 0]) cube([box_w-4, box_d-4, box_h-4], center=true);\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        box();\n        side_panel();\n        front_panel();\n        hinges();\n        corner_reinforcement();\n    }\n    translate([0, 0, -box_h/2-hinge_h/2-1]) {\n        cube([box_w-4, box_d-4, box_h-4], center=true);\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "thick wall",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 36,
      "code": "// Realistic 3D-Printable Tool \u2013 Electronic Multimeter\n// Medium complexity for realistic appearance\n// Overall height \u2248 70 mm, length \u2248 90 mm, width \u2248 35 mm\n\n$fa = 2; $fs = 0.5; $pr = 1; $prh = 0.4; $pt = 1.2; $t = 0.4; $sl = 0.15; $c = 0.5;\n\n// Overall dimensions\n$wall = 2; $len = 90; $w = 35; $h = 70;\n\n// Colors\ncolor_body = [0.2, 0.2, 0.2];\ncolor_metal = [0.15, 0.15, 0.15];\ncolor_screen = [0.85, 0.85, 0.85];\ncolor_led = [0.1, 0.1, 0.1];\ncolor_button = [0.95, 0.95, 0.95];\n\nmodule body() {\n    // Main rounded rectangular body\n    difference() {\n        minkowski() {\n            cube([len, w, h], center=true);\n            sphere(r=1.5);\n        }\n        // Rounded top edge for realism\n        translate([0, 0, h/2 - 1])\n            scale([1.2, 1.2, 1.2])\n            sphere(r=1.5);\n    }\n}\n\nmodule metal_frame() {\n    difference() {\n        union() {\n            // Main frame block\n            cube([len*1.2, w*1.2, h*0.6], center=true);\n            // Mounting holes\n            for (x = [-len/2 + 5:5:len/2 - 5])\n                for (y = [-w/2 + 5:5:h/2 - 5])\n                    translate([x, y, 0])\n                        cylinder(h=2, r=1.5);\n            // Screen mount\n            translate([0, 0, h*0.7])\n                cube([4, 4, 1.5], center=true);\n        }\n        // Internal cavity\n        translate([0, 0, -0.1])\n            cube([len*1.3, w*1.3, h*0.8], center=true);\n    }\n}\n\nmodule screen() {\n    // LCD screen display\n    translate([0, 0, h*0.75])\n        cube([8, 4, 0.3], center=true);\n    // Screen bezel\n    difference() {\n        color(color_screen)\n            cube([8, 4, 0.3], center=true);\n        color(color_metal)\n            translate([0, 0, -0.1])\n                cube([8, 4, 0.3], center=true);\n    }\n}\n\nmodule display() {\n    // Main screen\n    translate([0, 0, h*0.75])\n        cube([8, 4, 0.3], center=true);\n    // Screen edges\n    difference() {\n        color(color_metal)\n            cube([8, 4, 0.3], center=true);\n        color(color_metal)\n            cube([8, 4, 0.3], center=true);\n    }\n}\n\nmodule button() {\n    // Power button\n    translate([len*0.3, w*0.35, 0])\n        color(color_button)\n            cube([2, 3, 1], center=true);\n    // Function button\n    translate([len*0.4, w*0.35, 0])\n        color(color_button)\n            cube([1, 2, 0.5], center=true);\n}\n\nmodule led() {\n    // LED indicator\n    translate([len*0.4, w*0.35, 0])\n        color(color_led)\n            cube([0.8, 0.6, 0.1], center=true);\n}\n\nmodule metal_stand() {\n    // Metal stand for device\n    translate([0, 0, -5])\n        cube([len*1.1, w*1.1, 3], center=true);\n}\n\nmodule battery() {\n    // Battery compartment\n    translate([0, 0, -5])\n        cube([len*0.8, w*0.8, 2], center=true);\n    // Battery compartment door\n    difference() {\n        translate([0, 0, -5])\n            cube([len*0.7, w*0.7, 1], center=true);\n        translate([0, 0, -5])\n            cube([len*0.6, w*0.6, 0.5], center=true);\n    }\n}\n\nmodule ventilation_slots() {\n    // Ventilation slots on back panel\n    for (i = [0:3]) {\n        translate([len*0.3, w*0.35 - i*1.5, h*0.75 + 2])\n            cube([4, 1.5, 1], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    metal_frame();\n    screen();\n    display();\n    button();\n    led();\n    battery();\n    ventilation_slots();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "shell",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 99,
      "code": "// Realistic 3D-printable medium-complexity furniture item \u2013 medium-sized coffee table with wooden legs and cushion\n// Overall dimensions: 120mm wide x 80mm deep x 85mm tall (excluding top rail)\n\n// Wall thickness for 3D printing (0.4mm)\nwall = 1.4;\n\n// Main module for the coffee table\nmodule coffee_table() {\n    // Table top surface\n    difference() {\n        // Solid top surface\n        cube([120, 80, 4], center = true);\n        \n        // Top rail for stability\n        translate([0, 0, 3]) cube([118, 78, 2], center = true);\n    }\n    \n    // Table leg structure\n    // Front left leg\n    translate([0, -35, 0]) leg();\n    \n    // Front right leg\n    translate([0, 35, 0]) leg();\n    \n    // Back left leg\n    translate([0, -35, 0]) leg();\n    \n    // Back right leg\n    translate([0, 35, 0]) leg();\n    \n    // Coffee table cushion\n    difference() {\n        // Cushion base\n        translate([0, 0, 0]) cube([100, 70, 2], center = true);\n        \n        // Cushion top\n        translate([0, 0, 0]) cube([104, 74, 2], center = true);\n    }\n    \n    // Side legs\n    translate([50, 2, 25]) leg();\n    translate([50, -2, 25]) leg();\n    translate([50, 2, 25]) leg();\n    translate([50, -2, 25]) leg();\n    \n    // Back legs\n    translate([0, 50, 25]) leg();\n    translate([0, 50, 25]) leg();\n    translate([0, 50, 25]) leg();\n    translate([0, 50, 25]) leg();\n}\n\n// Single leg with 3D-printable features\nmodule leg() {\n    // Main leg body\n    difference() {\n        // Thinner leg block\n        cube([4, 4, 35], center = true);\n        \n        // Screw hole for joint\n        cylinder(h = 30, r = 2);\n    }\n    \n    // Foot detail\n    translate([0, 0, -1]) cube([4, 4, 1], center = true);\n}\n\n// Create the coffee table\ncoffee_table();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "giant cube",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 87,
      "code": "// Realistic OpenSCAD Model of a Realistic Medium-Complexity 3D-Printable Desk\n// Overall footprint: 120 mm x 80 mm x 45 mm (fits 75 mm desk size)\n\n$fn = 32;\n\n// Main body module\nmodule desk_body() {\n    difference() {\n        // Outer shell\n        cube([120, 80, 45], center = true);\n        \n        // Front lip for desk surface\n        translate([0, 0, 5])\n            cube([110, 70, 4], center = true);\n        \n        // Rear lip for desk surface\n        translate([-10, -10, 5])\n            cube([110, 70, 4], center = true);\n        \n        // Interior hollow for printing\n        translate([0, 0, 0])\n            cube([118, 78, 44], center = true);\n    }\n}\n\n// Support legs\nmodule support_legs() {\n    // Front left\n    translate([-45, -35, -20])\n        cylinder(h = 35, d = 8, center = false);\n    \n    // Front right\n    translate([45, -35, -20])\n        cylinder(h = 35, d = 8, center = false);\n    \n    // Back left\n    translate([-45, 35, -20])\n        cylinder(h = 35, d = 8, center = false);\n    \n    // Back right\n    translate([45, 35, -20])\n        cylinder(h = 35, d = 8, center = false);\n}\n\n// Support feet\nmodule support_feet() {\n    // Front feet\n    translate([-35, 30, -20])\n        cube([10, 10, 8], center = true);\n    \n    // Rear feet\n    translate([35, 30, -20])\n        cube([10, 10, 8], center = true);\n    \n    // Top feet\n    translate([-35, -30, -20])\n        cube([10, 10, 8], center = true);\n    translate([35, -30, -20])\n        cube([10, 10, 8], center = true);\n}\n\n// Desktop surface\nmodule desk_surface() {\n    difference() {\n        // Main surface\n        cube([118, 78, 4], center = true);\n        \n        // Rounded corners\n        translate([0, 0, 0.2])\n            sphere(r = 2.5);\n        translate([0, 0, 0])\n            sphere(r = 2.5);\n        translate([0, 0, 0])\n            sphere(r = 2.5);\n        translate([118, 0, 0])\n            sphere(r = 2.5);\n        translate([-118, 0, 0])\n            sphere(r = 2.5);\n        translate([0, 118, 0])\n            sphere(r = 2.5);\n        translate([118, 118, 0])\n            sphere(r = 2.5);\n        translate([-118, 118, 0])\n            sphere(r = 2.5);\n    }\n}\n\n// Control panel\nmodule control_panel() {\n    difference() {\n        // Base\n        cube([30, 35, 12], center = true);\n        \n        // Panel cutout\n        translate([0, 0, 0])\n            cube([20, 22, 14], center = true);\n        \n        // Buttons\n        for (i = [0:2]) {\n            translate([-2, 2, 5])\n                cylinder(h = 3, d = 4, center = true);\n        }\n        for (i = [0:2]) {\n            translate([2, 2, 5])\n                cylinder(h = 3, d = 4, center = true);\n        }\n        \n        // LED indicator\n        translate([0, 22, 5])\n            sphere(d = 1.5);\n    }\n}\n\n// Cable management holes\nmodule cable_holes() {\n    // Front\n    translate([-30, 30, 0])\n        cube([20, 2, 40], center = true);\n    translate([30, 30, 0])\n        cube([20, 2, 40], center = true);\n    translate([30, -30, 0])\n        cube([20, 2, 40], center = true);\n    translate([-30, -30, 0])\n        cube([20, 2, 40], center = true);\n    translate([30, -30, 0])\n        cube([20, 2, 40], center = true);\n}\n\n// Assembly\nunion() {\n    desk_body();\n    support_legs();\n    support_feet();\n    desk_surface();\n    control_panel();\n    cable_holes();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "solid",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 95,
      "code": "// Realistic 3D-printable coffee mug with handle and spout\n// Overall height: ~85 mm\n\n// Main parameters\nbody_height = 45;\nbody_width = 22;\nbody_depth = 15;\nwall_thickness = 2;\nhandle_diameter = 12;\nhandle_length = 45;\nhandle_width = 12;\nspout_diameter = 12;\nspout_height = 8;\n\n// Main cup body with rounded edges\nmodule cup_body() {\n    difference() {\n        // Main rounded body\n        hull() {\n            translate([0, body_depth/2, 0]) sphere(r=body_width/2);\n            translate([0, body_depth/2, body_height/2]) sphere(r=body_width/2);\n        }\n        \n        // Handle cutout\n        translate([0, body_depth/2, body_height/2])\n            rotate([90, 0, 0])\n                cylinder(h=body_width, d1=body_width/2, d2=handle_width, $fn=8);\n    }\n}\n\n// Handle with grip pattern\nmodule handle() {\n    difference() {\n        // Main handle\n        hull() {\n            translate([0, 0, body_height/2 + handle_length/2])\n                sphere(r=handle_width/2);\n            translate([-handle_length/2, 0, body_height/2 + handle_length/2])\n                sphere(r=handle_width/2);\n        }\n        \n        // Grip texture\n        for (i = [0:3]) {\n            translate([0, 0, body_height/2 + handle_length/2 - i*15])\n                cube([handle_width/2, handle_width/2, 0.5], center=true);\n        }\n    }\n}\n\n// Handle grip ring\nmodule grip_ring() {\n    difference() {\n        cylinder(h=body_height/2, r=handle_width/2, $fn=6);\n        cylinder(h=body_height/2 + 0.1, r=handle_width/2 - 0.2, $fn=6);\n    }\n}\n\n// Spout with handle attachment\nmodule spout() {\n    difference() {\n        // Main spout body\n        hull() {\n            translate([0, body_depth/2, body_height/2])\n                cylinder(h=spout_height, d1=body_width/2, d2=spout_diameter, $fn=16);\n            translate([0, body_depth/2, body_height/2])\n                cylinder(h=spout_height, d1=body_width/2, d2=spout_diameter, $fn=16);\n        }\n        \n        // Handle attachment\n        translate([0, body_depth/2, body_height/2])\n            rotate([0, 0, 30])\n                cylinder(h=3, d=handle_width, $fn=12);\n    }\n}\n\n// Base support\nmodule base_support() {\n    difference() {\n        cylinder(h=3, d=body_width, center=true);\n        cylinder(h=4, d=body_width - 10, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main mug body\n    cup_body();\n    \n    // Handle\n    handle();\n    \n    // Spout\n    spout();\n    \n    // Base\n    base_support();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "hollow",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 68,
      "code": "// Realistic Medium-Complexity Realistic 3D-Print Chair\n// Overall height ~90mm, width ~80mm, depth ~70mm\n// No overhangs, 2mm wall thickness\n\n// Parameters\nseat_height = 45;\nseat_width = 70;\nseat_depth = 70;\nback_height = 60;\nleg_height = 45;\nback_width = 50;\narm_width = 20;\narm_height = 35;\nleg_length = 30;\nbase_diameter = 30;\n\n// Seat module\nmodule seat() {\n    difference() {\n        // Main seat block\n        cube([seat_width, seat_depth, seat_height], center=true);\n        // Recess for foam\n        translate([0, 0, 0])\n            cube([seat_width-4, seat_depth-4, seat_height+0.2], center=true);\n        // Drainage holes\n        for(x = [-1, 1])\n            for(y = [-1, 1])\n                translate([x*seat_width/2-seat_width/2, y*seat_depth/2-seat_depth/2, 0])\n                    cylinder(h=2, r=1.5, center=true);\n    }\n}\n\n// Backrest module\nmodule backrest() {\n    difference() {\n        // Main back panel\n        cube([seat_width, back_width, back_height], center=true);\n        // Hollow cavity for foam\n        translate([0, 0, -1])\n            cube([seat_width-4, back_width-4, back_height+2], center=true);\n        // Support ribs\n        for(x = [-seat_width/2+10, seat_width/2-10])\n            for(y = [-back_width/2+10, back_width/2-10])\n                translate([x, y, 0])\n                    cube([1.5, 1.5, back_height], center=true);\n    }\n}\n\n// Legs module\nmodule legs() {\n    for(x = [-seat_width/2+10, seat_width/2-10]) {\n        for(y = [-back_width/2+10, back_width/2-10]) {\n            translate([x, y, -leg_height/2])\n                cylinder(h=leg_height, r=2, center=true);\n        }\n    }\n}\n\n// Armrests\nmodule armrests() {\n    for(x = [-seat_width/2+15, seat_width/2-15]) {\n        for(y = [-back_width/2+15, back_width/2-15]) {\n            translate([x, y, seat_height-20])\n                rotate([0, 90, 0])\n                    cylinder(h=15, r=10, center=true);\n        }\n    }\n}\n\n// Base frame\nmodule base() {\n    difference() {\n        // Main frame\n        cube([base_diameter, base_diameter, base_height], center=true);\n        // Drainage holes\n        for(x = [-1, 1])\n            for(y = [-1, 1])\n                translate([x*base_diameter/2-base_diameter/2, y*base_diameter/2-base_diameter/2, -base_height/2+2])\n                    cylinder(h=2, r=1.5, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Base\n    base();\n    // Legs\n    translate([-seat_width/2, -back_width/2, -leg_height/2])\n        legs();\n    translate([seat_width/2, -back_width/2, -leg_height/2])\n        legs();\n    translate([seat_width/2, seat_depth/2, -leg_height/2])\n        legs();\n    translate([-seat_width/2, seat_depth/2, -leg_height/2])\n        legs();\n    translate([seat_width/2, seat_depth/2, seat_height/2])\n        legs();\n    // Seat\n    translate([0, 0, seat_height/2])\n        seat();\n    // Backrest\n    translate([0, back_width/2, seat_height/2+back_height/2])\n        backrest();\n    // Armrests\n    armrests();\n    // Decorative details\n    translate([-seat_width/2-2, -back_width/2-2, seat_height/2-2])\n        cylinder(h=2, r=3, center=true);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "cube with pyramid",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 53,
      "code": "// Realistic Medium-Complexity Model \u2013 OpenSCAD Code\n// A medium-complexity model of a 1920s style gas stove\n\n// Overall dimensions: ~80 mm wide x 60 mm deep x 100 mm tall\n\nmodule gas_stove() {\n    // Main stove body\n    difference() {\n        cube([80, 60, 100]);\n        \n        // Front panel details\n        translate([20, 20, 20]) {\n            cube([40, 20, 15]);\n            translate([20, 20, 15]) cube([40, 20, 3]);\n            translate([20, 20, 15]) cube([40, 20, 2]);\n        }\n        \n        // Control panel cavity\n        translate([30, 20, 20]) {\n            cube([30, 20, 20]);\n            translate([30, 20, 20]) cube([30, 20, 2]);\n        }\n        \n        // Handle slots\n        for (x = [-25, 0, 25]) {\n            translate([x, 15, 85]) {\n                cube([8, 2, 6]);\n            }\n        }\n    }\n    \n    // Stove base\n    difference() {\n        translate([0, 0, 0]) {\n            cube([70, 50, 60]);\n            translate([2, 2, 2]) cube([68, 48, 56]);\n        }\n    }\n    \n    // Stove top\n    difference() {\n        translate([0, 0, 0]) {\n            cube([70, 50, 100]);\n            translate([2, 2, 2]) cube([68, 48, 96]);\n        }\n    }\n    \n    // Gas valve cylinder\n    cylinder(h=15, r=8, $fn=20);\n    \n    // Gas valve cap\n    translate([0, 0, 0]) {\n        cylinder(h=5, r=6, $fn=20);\n    }\n    \n    // Control panel\n    translate([30, 20, 100]) {\n        cube([30, 20, 5]);\n        cube([20, 20, 5]);\n    }\n    \n    // Control panel buttons\n    for (x = [-10, 0, 10]) {\n        translate([x, 15, 105]) {\n            cube([3, 2, 3]);\n            translate([x, 15, 105]) cube([2, 2, 3]);\n        }\n    }\n    \n    // Control panel dial\n    translate([15, 15, 105]) {\n        cube([10, 2, 1]);\n        translate([15, 15, 105]) cube([10, 2, 1]);\n    }\n    \n    // Burner vent\n    translate([45, 0, 15]) {\n        cylinder(h=5, r=4, $fn=20);\n    }\n    \n    // Burner nozzle\n    translate([45, 0, 35]) {\n        cylinder(h=10, r=2, $fn=20);\n    }\n    \n    // Grill grate\n    translate([0, 0, 50]) {\n        cube([70, 40, 2]);\n        translate([0, 0, 50]) cube([70, 40, 2]);\n    }\n    \n    // Support feet\n    for (x = [-30, 0, 30]) {\n        translate([x, 20, -15]) {\n            cylinder(h=4, r=2, $fn=20);\n        }\n    }\n}\n\n// Generate the model\ngas_stove();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "sphere with cube",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 33,
      "code": "// Medium-complexity openSCAD model of a realistic medium-sized wooden desk chair\n// Overall dimensions: 120mm x 80mm x 80mm\n\n// Parameters\nchair_height = 80;\nseat_width = 110;\nseat_depth = 80;\nseat_thickness = 6;\nbackrest_height = 75;\nleg_height = 40;\nwheel_diameter = 5;\nwheel_thickness = 3;\nframe_thickness = 2;\n\n// Main frame components\nmodule chair_frame() {\n    difference() {\n        // Seat frame\n        cube([seat_width, seat_depth, seat_thickness], center=true);\n        \n        // Front leg support\n        translate([0, seat_depth/2, -seat_thickness/2])\n            cube([8, 4, 4], center=true);\n        \n        // Back support\n        translate([0, -seat_depth/2, -seat_thickness/2])\n            cube([8, 4, 4], center=true);\n    }\n}\n\n// Seat cushion\nmodule seat() {\n    difference() {\n        cube([seat_width, seat_depth, seat_thickness], center=true);\n        \n        // Cushion top\n        translate([0, 0, seat_thickness/2])\n            cube([seat_width - 2, seat_depth - 2, 3], center=true);\n        \n        // Cushion support ribs\n        for(i = [-2:2]) {\n            translate([0, 0, -seat_thickness/2 - 1])\n                cube([seat_width - 4, seat_depth - 4, 1.5], center=true);\n        }\n    }\n}\n\n// Backrest\nmodule backrest() {\n    difference() {\n        // Backrest frame\n        cube([seat_width, 50, 30], center=true);\n        \n        // Backrest slats\n        for(x = [0:5:seat_width - 50]) {\n            translate([x, 25, 20])\n                cube([10, 3, 20], center=true);\n        }\n        \n        // Post\n        translate([0, 30, 0])\n            cube([2, 2, 10], center=true);\n    }\n}\n\n// Chair legs\nmodule legs() {\n    // Front left\n    translate([-seat_width/2 - leg_height/2, seat_depth/2, -leg_height/2])\n        cube([leg_height, leg_height, leg_height], center=true);\n    \n    // Front right\n    translate([seat_width/2 + leg_height/2, seat_depth/2, -leg_height/2])\n        cube([leg_height, leg_height, leg_height], center=true);\n    \n    // Back left\n    translate([-seat_width/2 - leg_height/2, -seat_depth/2 - leg_height/2, -leg_height/2])\n        cube([leg_height, leg_height, leg_height], center=true);\n    \n    // Back right\n    translate([seat_width/2 + leg_height/2, -seat_depth/2 - leg_height/2, -leg_height/2])\n        cube([leg_height, leg_height, leg_height], center=true);\n}\n\n// Wheels\nmodule wheels() {\n    for(x = [-1, 1]) {\n        for(y = [-1, 1]) {\n            translate([x * 8, y * 8, 2])\n                cylinder(d = wheel_diameter, h = wheel_thickness, center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    chair_frame();\n    seat();\n    backrest();\n    legs();\n    wheels();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "torus with sphere",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 46,
      "code": "// Torus with sphere as base\n$fn = 10;\n\n// Main body\ncylinder(h = 60, r = 30);\n\n// Top sphere as base\ntranslate([0, 0, 60]) sphere(d = 30);",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "cylinder with cone",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 54,
      "code": "// Realistic 3D-printable model of a wooden box with rounded edges and handle\n\n$fn = 32;                // Good for curves\nwall = 2;                 // Minimum wall thickness\n\nmodule box_body() {\n    difference() {\n        // Main box body - hollow cylinder\n        hull() {\n            scale([1, 1, 1]) sphere(r = 8, $fn = 32);\n            translate([0, 0, -1]) scale([0.8, 0.8, 0.8]) sphere(r = 6, $fn = 32);\n        }\n        // Hollow it out\n        translate([0, 0, -1]) scale([1, 1, 1]) sphere(r = 4, $fn = 32);\n    }\n}\n\nmodule box_lid() {\n    difference() {\n        // Lid shape - rounded top\n        hull() {\n            scale([1, 1, 1]) sphere(r = 6, $fn = 32);\n            translate([0, 0, -1]) scale([1, 1, 1]) sphere(r = 4, $fn = 32);\n        }\n        // Hollow it out\n        translate([0, 0, -1]) scale([1, 1, 1]) sphere(r = 4, $fn = 32);\n    }\n}\n\nmodule handle() {\n    difference() {\n        // Handle grip\n        hull() {\n            cylinder(h = 15, r = 3);\n            translate([0, -2, -5]) cylinder(h = 20, r = 3);\n        }\n        // Cut bottom\n        translate([0, 0, -5]) cube([4, 4, 4], center = true);\n    }\n}\n\nmodule support_feet() {\n    // Four feet\n    for (x = [-2, 2])\n    for (y = [-2, 2])\n        translate([x, y, -2])\n            cylinder(h = 3, r = 2);\n}\n\nmodule drawer() {\n    difference() {\n        // Drawer cavity\n        hull() {\n            scale([0.8, 0.8, 0.8]) sphere(r = 3, $fn = 32);\n            translate([0, 0, -1]) scale([0.7, 0.7, 0.7]) sphere(r = 2.5, $fn = 32);\n        }\n        // Hollow it out\n        translate([0, 0, -1]) scale([0.7, 0.7, 0.7]) sphere(r = 2.5, $fn = 32);\n    }\n    // Drawer front\n    difference() {\n        scale([0.9, 0.9, 0.9]) sphere(r = 2, $fn = 32);\n        translate([0, 0, -1]) cube([1.5, 1.5, 1.5], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    translate([0, 0, 2]) box_body();\n    translate([0, 0, 12]) box_lid();\n    handle();\n    support_feet();\n    drawer();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "union shape",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 77,
      "code": "// Realistic 3D-Printable Model: \"Ancient Egyptian Scribe\" - Medium Complexity\n\n// Overall dimensions: ~70mm height\n\n// Wall thickness for 3D printing (consider 2mm minimum)\nwall = 2;\n\n// Module: Wooden Panel (for hinge and clasp)\nmodule wooden_panel() {\n    difference() {\n        // Main panel\n        cube([40, 35, wall], center=true);\n\n        // Chamfered edges for realism\n        for (x = [-15, 15])\n            for (y = [-15, 15])\n                translate([x, y, 0])\n                    rotate([0, 90, 0])\n                        cube([3, 3, wall*2]);\n    }\n}\n\n// Module: Wooden Base Platform\nmodule base() {\n    difference() {\n        cube([20, 20, 2], center=true);\n        // Chamfered front edge\n        translate([0, 0, 2])\n            rotate([0, 0, 15])\n                cube([2, 2, 2], center=true);\n    }\n}\n\n// Module: Wooden Frame\nmodule frame() {\n    // Main frame box\n    difference() {\n        cube([35, 35, 55], center=true);\n        translate([0, 0, 2.5])\n            cube([34, 34, 51], center=true);\n    }\n    // Hinge detail\n    translate([0, 0, 2.5])\n        rotate([0, 90, 0])\n            cylinder(h=3, r=2, center=true);\n}\n\n// Module: Paper Scroll (realized as 2D cutouts)\nmodule scroll() {\n    // Scroll base\n    difference() {\n        cube([12, 12, 3], center=true);\n        translate([0, 0, -0.5])\n            cube([11, 11, 5], center=true);\n    }\n    // Scroll surface\n    difference() {\n        translate([0, 0, 0])\n            cube([12, 12, 3], center=true);\n            translate([0, 0, 0])\n                cube([11, 11, 5], center=true);\n    }\n}\n\n// Module: Inscription Panel\nmodule inscription_panel() {\n    difference() {\n        translate([0, 0, 0])\n            cube([25, 25, 4], center=true);\n        // Raised relief detail\n        for (x = [-5, 5])\n            for (y = [-5, 5])\n                translate([x, y, 0])\n                    difference() {\n                        cylinder(h=0.5, r=1.5, center=true);\n                        cylinder(h=0.2, r=1.2, center=true);\n                    }\n    }\n}\n\n// Module: Wooden Marker\nmodule marker() {\n    difference() {\n        cylinder(h=1, r=1.5, center=true);\n        // Small notch for handle\n        translate([0, 0, -0.5])\n            cylinder(h=2, r=1, center=true);\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        // Base and frame\n        base();\n        frame();\n        scroll();\n        inscription_panel();\n    }\n    \n    // Join everything together\n    translate([0, 0, 2.5])\n        union() {\n            translate([0, 0, 2.5])\n                wooden_panel();\n            translate([0, 0, 2.5])\n                base();\n            translate([0, 0, 2.5])\n                frame();\n            translate([0, 0, 2.5])\n                scroll();\n            translate([0, 0, 2.5])\n                inscription_panel();\n        }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "difference shape",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 84,
      "code": "// Realistic 3D-printable kitchen appliance \u2013 a compact refrigerator door/microwave unit\n// Approx. 80mm width, 60mm height, 50mm depth, 3 mm walls for 3D printing\n\n// Overall dimensions\nwidth = 80;\nheight = 50;\ndepth = 40;\nwall_thickness = 3;\n\n// Wall thickness for 3D printing\nwall_thickness = 3;\n\n// Main body with rounded top\nmodule body() {\n    difference() {\n        // Main body shell\n        hull() {\n            translate([0, 0, -depth/2]) sphere(d = depth);\n            translate([0, 0, 0]) cube([width*2, height*2, depth*2], center = true);\n        }\n        \n        // Rounded top edge\n        translate([0, 0, depth*2/3]) sphere(d = depth*1.2);\n    }\n}\n\n// Inner cavity for appliance\nmodule cavity() {\n    difference() {\n        // Main cavity walls\n        hull() {\n            translate([0, 0, -1]) cube([width*2 - 2*wall_thickness, height*2 - 2*wall_thickness, depth*2], center = true);\n            translate([0, 0, -1]) cube([width*2 - 2*wall_thickness, height*2 - 2*wall_thickness, depth*2], center = true);\n        }\n        \n        // Door opening\n        translate([0, 0, -1]) cube([width*2 - 2*wall_thickness, height*2 - 2*wall_thickness, depth*2 - 10]);\n        \n        // Control panel cavity\n        translate([0, 0, -1]) cube([width*2 - 2*wall_thickness, height*2 - 2*wall_thickness, depth*2 - 15]);\n    }\n}\n\n// Door handle with ergonomic grip\nmodule handle() {\n    difference() {\n        // Main handle block\n        cylinder(h = 10, r = 8);\n        \n        // Grip indentations\n        translate([0, 0, 5]) cube([6, 8, 2], center = true);\n    }\n    \n    // Handle mounting holes\n    translate([0, 0, 10]) cylinder(h = 5, r = 3);\n    translate([0, 0, -10]) cylinder(h = 5, r = 3);\n}\n\n// Control panel with buttons\nmodule control_panel() {\n    difference() {\n        // Main panel block\n        cube([width*2, height*2, 3], center = true);\n        \n        // Button holes\n        for (i = [0:3]) {\n            translate([i*12, 0, 1.5]) cube([2, height*2 - 4, 1], center = true);\n        }\n        \n        // Power button\n        translate([width*2 - 5, 0, 0]) cylinder(h = 1, r = 2);\n        \n        // Indicator light\n        translate([width*2 - 5, height*2 - 2.5, 0.5]) sphere(d = 1);\n    }\n}\n\n// Top ventilation grille\nmodule ventilation_grille() {\n    difference() {\n        cube([width*2, height*2, 4], center = true);\n        \n        // Grille slots\n        for (x = [0:2]) {\n            translate([x*width*1.5, 0, 2.5]) cube([2, height*2 - 4, 1.5], center = true);\n        }\n        \n        // Control holes\n        for (y = [0:1]) {\n            translate([0, y*height*1.5, 2.5]) cube([2, 2, 1], center = true);\n        }\n    }\n}\n\n// Base feet for stability\nmodule feet() {\n    for (x = [0:1]) {\n        for (y = [0:1]) {\n            translate([x*width/2 - 3, y*height/2 - 3, -depth/2 - 1]) cylinder(h = 1, r = 2);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    body();\n    cavity();\n    handle();\n    control_panel();\n    ventilation_grille();\n    feet();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "shape with indent",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 92,
      "code": "// Rounded cube with indent\nmodule rounded_cube_with_indent(size=50, indent_height=2, indent_radius=3, indent_depth=1) {\n    difference() {\n        // Main rounded cube\n        linear_extrude(height=size*0.3)\n            offset(r=indent_radius)\n                square([size*0.7, size*0.7], center=true);\n\n        // Indent on top\n        translate([0, 0, size*0.3])\n            linear_extrude(height=indent_height)\n                offset(r=indent_radius)\n                    square([size*0.7, size*0.7], center=true);\n\n        // Remove the indent to create the shape\n        linear_extrude(height=size*0.3)\n            offset(r=indent_radius)\n                square([size*0.7, size*0.7], center=true);\n    }\n}\n\n// Render the rounded cube with indent\nrounded_cube_with_indent();",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: Geometries in cache: 5\nGeometry cache size in bytes: 10376\nCGAL Polyhedrons in cache: 1\nCGAL cache size in bytes: 0\nTotal rendering time: 0:00:00.130\nCurrent top level object is empty.\n",
      "vlm_response": null
    },
    {
      "object": "intersection shape",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 82,
      "code": "// Realistic 3D-printable model of a medium-complexity chair\n// Designed for 3D printing without support marks\n\n// Parameters\nseat_width = 45;\nseat_depth = 40;\nseat_height = 45;\nback_height = 50;\nleg_height = 50;\narmrest_height = 40;\nback_rest_width = 80;\nback_rest_depth = 50;\nback_rest_thickness = 15;\n\n// Main assembly\nmodule chair() {\n    // Seat\n    difference() {\n        cube([seat_width, seat_depth, seat_height], center=true);\n        translate([0, 0, seat_height/2 - 0.5]) cube([seat_width + 1, seat_depth + 1, seat_height + 0.5], center=true);\n    }\n    \n    // Backrest\n    difference() {\n        // Main backrest panel\n        cube([back_rest_width, back_rest_depth, back_rest_height], center=true);\n        \n        // Cutouts for legs\n        for (x = [-back_rest_width/2 + 1, back_rest_width/2 - 1]) {\n            for (y = [-back_rest_depth/2 + 1, back_rest_depth/2 - 1]) {\n                translate([x, y, -back_rest_height/2]) {\n                    cube([back_rest_width, back_rest_depth, back_rest_height - 2]);\n                }\n            }\n        }\n        \n        // Legs\n        for (x = [-back_rest_width/2 + 1, back_rest_width/2 - 1]) {\n            for (y = [-back_rest_depth/2 + 1, back_rest_depth/2 - 1]) {\n                translate([x, y, -back_rest_height/2]) {\n                    cube([leg_height, leg_height, leg_height]);\n                }\n            }\n        }\n    }\n    \n    // Armrests\n    difference() {\n        // Left armrest\n        translate([-seat_width/2 - arm_rest_width/2, 0, seat_height/2 + arm_rest_height/2]) {\n            cube([arm_rest_width, arm_rest_depth, arm_rest_height]);\n            translate([0, 0, arm_rest_height/2 - 0.5]) cube([arm_rest_width - 2, arm_rest_depth - 2, arm_rest_height - 2]);\n        }\n        \n        // Right armrest\n        translate([seat_width/2 + arm_rest_width/2, 0, seat_height/2 + arm_rest_height/2]) {\n            cube([arm_rest_width, arm_rest_depth, arm_rest_height]);\n            translate([0, 0, arm_rest_height/2 - 0.5]) cube([arm_rest_width - 2, arm_rest_depth - 2, arm_rest_height - 2]);\n        }\n    }\n    \n    // Backrest\n    difference() {\n        // Main backrest\n        translate([0, back_rest_depth/2, back_rest_height/2]) {\n            cube([back_rest_width, back_rest_depth, back_rest_height]);\n            translate([0, 0, 0]) cube([back_rest_width - 1, back_rest_depth - 1, back_rest_height - 2]);\n        }\n        \n        // Cutouts for legs\n        for (x = [-back_rest_width/2 + 1, back_rest_width/2 - 1]) {\n            for (y = [-back_rest_depth/2 + 1, back_rest_depth/2 - 1]) {\n                translate([x, y, -back_rest_height/2]) {\n                    cube([leg_height, leg_height, back_rest_height - 2]);\n                }\n            }\n        }\n    }\n    \n    // Decorative details\n    // Corner brackets\n    for (x = [-seat_width/2 + 1, seat_width/2 - 1]) {\n        for (y = [-seat_depth/2 + 1, seat_depth/2 - 1]) {\n            translate([x, y, -seat_height/2 - 10]) {\n                cube([4, 4, 8]);\n            }\n        }\n    }\n    \n    // Legs\n    for (x = [-seat_width/2 + 1, seat_width/2 - 1]) {\n        for (y = [-seat_depth/2 + 1, seat_depth/2 - 1]) {\n            translate([x, y, -seat_height/2 + 5]) {\n                cube([leg_height, leg_height, leg_height]);\n            }\n        }\n    }\n}\n\n// Render the model\nchair();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "shape with cavity",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 64,
      "code": "// Realistic Medium-Complexity Box (approx. 120 x 80 x 40 mm)\n// Wall thickness 2 mm throughout for printability\n// No overhangs over 45 \u00b0 for 3D printing\n\n$fn = 36;          // Smooth curves\nwall = 2;           // 2 mm wall thickness\n\n// Main body\ndifference() {\n    // Outer shell\n    scale([1, 1, 1.1]) {\n        linear_extrude(height = 40, scale = [1, 1, 1])\n            square(120);\n    }\n    \n    // Hollow cavity\n    scale([1, 1, 0.95]) {\n        linear_extrude(height = 40, scale = [0.9, 0.9, 0.95])\n            square(120);\n    }\n}\n\n// Top lid with hinged mechanism\ndifference() {\n    union() {\n        // Lid assembly\n        translate([0, 0, 5])\n            cube([120, 80, 40], center = true);\n        // Hinged groove for lid\n        translate([0, 0, 75])\n            cube([120, 80, 40], center = true);\n    }\n    \n    // Hollow cavity\n    translate([0, 0, 0])\n        cube([120, 80, 40], center = true);\n}\n\n// Front panel with vents\ndifference() {\n    // Front face\n    translate([0, 0, 0])\n        cube([120, 80, 30], center = true);\n    \n    // Vents on top\n    for (x = [-30, 30]) {\n        translate([x, 0, 15])\n            cube([15, 8, 20], center = true);\n    }\n}\n\n// Side panels with cable management\ndifference() {\n    translate([0, 0, -5])\n        cube([120, 80, 30], center = true);\n    translate([0, 0, 30])\n        cube([120, 80, 30], center = true);\n}\n\n// Bottom feet for stability\ndifference() {\n    cube([120, 80, 4], center = true);\n    translate([0, 0, 2])\n        cube([120, 80, 2], center = true);\n}\n\n// Wall reinforcement\ndifference() {\n    translate([0, 0, 2])\n        cube([120, 80, 20], center = true);\n    translate([0, 0, 30])\n        cube([120, 80, 20], center = true);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "cut shape",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 56,
      "code": "// Realistic 19th-century wooden box (circa 1880s)\n// Medium complexity with 3D-printable features\n\n// Overall dimensions (mm)\nbox_width = 80;\nbox_length = 60;\nbox_height = 45;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main box body\nmodule box_body() {\n    difference() {\n        // Main box shape with slight taper\n        hull() {\n            translate([0, 0, box_height/2]) cube([box_width, box_length, box_height]);\n            translate([0, box_length/2, box_height/2]) cube([box_width-4, box_length-4, box_height-2]);\n        }\n        \n        // Hollow out box for printing\n        hull() {\n            translate([0, 0, box_height/2]) cube([box_width-wall_thickness*2, box_length-wall_thickness*2, box_height-wall_thickness*2]);\n            translate([0, box_length/2, box_height/2]) cube([box_width-wall_thickness*2, box_length-wall_thickness*2, box_height-wall_thickness*2]);\n        }\n    }\n}\n\n// Box lid with hinge\nmodule lid() {\n    difference() {\n        // Main lid box\n        translate([0, box_length/2-wall_thickness, box_height/2]) cube([box_width, box_length, box_height]);\n        \n        // Hollow out lid for printing\n        hull() {\n            translate([0, box_length/2-wall_thickness, box_height/2]) cube([box_width-wall_thickness*2, box_length-wall_thickness*2, box_height-wall_thickness*2]);\n            translate([0, box_length/2-wall_thickness, box_height/2]) cube([box_width-wall_thickness*2, box_length-wall_thickness*2, box_height-wall_thickness*2]);\n        }\n    }\n    \n    // Hinged lid with screw\n    difference() {\n        hull() {\n            translate([0, box_length/2-wall_thickness, box_height/2]) cube([box_width, box_length, box_height]);\n            translate([0, box_length/2-wall_thickness, box_height/2]) cube([box_width-wall_thickness*2, box_length-wall_thickness*2, box_height-wall_thickness*2]);\n        }\n        \n        // Screw hole\n        translate([0, box_length/2-wall_thickness/2, box_height/2]) cylinder(h=wall_thickness+2, d=wall_thickness, center=true);\n        translate([0, box_length/2-wall_thickness/2, box_height/2]) cylinder(h=wall_thickness+2, d=wall_thickness, center=true);\n    }\n}\n\n// Drawer front\nmodule drawer() {\n    difference() {\n        // Main drawer box\n        translate([0, box_length/2-wall_thickness, box_height/2-4]) cube([box_width-wall_thickness*2, box_length-wall_thickness*2, box_height-4]);\n        \n        // Hollow out drawer for printing\n        hull() {\n            translate([0, box_length/2-wall_thickness, box_height/2-4]) cube([box_width-wall_thickness*2, box_length-wall_thickness*2, box_height-4]);\n            translate([0, box_length/2-wall_thickness, box_height/2-4]) cube([box_width-wall_thickness*2, box_length-wall_thickness*2, box_height-4]);\n        }\n    }\n}\n\n// Drawer front panel\nmodule drawer_panel() {\n    difference() {\n        // Main panel\n        translate([0, box_length/2-wall_thickness, box_height/2-8]) cube([box_width-wall_thickness*2, box_length-wall_thickness*2, box_height-8]);\n        \n        // Hollow out panel\n        hull() {\n            translate([0, box_length/2-wall_thickness, box_height/2-8]) cube([box_width-wall_thickness*2, box_length-wall_thickness*2, box_height-8]);\n            translate([0, box_length/2-wall_thickness, box_height/2-8]) cube([box_width-wall_thickness*2, box_length-wall_thickness*2, box_height-8]);\n        }\n    }\n}\n\n// Side panels with support brackets\nmodule side_panel() {\n    difference() {\n        // Main panel\n        translate([box_width/2-wall_thickness, box_length/2-wall_thickness, box_height/2-4]) cube([box_width-wall_thickness*2, box_length-wall_thickness*2, box_height-4]);\n        \n        // Hollow out panel for printing\n        hull() {\n            translate([box_width/2-wall_thickness, box_length/2-wall_thickness, box_height/2-4]) cube([box_width-wall_thickness*2, box_length-wall_thickness*2, box_height-4]);\n            translate([box_width/2-wall_thickness, box_length/2-wall_thickness, box_height/2-4]) cube([box_width-wall_thickness*2, box_length-wall_thickness*2, box_height-4]);\n        }\n    }\n}\n\n// Bottom panel with feet\nmodule bottom_panel() {\n    difference() {\n        // Main panel\n        translate([0, box_length/2-wall_thickness, box_height/2-4]) cube([box_width-wall_thickness*2, box_length-wall_thickness*2, box_height-4]);\n        \n        // Hollow out panel for printing\n        hull() {\n            translate([0, box_length/2-wall_thickness, box_height/2-4]) cube([box_width-wall_thickness*2, box_length-wall_thickness*2, box_height-4]);\n            translate([0, box_length/2-wall_thickness, box_height/2-4]) cube([box_width-wall_thickness*2, box_length-wall_thickness*2, box_height-4]);\n        }\n    }\n    \n    // Foot brackets\n    for(x=[0, box_width/2-wall_thickness-1]) {\n        for(y=[0, box_length/2-wall_thickness-1]) {\n            translate([x, y, -wall_thickness/2]) cube([wall_thickness*2, wall_thickness, wall_thickness*2]);\n        }\n    }\n}\n\n// Handle\nmodule handle() {\n    difference() {\n        // Main handle\n        translate([box_width/2-wall_thickness, box_length/2-wall_thickness-1, box_height/2-5]) cylinder(h=wall_thickness+2, d=6, center=true);\n        \n        // Grip pattern\n        for(x=[0, box_width/2-wall_thickness-1, box_length/2-wall_thickness-1]) {\n            translate([x, box_length/2-wall_thickness-1, box_height/2-5]) cylinder(h=wall_thickness+2, d=3, center=true);\n        }\n    }\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: Geometries in cache: 1\nGeometry cache size in bytes: 0\nCGAL Polyhedrons in cache: 0\nCGAL cache size in bytes: 0\nTotal rendering time: 0:00:00.000\nCurrent top level object is empty.\n",
      "vlm_response": null
    },
    {
      "object": "layered cube",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 11,
      "code": "// Realistic 3D-print compatible hollow cube with walls 10mm thick and no steep overhangs\n\n// Overall dimensions\nlength = 60;       // main body length\nwidth = 40;        // main body width\nheight = 30;       // main body height\nwall_thickness = 10; // printable wall thickness\n\n// Inner cavity\ndifference() {\n    cube([length-wall_thickness*2, width-wall_thickness*2, height-wall_thickness*2]);\n    // Hollow out center\n    translate([0, 0, 0])\n        cube([length-2*wall_thickness, width-2*wall_thickness, height-2*wall_thickness]);\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: Geometries in cache: 2\nGeometry cache size in bytes: 1456\nCGAL Polyhedrons in cache: 1\nCGAL cache size in bytes: 0\nTotal rendering time: 0:00:00.019\nCurrent top level object is empty.\n",
      "vlm_response": null
    },
    {
      "object": "hollowed out",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 11,
      "code": "// OpenSCAD Realistic Piston Tool (Medium Complexity)\n// A hand-powered piston tool for working with small parts,\n// with integrated handle and safety features.\n\n// Overall dimensions: 80mm length, 40mm width, 50mm height\n\nmodule piston_body() {\n    // Main piston cylinder with slight taper\n    cylinder(h=15, r=20, $fn=50);\n    // Piston head (cylindrical with mounting hole)\n    translate([0, 0, 2]) cylinder(h=5, r=25, $fn=30);\n}\n\nmodule piston_head() {\n    // Piston head with threaded collar for attachment\n    difference() {\n        cylinder(h=8, r=18, $fn=30);\n        translate([0, 0, 8]) cylinder(h=5, r=14, $fn=30);\n        // Threaded collar\n        cylinder(h=2, r=12, $fn=20);\n    }\n}\n\nmodule handle() {\n    // Ergonomic handle with grip pattern\n    difference() {\n        union() {\n            // Main grip\n            cylinder(h=20, r=15, $fn=30);\n            // Grip grooves\n            for(i=[0:5]) {\n                translate([0, 0, i*20]) cylinder(h=0.5, r=13, $fn=30);\n            }\n        }\n        // Punch holes\n        translate([0, 0, 20]) cylinder(h=1, r=5, $fn=30);\n        translate([0, 0, -20]) cylinder(h=1, r=5, $fn=30);\n    }\n}\n\nmodule safety_guard() {\n    // Safety collar around piston head\n    difference() {\n        cylinder(h=2, r=25, $fn=30);\n        translate([0, 0, 2]) cylinder(h=3, r=23, $fn=30);\n    }\n}\n\nmodule support_feet() {\n    // Four ball-bearing feet for stability\n    for(x=[-20, 0, 20])\n        for(y=[-10, 0, 10])\n            translate([x, y, -5]) cylinder(h=3, r=6, $fn=20);\n}\n\nmodule mounting_collar() {\n    // Collar for securing handle to tool\n    difference() {\n        cylinder(h=3, r=22, $fn=30);\n        translate([0, 0, 3]) cylinder(h=1, r=18, $fn=30);\n    }\n}\n\nmodule assembly() {\n    // Main assembly\n    union() {\n        // Handle\n        rotate([0, 0, 45]) handle();\n        // Piston head\n        rotate([0, 0, 90]) cylinder(h=5, r=25, $fn=30);\n        // Safety guard\n        translate([0, 0, 5]) safety_guard();\n        // Piston body\n        translate([0, 0, 10]) piston_body();\n        // Mounting collar\n        translate([0, 0, 50]) support_feet();\n        // Piston head\n        translate([0, 0, 30]) cylinder(h=5, r=25, $fn=30);\n    }\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: Geometries in cache: 1\nGeometry cache size in bytes: 0\nCGAL Polyhedrons in cache: 0\nCGAL cache size in bytes: 0\nTotal rendering time: 0:00:00.000\nCurrent top level object is empty.\n",
      "vlm_response": null
    },
    {
      "object": "with negative space",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 62,
      "code": "// Realistic 3D-printable model of a medium-complexity 8-spoke steering wheel\n// Designed for 3D printing with no steep overhangs and minimal support\n\n// Overall dimensions (mm)\nwheel_diameter = 30;\nwheel_thickness = 8;\nhub_diameter = 12;\nhub_thickness = 10;\nspoke_count = 8;\nspoke_width = 1.5;\nspoke_height = 1.2;\ngrip_diameter = 12;\ngrip_height = 2;\n\n// Base plate\nmodule base_plate() {\n    difference() {\n        cube([wheel_diameter*2, wheel_thickness*2, 4], center=true);\n        translate([0, 0, 2]) cube([wheel_diameter*2-2, wheel_thickness*2-2, 4], center=true);\n    }\n}\n\n// Hub\nmodule hub() {\n    difference() {\n        cylinder(h=hub_thickness, d=hub_diameter);\n        translate([0, 0, -0.1]) cube([hub_diameter*2-2, hub_diameter, hub_thickness*2], center=true);\n    }\n}\n\n// Spoke\nmodule spoke() {\n    difference() {\n        cylinder(h=spoke_height, d=spoke_width);\n        translate([0, 0, -1]) cylinder(h=spoke_height+2, d=spoke_width);\n    }\n}\n\n// Grip\nmodule grip() {\n    difference() {\n        cylinder(h=grip_height, d=grip_diameter);\n        translate([0, 0, 2]) cube([grip_diameter, grip_height, 2], center=true);\n    }\n}\n\n// Steering column\nmodule steering_column() {\n    difference() {\n        cylinder(h=3, d=wheel_diameter/2);\n        cylinder(h=3, d=wheel_thickness);\n    }\n}\n\n// Steering wheel\nmodule steering_wheel() {\n    difference() {\n        union() {\n            // Base\n            base_plate();\n            // Hub\n            translate([0, 0, -wheel_thickness*2/2 + 1]) hub();\n            // Spoke assembly\n            translate([0, 0, -wheel_thickness*2/2 + 1])\n            for(i=[0:spoke_count-1])\n            {\n                spoke();\n            }\n            translate([0, 0, wheel_thickness*2/2 + 1])\n            for(i=[0:spoke_count-1])\n            {\n                spoke();\n            }\n        }\n        // Center hole\n        cylinder(h=wheel_thickness*2/2 + 1, d=1.5);\n        cylinder(h=wheel_thickness*2/2 + 2, d=3);\n    }\n}\n\n// Steering wheel spokes\nmodule steering_wheel_spokes() {\n    // Central hub\n    translate([0, 0, wheel_thickness*2/2 + 1])\n    for(i=[0:spoke_count-1])\n    {\n        rotate([0, 0, i*360/spoke_count])\n        translate([0, 0, wheel_thickness*2/2 + 1])\n        spoke();\n    }\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: Geometries in cache: 1\nGeometry cache size in bytes: 0\nCGAL Polyhedrons in cache: 0\nCGAL cache size in bytes: 0\nTotal rendering time: 0:00:00.000\nCurrent top level object is empty.\n",
      "vlm_response": null
    },
    {
      "object": "layered rings",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 80,
      "code": "// Realistic 3D-printable model of a vintage radio (1939 style)\n// Medium-complexity model with proper wall thickness and no overhangs\n\n// Overall size: ~70 mm tall\n\n// Wall thickness for 3D printing: 1.2 mm\nwall = 1.2;\n\n// Base plate\nmodule base() {\n    difference() {\n        cube([80, 40, 4], center = true);\n        translate([0, 0, -0.1]) cube([80, 40, 4.2], center = true);\n    }\n}\n\n// Main housing\nmodule main() {\n    difference() {\n        // Outer shell\n        cube([70, 38, 40], center = true);\n        translate([0, 0, 2]) cube([70, 38, 36], center = true);\n        // Rounded front edge\n        translate([0, 0, 2]) cube([70, 38, 36], center = true);\n    }\n}\n\n// Front panel\nmodule front() {\n    difference() {\n        cube([72, 38, 25], center = true);\n        translate([0, 0, -1]) cube([72, 38, 25.2], center = true);\n    }\n}\n\n// Top plate\nmodule top() {\n    difference() {\n        cube([74, 36, 20], center = true);\n        translate([0, 0, 2]) cube([74, 36, 20.2], center = true);\n    }\n}\n\n// Control panel\nmodule control() {\n    difference() {\n        cube([68, 30, 18], center = true);\n        translate([0, 0, 2]) cube([68, 30, 18.2], center = true);\n    }\n}\n\n// Rear panel\nmodule rear() {\n    difference() {\n        cube([68, 30, 20], center = true);\n        translate([0, 0, 2]) cube([68, 30, 20.2], center = true);\n    }\n}\n\n// Power dial\nmodule power() {\n    difference() {\n        cylinder(h = 5, r = 5, center = true);\n        translate([0, 0, -2.5]) cylinder(h = 5, r = 3.5, center = true);\n    }\n}\n\n// Volume knob\nmodule knob() {\n    difference() {\n        cylinder(h = 2, r = 3, center = true);\n        translate([0, 0, 2.5]) cylinder(h = 2.2, r = 2, center = true);\n    }\n}\n\n// Volume indicator\nmodule indicator() {\n    difference() {\n        cylinder(h = 1, r = 3.5, center = true);\n        translate([0, 0, 2.5]) cylinder(h = 1.2, r = 2.5, center = true);\n    }\n}\n\n// Antenna\nmodule antenna() {\n    difference() {\n        cylinder(h = 15, r = 3.5, center = true);\n        translate([0, 0, -15]) cylinder(h = 17, r = 3.5, center = true);\n    }\n}\n\n// Wiring connector\nmodule connector() {\n    difference() {\n        cylinder(h = 3, r = 3.5, center = true);\n        translate([0, 0, -2.5]) cylinder(h = 3.5, r = 2.5, center = true);\n    }\n}\n\n// Labels\nmodule label() {\n    difference() {\n        cylinder(h = 0.5, r = 3.5, center = true);\n        translate([0, 0, 2.5]) cylinder(h = 0.5, r = 2.5, center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    translate([0, 0, 15]) main();\n    translate([0, 0, 18]) front();\n    translate([0, 0, 28]) top();\n    translate([0, 0, 38]) rear();\n    translate([0, 0, 40]) power();\n    translate([0, 0, 55]) knob();\n    translate([0, 0, 62]) indicator();\n    translate([0, 0, 70]) volume()();\n    translate([0, 0, 75]) volume()();\n    translate([0, 0, 80]) antenna();\n    translate([0, 0, 90]) connector();\n    translate([0, 0, 95]) label();\n    translate([0, 0, 110])  translate([0, 0, 0]) label();\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: ERROR: Parser error: syntax error in file evaluation/ThomasTheMaker_k-1b_20251029_161318/layered_rings.scad, line 118\nCan't parse file 'evaluation/ThomasTheMaker_k-1b_20251029_161318/layered_rings.sca",
      "vlm_response": null
    },
    {
      "object": "nested boxes",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 67,
      "code": "// Realistic Medium-Complexity OpenSCAD Model\n// A medium-complexity 3D-printable box with rounded edges and mounting holes\n\n$fn = 30;\n\n// Overall dimensions\nbase_width = 80;\nbase_depth = 60;\nbase_height = 25;\n\n// Wall thickness\nwall_thickness = 2;\n\n// Mounting holes (x4)\nmount_holes = [\n    [15, 15],\n    [25, 15],\n    [25, 25],\n    [15, 25]\n];\n\n// Base plate with rounded top\nmodule box_plate() {\n    difference() {\n        // Main plate\n        cube([base_width, base_depth, base_height]);\n        // Rounded top edges\n        translate([0, 0, base_height - 2])\n            minkowski() {\n                cube([base_width, base_depth, base_height - 2]);\n                translate([0, 0, -base_height/2 + 1])\n                    sphere(d = base_width * 0.3);\n            }\n    }\n}\n\n// Rounded top edges\nmodule rounded_top() {\n    difference() {\n        cube([base_width - 2*wall_thickness, base_depth - 2*wall_thickness, base_height]);\n        translate([0, 0, -1])\n            sphere(d = base_width - 2*wall_thickness);\n    }\n}\n\n// Mounting holes\nmodule mounting_holes() {\n    for (i = [0 : mount_holes.length - 1]) {\n        rotate([0, 0, i * 180]) {\n            translate([base_width/2 - 4, 0, base_height/2 - 3])\n                cylinder(h = wall_thickness + 1, r = 2, $fn = 3);\n        }\n    }\n}\n\n// Box body\nmodule box_body() {\n    difference() {\n        cube([base_width, base_depth, base_height]);\n        // Inner cavity for printing\n        translate([0, 0, wall_thickness/2])\n            cube([base_width - 2*wall_thickness, base_depth - 2*wall_thickness, base_height - 2*wall_thickness - 1]);\n        // Rounded top edges\n        rounded_top();\n    }\n}\n\n// Reinforcement ribs\nmodule ribs() {\n    for (i = [0 : 4]) {\n        translate([0, 0, -base_height/4])\n            cube([base_width + 4, base_depth + 4, 2]);\n    }\n}\n\n// Doorway with hinge pins\nmodule door() {\n    difference() {\n        cube([base_width - 4, base_depth - 4, 2]);\n        translate([0, 0, wall_thickness/2])\n            cube([base_width - 4, base_depth - 4, 2]);\n    }\n    // Hinges\n    translate([base_width/2 - 2, 0, 0])\n        cylinder(h = 4, r = 1.5);\n    translate([base_width/2 - 2, 0, 0])\n        cylinder(h = 4, r = 1.5);\n}\n\n// Handle\nmodule handle() {\n    translate([base_width/2 + 2, 0, base_height/2 + 1])\n        cylinder(h = 3, r = 1.5);\n}\n\n// Base plate with rounded edges\nmodule base_plate() {\n    difference() {\n        rounded_top();\n        cube([base_width, base_depth, 2]);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    box_body();\n\n    // Mounting holes\n    mounting_holes();\n\n    // Door\n    translate([base_width/2 - 10, 0, base_height/2 - 3])\n        rotate([0, 0, 45])\n            door();\n\n    // Handle\n    translate([base_width/2 + 2, 0, base_height/2 + 1])\n        handle();\n\n    // Reinforcement ribs\n    ribs();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "concentric spheres",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 52,
      "code": "// Medium complexity realistic toy car\n// Overall size: ~80 mm long, 20 mm wide, 40 mm high\n\n$fn = 32;               // Circle resolution\nwall_thickness = 1.5;    // Wall thickness for 3D printing\nbody_len = 80;            // Total length\nbody_w = 20;              // Total width\nbody_h = 30;               // Total height\nwheel_d = 8;              // Wheel diameter\nwheel_h = 5;              // Wheel height\naxle_d = 4;               // Axle diameter\naxle_w = 3;               // Axle width\nbody_r = 6;               // Body radius\nbody_t = 2;               // Body thickness\n\nmodule car_body() {\n    difference() {\n        // Main body block\n        cube([body_len, body_w, body_h], center = true);\n        \n        // Windshield\n        translate([0, body_w/2 - 5, body_h/2 - 5])\n            cube([body_len - 10, 10, 10], center = true);\n        \n        // Roof\n        translate([0, -body_w/2 + 5, body_h/2 + 5])\n            cube([body_len, body_w, 10], center = true);\n        \n        // Wheel wells\n        for (x = [0, body_len - body_len - 20])\n            for (y = [0, body_w - 20])\n                translate([x, y, -body_h/2 - 3])\n                    cylinder(h = 15, d = body_r + 2);\n    }\n}\n\nmodule wheels() {\n    // Front axle\n    difference() {\n        cylinder(h = body_h + 5, r = wheel_d/2, center = false);\n        for (z = -body_h/2 - 10) {\n            translate([0, 0, z + 10])\n                cylinder(h = 2, r = wheel_d/2);\n        }\n        cylinder(h = 2, r = wheel_d/2);\n    }\n    \n    // Rear axle\n    difference() {\n        cylinder(h = body_h + 5, r = wheel_d/2, center = false);\n        for (z = -body_h/2 - 10)\n            translate([0, 0, z + 10])\n                cylinder(h = 2, r = wheel_d/2);\n        cylinder(h = 2, r = wheel_d/2);\n    }\n    \n    // Axle bearings\n    for (z = [-body_h/2 - 10, body_h/2 + 10])\n        cylinder(h = 2, r = wheel_d/2 + 1);\n}\n\nmodule chassis() {\n    difference() {\n        cube([body_len - 40, body_w - 40, 4], center = true);\n        \n        // Wheel hubs\n        for (z = [-body_h/2 - 20, body_h/2 + 20])\n            translate([0, 0, z])\n                cylinder(h = 3, r = wheel_d/2);\n        \n        // Engine compartment\n        translate([0, 0, body_h/2 - 15])\n            cube([body_len - 40 - 10, body_w - 40 - 10, 20], center = true);\n        \n        // Body panels\n        translate([-body_len/2 + 10, 0, 0])\n            cube([body_len - 40, body_w - 40, 2], center = true);\n        translate([-body_len/2 + 10, body_w - 40, 0])\n            cube([body_len - 40, body_w - 40, 2], center = true);\n    }\n}\n\nmodule chassis_frame() {\n    // Main chassis\n    difference() {\n        cube([body_len - 20, body_w - 20, 3], center = true);\n        translate([0, 0, -1])\n            cube([body_len - 20 - 2, body_w - 20 - 2, 3], center = true);\n        \n        // Steering column\n        cylinder(h = 8, r = 2);\n        \n        // Engine cover\n        translate([0, 0, -4])\n            cube([body_len - 20 - 5, body_w - 20 - 5, 10], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    car_body();\n    chassis();\n    chassis_frame();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "rotated square",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 89,
      "code": "// Realistic OpenSCAD model of a medium-complexity 3D-printable chair\n// Dimensions: ~80 mm length, ~45 mm width, ~50 mm height\n\nmodule chair_frame() {\n    // Main frame structure - 8 mm walls for 3D printing\n    difference() {\n        cube([80, 45, 50], center=true);\n        translate([0, 0, 2]) cube([80, 45, 40], center=true);\n    }\n\n    // Seat pan - 12 mm width, 10 mm depth\n    translate([0, 0, 2]) cube([12, 10, 12], center=true);\n    translate([0, 0, 12]) cube([12, 10, 12], center=true);\n    translate([0, 0, 24]) cube([12, 10, 12], center=true);\n}\n\nmodule seat() {\n    difference() {\n        cube([12, 10, 12], center=true);\n        translate([0, 0, 4]) cube([12, 10, 8], center=true);\n    }\n}\n\nmodule backrest() {\n    difference() {\n        cube([30, 25, 30], center=true);\n        translate([0, -10, 30]) cube([30, 25, 30], center=true);\n    }\n    \n    // Top support bars\n    for(y = [-10:5:10]) {\n        translate([0, y, 35]) cube([30, 1, 30], center=true);\n    }\n}\n\nmodule leg() {\n    difference() {\n        cube([4, 4, 40], center=true);\n        translate([0, 0, 2]) cube([2, 2, 28], center=true);\n    }\n}\n\nmodule joints() {\n    // Front left joint\n    translate([-10, 0, 20]) {\n        cylinder(h=5, r1=3, r2=3);\n    }\n    \n    // Front right joint\n    translate([10, 0, 20]) {\n        cylinder(h=5, r1=3, r2=3);\n    }\n    \n    // Back left joint\n    translate([-10, 0, -20]) {\n        cylinder(h=5, r1=3, r2=3);\n    }\n    \n    // Back right joint\n    translate([10, 0, -20]) {\n        cylinder(h=5, r1=3, r2=3);\n    }\n    \n    // Seat joint (simple cylinder for 3D printing)\n    translate([0, 0, 12]) {\n        cylinder(h=2, r=4, center=true);\n    }\n    \n    // Armrest joints (simple cylinders)\n    for(x = [-10, 10]) {\n        for(y = [10, -10]) {\n            translate([x, y, 0]) {\n                cylinder(h=4, r=2, center=true);\n            }\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    chair_frame();\n    seat();\n    backrest();\n    leg();\n    joints();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "twisted shape",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 32,
      "code": "// Toy-sized robotic arm with realistic proportions and details\n// Designed for 3D printing with 0.4 mm wall thickness\n\n// Main parameters\narm_length = 80;\narm_width = 25;\narm_height = 40;\nshoulder_radius = 8;\ngrip_length = 15;\nfinger_length = 12;\nfinger_width = 4;\nfinger_height = 8;\n\n// Module for rounded cube\nmodule rounded_cube(size, radius) {\n    hull() {\n        for (x = [0:1.5:size.x - 2])\n            for (y = [0:1.5:size.y - 2])\n                for (z = [0:1.5:size.z - 2])\n                    translate([x, y, z])\n                        sphere(r = radius);\n    }\n}\n\n// Module for textured grip\nmodule grip_texture() {\n    color(\"darkgreen\")\n    difference() {\n        rounded_cube([finger_length, finger_width, grip_length], radius = grip_length);\n        for (i = [0:1:finger_length-1])\n            translate([0, 0, i])\n                cube([finger_width, 1, grip_length + 0.2]);\n    }\n}\n\n// Module for joints\nmodule joint(x, y, z) {\n    difference() {\n        cube([arm_width*0.2, arm_height*0.2, arm_height*0.2]);\n        translate([x, y, z])\n            scale([1, 1, 1])\n                sphere(r = arm_width*0.1);\n    }\n}\n\n// Module for finger segments\nmodule finger(x, y, z) {\n    // Base\n    color(\"darkgray\")\n    translate([x, y, z])\n        rounded_cube([finger_length, finger_width, finger_height], radius = finger_width);\n    \n    // Middle finger segments\n    translate([x, y, z])\n        for (i = [0:3])\n            translate([x, y, i*finger_height/3])\n                rotate([0, 90, 0])\n                    scale([1, 1, 1])\n                        cylinder(h=finger_width, r=finger_width/2, $fn=3);\n    \n    // Tip\n    translate([x, y, z])\n        rotate([0, 90, 0])\n            scale([1, 1, 1])\n                cylinder(h=finger_height*1.5, r=finger_width/2, $fn=3);\n}\n\n// Main assembly\nmodule robotic_arm() {\n    // Main body\n    color(\"silver\")\n    difference() {\n        scale([1.2, 1.2, 1.2])\n            rounded_cube([arm_length, arm_width, arm_height], radius = 3);\n        \n        // Shoulder joints\n        joint(shoulder_radius, shoulder_radius*0.7, shoulder_height*0.4);\n        joint(shoulder_radius, shoulder_radius*0.7, shoulder_height*0.4);\n    }\n    \n    // Grips\n    grip_texture();\n    for (i = [0:3])\n        translate([i*arm_length/4, 0, -grip_length/2])\n            rotate([90, 0, 0])\n                finger(i*arm_length/4, 0, 0);\n    \n    // Arms\n    for (i = [0:2])\n        translate([-i*arm_length/4, 0, 0])\n            rotate([0, 90, 0])\n                joint(0, 0, 0);\n    \n    // Elbow joints\n    translate([-arm_length/2 - 10, 0, 0])\n        rotate([0, 90, 0])\n            joint(0, 0, 0);\n    translate([arm_length/2 - 10, 0, 0])\n        rotate([0, 90, 0])\n            joint(0, 0, 0);\n    \n    // Hand\n    color(\"red\")\n    translate([-arm_length/2 - 5, 0, 0])\n        rotate([0, 90, 0])\n            joint(0, 0, 0);\n    \n    // Main grip\n    color(\"darkgreen\")\n    difference() {\n        rounded_cube([arm_width*0.5, arm_height*0.5, 10], radius = 2);\n    }\n    \n    // Details\n    color(\"black\")\n    translate([arm_length/2 - 5, 0, 0])\n        cylinder(h=1, r=0.5, $fn=3);\n    \n    // Support struts\n    translate([0, 0, -arm_height*0.4])\n        cylinder(h=3, r=0.5, $fn=3);\n    translate([arm_length*0.5, 0, -arm_height*0.4])\n        cylinder(h=3, r=0.5, $fn=3);\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: Geometries in cache: 1\nGeometry cache size in bytes: 0\nCGAL Polyhedrons in cache: 0\nCGAL cache size in bytes: 0\nTotal rendering time: 0:00:00.000\nCurrent top level object is empty.\n",
      "vlm_response": null
    },
    {
      "object": "spiral shape",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 61,
      "code": "// Realistic 3D-Printable Steamer Tool - OpenSCAD\n// Medium complexity, 3D-printable, ~80 mm tall\n\n$fn = 32;\n\n// Main parameters\nwall_thickness = 1.5;\nhandle_length = 60;\nhandle_diameter = 8;\nstem_diameter = 8;\nblade_width = 35;\nblade_height = 25;\n\n// Main handle body\nmodule handle() {\n    difference() {\n        cylinder(h = 35, d = handle_diameter);\n        translate([0, 0, -0.1]) cylinder(h = 36, d = handle_diameter);\n    }\n}\n\n// Handle grip texture\nmodule grip() {\n    for(i = [0:1]) {\n        translate([0, 0, 35 - i * 3]) {\n            cube([handle_diameter * 0.8, handle_diameter * 0.8, 0.4]);\n        }\n    }\n}\n\n// Steaming spout assembly\nmodule spout() {\n    difference() {\n        cylinder(h = 30, d1 = blade_width, d2 = 8);\n        translate([0, 0, -1]) cylinder(h = 32, d = 8);\n    }\n}\n\n// Blade assembly\nmodule blade() {\n    difference() {\n        translate([0, 0, 0]) {\n            cylinder(h = blade_height, d = blade_width);\n            translate([0, 0, -0.1]) cylinder(h = blade_height + 0.1, d = blade_width - 1);\n        }\n    }\n}\n\n// Steamer base with water tank\nmodule base() {\n    difference() {\n        translate([0, 0, 15]) {\n            cylinder(h = 5, d = 30);\n            translate([0, 0, -15]) cylinder(h = 5, d = 25);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Handle\n    handle();\n\n    // Spout\n    spout();\n\n    // Steaming spout\n    spout();\n\n    // Base\n    base();\n\n    // Blade assembly\n    blade();\n\n    // Water tank\n    translate([0, 0, -20]) rotate([0, 0, 45]) {\n        cylinder(h = 10, d = 12);\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "rotating pattern",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 22,
      "code": "// Realistic Wooden Chest - Medium Complexity\n// Overall dimensions: 80mm x 40mm x 35mm\n\n// Basic module for rectangular box with rounded edges\nmodule box_with_roundness(l, w, h, r) {\n    linear_extrude(height=r)\n        offset(-1)\n            square([l, w]);\n}\n\n// Main wooden chest body\ndifference() {\n    translate([0, 0, 0])\n        cube([80, 40, 35], center=true);\n    \n    // Hollow out interior for stuffing\n    translate([0, 0, 0])\n        box_with_roundness(80, 40, 35, 2);\n}\n\n// Front panel with drawer\ndifference() {\n    translate([0, 20, 10])\n        cube([30, 20, 5], center=true);\n    \n    // Drawer recess\n    translate([0, 10, 20])\n        cube([25, 15, 3], center=true);\n}\n\n// Back panel with decorative molding\ndifference() {\n    translate([0, -20, 10])\n        cube([30, 20, 5], center=true);\n    \n    // Moldings\n    for (x = [-20, 0, 20]) {\n        for (y = [-20, 0, 20]) {\n            if (x >= 0 && y >= 0) {\n                translate([x, y, 25])\n                    cube([3, 3, 2], center=true);\n            }\n        }\n    }\n}\n\n// Decorative handles on front panel\ntranslate([25, 20, 10])\n    rotate([0, 45, 0])\n    difference() {\n        cube([6, 3, 6], center=true);\n        translate([0, 0, 0])\n            cube([4, 2, 4], center=true);\n    }\n    \n    translate([25, -20, 10])\n    rotate([0, 45, 0])\n    difference() {\n        cube([6, 3, 6], center=true);\n        translate([0, 0, 0])\n            cube([4, 2, 4], center=true);\n    }\n    \n    translate([25, 20, 10])\n    rotate([0, 45, 0])\n    difference() {\n        cube([6, 3, 6], center=true);\n        translate([0, 0, 0])\n            cube([4, 2, 4], center=true);\n    }\n}\n\n// Decorative front panel with keyhole\ndifference() {\n    translate([0, 20, 10])\n        cube([30, 20, 5], center=true);\n    \n    // Keyhole cutout\n    translate([0, 15, 20])\n        cube([8, 8, 1], center=true);\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: ERROR: Parser error: syntax error in file evaluation/ThomasTheMaker_k-1b_20251029_161318/rotating_pattern.scad, line 71\nCan't parse file 'evaluation/ThomasTheMaker_k-1b_20251029_161318/rotating_patter",
      "vlm_response": null
    },
    {
      "object": "stacked spheres",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 71,
      "code": "// Realistic Medium-Complexity Stacked Sphere\n// All dimensions in mm, 3D-printable, no overhangs\n\n// Overall scale factor to reduce printing area\nscale_factor = 1;\n\n// Main sphere\nsphere_radius = 60;\nsphere_height = 40;\nwall_thickness = 2;\n\n// Base platform\nbase_diameter = 50;\nbase_height = 15;\n\n// Stacked layers with wall thickness\nwall_thickness = 2;\nstack_height = 40;\nlayer_thickness = 2;\n\n// Create the base\ndifference() {\n    cylinder(h=base_height, r=base_diameter/2, $fn=64);\n    translate([0,0, -1])\n        cylinder(h=base_height + 1, r=base_diameter/2 - 1.5, $fn=64);\n}\n\n// Add a raised platform to provide structural support\ndifference() {\n    cylinder(h=2, r=base_diameter + 1, $fn=64);\n    translate([0,0,2])\n        cylinder(h=1, r=base_diameter + 0.5, $fn=64);\n}\n\n// Generate the stacked sphere layers\nfor (i = [0:2:stack_height-1]) {\n    // Main sphere\n    translate([0,0,i])\n        sphere(r=sphere_radius, $fn=64);\n\n    // Create a small offset to mimic stacking effect\n    translate([0,0,i-wall_thickness/2])\n        sphere(r=sphere_radius - 2, $fn=64);\n}",
      "inference_error": null,
      "render_error": "Rendering timeout (>60s)",
      "vlm_response": null
    },
    {
      "object": "helical shape",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 87,
      "code": "// Helicon Filter \u2013 Realistic medium complexity\n// Designed for 3D printing, approximately 70mm diameter\n\n// Overall dimensions\nfilter_diameter = 70;\nfilter_height = 50;\nwall_thickness = 1.5;\n\n// Base plate\ndifference() {\n    cube([filter_diameter*2, filter_diameter*2, 1], center=true);\n    translate([0,0,-0.5]) cube([filter_diameter*2 - 2*wall_thickness, filter_diameter*2 - 2*wall_thickness, 2], center=true);\n}\n\n// Filter body\ndifference() {\n    cube([filter_diameter*2, filter_diameter*2, filter_height], center=true);\n    translate([0,0,0]) cube([filter_diameter*2 - 2*wall_thickness, filter_diameter*2 - 2*wall_thickness, filter_height - 2*wall_thickness], center=true);\n}\n\n// Inlet and outlet nozzles\nmodule nozzles() {\n    for (i = [0:45:315]) {\n        rotate([0,0,i])\n            translate([0,0,0])\n                scale([1,1,0.3])\n                    cylinder(h=2, d1=4, d2=0.5);\n    }\n}\n\n// Support ribs for 3D printing stability\nmodule ribs() {\n    // Top\n    difference() {\n        translate([0,0,filter_height/2-2])\n            cube([filter_diameter*2, filter_diameter*2, 2], center=true);\n        translate([0,0,filter_height/2-2])\n            cube([filter_diameter*2 - 2*wall_thickness, filter_diameter*2 - 2*wall_thickness, 2], center=true);\n    }\n    // Bottom\n    difference() {\n        translate([0,0,filter_height/2-2])\n            cube([filter_diameter*2, filter_diameter*2, 2], center=true);\n        translate([0,0,filter_height/2-2])\n            cube([filter_diameter*2 - 2*wall_thickness, filter_diameter*2 - 2*wall_thickness, 2], center=true);\n    }\n}\n\n// Decorative grill pattern\nmodule grill() {\n    difference() {\n        cube([filter_diameter*2, filter_diameter*2, 1], center=true);\n        for (i = [0:10:filter_diameter*2]) {\n            translate([i, 0, 0])\n                cube([1, 1, 0.1], center=true);\n        }\n    }\n}\n\n// Assembly\ndifference() {\n    union() {\n        // Main body\n        difference() {\n            ribs();\n            grill();\n        }\n        \n        // Nozzles\n        nozzles();\n        \n        // Outer shell for stability\n        difference() {\n            translate([0,0,filter_height*0.9])\n                rotate([0,0,30])\n                    ribs();\n        }\n        \n        // Inner hollow for printing\n        translate([0,0,0])\n            difference() {\n                difference() {\n                    rotate([0,0,30])\n                        ribs();\n                    translate([0,0,filter_height*0.9])\n                        grill();\n                }\n            }\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "scaled sphere",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 51,
      "code": "// Realistic-style 3D-Printable Kitchen Appliance - \"Electric Kettle\"\n// Medium complexity, 3D-printable, 50 mm tall\n\n// Main parameters\nwall_thickness = 2;  // Wall thickness for 3D printing\nbase_diameter = 40;   // Main base diameter\nbase_height = 8;      // Base height\nhandle_diameter = 12;\nhandle_height = 15;\nspout_diameter = 8;\nspout_height = 25;\nheating_element_diameter = 10;\nheating_element_height = 30;\nbase_thickness = 3;\n\n// Base module\nmodule base() {\n    difference() {\n        // Main base cylinder\n        cylinder(h=base_height, r=base_diameter/2, $fn=64);\n        // Bottom ring\n        translate([0,0,0])\n            cylinder(h=wall_thickness, r=base_diameter/2 - wall_thickness/2, $fn=64);\n    }\n}\n\n// Handle assembly\nmodule handle() {\n    difference() {\n        // Main handle shaft\n        cylinder(h=handle_height, r=base_diameter/2, $fn=32);\n        // Grip ring\n        translate([0,0,handle_height/2 - 1])\n            cylinder(h=1, r=base_diameter/2 - 2, $fn=32);\n        // End caps\n        translate([0,0,-handle_height/2])\n            cylinder(h=2, r=base_diameter/2, $fn=32);\n    }\n}\n\n// Spout assembly\nmodule spout() {\n    difference() {\n        // Main spout cylinder\n        cylinder(h=spout_height, r=spout_diameter/2, $fn=32);\n        // Neck\n        translate([0,0,spout_height/2 - 2])\n            cylinder(h=4, r=spout_diameter/2 - wall_thickness, $fn=32);\n        // Base\n        translate([0,0,spout_height/2 - 2])\n            cylinder(h=2, r=spout_diameter/2 - wall_thickness, $fn=32);\n    }\n}\n\n// Heating element housing\nmodule heating_element() {\n    difference() {\n        cylinder(h=heating_element_height, r=heating_element_diameter/2, $fn=32);\n        // Base\n        translate([0,0,heating_element_height/2 + wall_thickness/2])\n            cylinder(h=wall_thickness, r=heating_element_diameter/2 - wall_thickness/2, $fn=32);\n        // Air vents\n        for(i=[0:3]) {\n            translate([0,0,i*wall_thickness/4])\n                cylinder(h=wall_thickness/2 + 2, r=wall_thickness/2, $fn=32);\n        }\n    }\n}\n\n// Base assembly\nmodule base_assembly() {\n    union() {\n        // Main base\n        base();\n        // Spout attachment point\n        translate([0,0,0])\n            spout();\n    }\n}\n\n// Main assembly\nunion() {\n    // Base\n    base_assembly();\n    \n    // Handle\n    translate([0,0,base_height/2 - handle_height/2 - wall_thickness/2])\n        handle();\n    \n    // Heating element\n    translate([0,0,base_height - heating_element_height/2 - wall_thickness/2])\n        heating_element();\n    \n    // Spout\n    translate([0,0,base_height - spout_height/2 - wall_thickness/2])\n        spout();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "scaled cylinder",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 27,
      "code": "// OpenSCAD code for a realistic 3D-printable water bottle \u2013 medium complexity\n// Designed for 3D printing, 100 mm tall, ~80 mm diameter\n\n// Overall dimensions\nbottle_height = 100;\nbody_diameter = 80;\nneck_diameter = 40;\nwall_thickness = 2;\n\n// Wall thickness for 3D printing\nwall_thickness_ratio = 1;\n\n// Main bottle body \u2013 hollow cylinder with rounded bottom\nmodule bottle_body() {\n    difference() {\n        // Outer body\n        cylinder(h=body_diameter/2, r=body_diameter/2, center=true);\n        \n        // Hollow out the inside\n        translate([0,0,-0.1])\n            cylinder(h=body_diameter/2 - wall_thickness*2, r=body_diameter/2 - wall_thickness*2, center=true);\n        \n        // Top opening for neck\n        translate([0,0,body_diameter/2 + 0.1])\n            cylinder(h=body_diameter/2 - 2, r=body_diameter/2 - wall_thickness*2, center=true);\n    }\n}\n\n// Bottle neck (3D-printable connector \u2013 hollow)\nmodule bottle_neck() {\n    difference() {\n        // Neck cylinder\n        cylinder(h=neck_diameter/2, r=neck_diameter/2, center=true);\n        \n        // Hollow out the neck\n        translate([0,0,-0.1])\n            cylinder(h=neck_diameter/2 - wall_thickness, r=neck_diameter/2 - wall_thickness, center=true);\n    }\n}\n\n// Bottle cap\nmodule bottle_cap() {\n    difference() {\n        // Cap cylinder\n        cylinder(h=6, r=body_diameter/2, center=true);\n        \n        // Hollow out\n        translate([0,0,3])\n            cylinder(h=4, r=body_diameter/2 - wall_thickness, center=true);\n    }\n}\n\n// Liquid reservoir inside\nmodule liquid_reservoir() {\n    difference() {\n        cylinder(h=10, r=body_diameter/2 - 2, center=true);\n        \n        // Hollow it out\n        translate([0,0,3])\n            cylinder(h=10 - wall_thickness*2, r=body_diameter/2 - 2 - wall_thickness, center=true);\n    }\n}\n\n// Bottle label (printable with no supports)\nmodule bottle_label() {\n    difference() {\n        // Label base\n        cylinder(h=2, r=body_diameter/2 - 1, center=true);\n        \n        // Remove internal layer\n        translate([0,0,3])\n            cylinder(h=2, r=body_diameter/2 - 1.5, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main bottle body\n    color(\"lightblue\") bottle_body();\n    \n    // Add liquid reservoir\n    color(\"lightblue\") liquid_reservoir();\n    \n    // Bottle neck\n    color(\"lightblue\") bottle_neck();\n    \n    // Cap\n    color(\"lightblue\") bottle_cap();\n    \n    // Label\n    color(\"lightblue\") bottle_label();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "compressed pyramid",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 6,
      "code": "// Realistic Medium-Complexity 3D-Printable Model of a Piston\n// Overall size: ~80mm length, ~30mm height, ~15mm wall thickness\n\n$fa = 1; $fs = 0.5;\n\nmodule piston() {\n    difference() {\n        // Main cylinder body\n        cylinder(h = 15, d = 20, center = false);\n\n        // Cylinder bore (slightly smaller for printing)\n        cylinder(h = 20, d = 18, center = false);\n\n        // Top end taper\n        translate([0, 0, 20])\n            cylinder(h = 3, d1 = 16, d2 = 12, center = false);\n        translate([0, 0, -20])\n            cylinder(h = 3, d1 = 16, d2 = 12, center = false);\n    }\n\n    // Inlet collar\n    translate([0, 0, 20])\n        cylinder(h = 2, d = 18, center = false);\n\n    // Outlet collar\n    translate([0, 0, -20])\n        cylinder(h = 2, d = 18, center = false);\n}\n\npiston();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "stretched cube",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 36,
      "code": "// Realistic OpenSCAD Model of a Medium-Sized Laptop (approx. 120mm width)\n// Based on current laptop dimensions, designed for 3D printing\n\n// Overall dimensions\nlaptop_width = 120;\nlaptop_height = 60;\nlaptop_depth = 35;\n\n// Wall thickness for 2mm walls\nwall_thickness = 2;\n\n// Main chassis\nmodule chassis() {\n    difference() {\n        // Outer shell\n        cube([laptop_width, laptop_height, laptop_depth], center = true);\n        \n        // Cutout for screen cavity\n        translate([0, 0, wall_thickness])\n            cube([laptop_width - 2*wall_thickness, laptop_height - 2*wall_thickness, laptop_depth - 2*wall_thickness], center = true);\n    }\n}\n\n// Screen recess\nmodule screen() {\n    difference() {\n        cube([110, 60, 15], center = true);\n        translate([0, 0, 5])\n            cube([110, 60, 15], center = true);\n    }\n}\n\n// Keyboard\nmodule keyboard() {\n    difference() {\n        cube([30, 40, 4], center = true);\n        translate([0, 0, 0.5])\n            cube([30, 40, 4], center = true);\n    }\n}\n\n// Touchpad\nmodule touchpad() {\n    difference() {\n        cube([35, 35, 3], center = true);\n        translate([0, 0, 0.5])\n            cube([35, 35, 3], center = true);\n    }\n}\n\n// Power button\nmodule power_button() {\n    difference() {\n        cylinder(h = 2, d = 8, center = true);\n        translate([0, 0, -0.1])\n            cylinder(h = 1, d = 6, center = true);\n    }\n}\n\n// Webcam\nmodule webcam() {\n    difference() {\n        cube([12, 12, 3], center = true);\n        translate([0, 0, 0.5])\n            cube([12, 12, 3], center = true);\n    }\n}\n\n// Speaker grill\nmodule speaker_grill() {\n    difference() {\n        cube([30, 20, 3], center = true);\n        translate([0, 0, 0.5])\n            cube([30, 20, 3], center = true);\n    }\n}\n\n// USB ports (simplified for 3D printing)\nmodule ports() {\n    // USB-C port\n    translate([laptop_width/2 - 20, laptop_height/2 - 15, -10]) {\n        difference() {\n            cube([8, 6, 3], center = true);\n            translate([0, 0, 0])\n                cube([8, 6, 3], center = true);\n        }\n    }\n    // USB-A port\n    translate([laptop_width/2 - 20, laptop_height/2 - 15, -5]) {\n        difference() {\n            cube([6, 4, 2], center = true);\n            translate([0, 0, 0])\n                cube([6, 4, 2], center = true);\n        }\n    }\n}\n\n// RAM slots (simplified for 3D printing)\nmodule ram_slots() {\n    // RAM slots on left side\n    translate([0, 0, -20]) {\n        for(i = [0:1]) {\n            translate([i * 20, 0, -20 + i * 5]) {\n                cube([6, 4, 2], center = true);\n            }\n        }\n    }\n    // RAM slots on right side\n    translate([0, 0, 20]) {\n        for(i = [0:1]) {\n            translate([i * 20, 0, -20 + i * 5]) {\n                cube([6, 4, 2], center = true);\n            }\n        }\n    }\n}\n\n// Display bezel\nmodule display_bezel() {\n    difference() {\n        cube([100, 60, 10], center = true);\n        translate([0, 0, 5])\n            cube([100, 60, 10], center = true);\n    }\n}\n\n// Ventilation slots on back\nmodule vent_slots() {\n    // Top vent\n    translate([0, 0, 0]) {\n        difference() {\n            cube([laptop_width - 2, 60, 3], center = true);\n            translate([0, 0, 0.5])\n                cube([laptop_width - 2, 60, 3], center = true);\n        }\n    }\n    // Bottom vent\n    translate([0, 0, -20]) {\n        difference() {\n            cube([100, 60, 3], center = true);\n            translate([0, 0, 0.5])\n                cube([100, 60, 3], center = true);\n        }\n    }\n}\n\n// Brand logo\nmodule brand_logo() {\n    translate([0, 0, 0.1]) {\n        // Main logo\n        cube([10, 8, 1], center = true);\n        \n        // Brand text\n        translate([0, 0, 0.8]) {\n            cube([12, 6, 0.5], center = true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Main chassis\n    union() {\n        difference() {\n            translate([0, 0, 0]) {\n                color(\"darkslategray\") chassis();\n            }\n            translate([0, 0, 0.5]) {\n                color(\"black\") brand_logo();\n            }\n        }\n        \n        // Screen\n        color(\"white\") screen();\n        \n        // Keyboard\n        color(\"black\") keyboard();\n        \n        // Touchpad\n        color(\"darkgray\") touchpad();\n        \n        // Power button\n        color(\"darkgray\") power_button();\n        \n        // Webcams\n        color(\"darkgray\") webcam();\n        color(\"darkgray\") webcam();\n        \n        // Speaker grill\n        color(\"darkgray\") speaker_grill();\n        \n        // USB ports\n        color(\"darkgray\") ports();\n        color(\"darkgray\") ports();\n        \n        // RAM slots\n        color(\"darkgray\") ram_slots();\n        color(\"darkgray\") ram_slots();\n        \n        // Ventilation slots\n        color(\"darkgray\") vent_slots();\n        color(\"darkgray\") vent_slots();\n        \n        // Display bezel\n        color(\"darkgray\") display_bezel();\n        \n        // Brand logo\n        color(\"darkslategray\") brand_logo();\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "elongated shape",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 50,
      "code": "// Realistic 3D-printable model of a medium-sized medium-complexity (M) computer monitor (10\" screen)\n// Size: 100 mm tall, 75 mm wide, 20 mm deep\n\n// Overall dimensions\nscreen_height = 100;\nscreen_width = 75;\nscreen_depth = 20;\nwall_thickness = 2;\n\n// Main panel body\nmodule main_panel() {\n    difference() {\n        // Outer shell\n        cube([screen_width, screen_height, screen_depth], center=true);\n        \n        // Screen recess\n        translate([0, 0, 0])\n            cube([screen_width-10, screen_height-10, screen_depth-10], center=true);\n    }\n}\n\n// Screen bezel\nmodule screen_bezel() {\n    difference() {\n        // Frame\n        cube([screen_width*0.3, screen_height*0.3, screen_depth*0.5], center=true);\n        \n        // Screen area\n        translate([-screen_width*0.4, -screen_height*0.4, -screen_depth*0.6])\n            cube([screen_width*0.4, screen_height*0.4, screen_depth*0.6], center=true);\n        \n        // Corners\n        for (x = [-1, 1], y = [-1, 1]) {\n            for (z = [-1, 1]) {\n                translate([x*0.3, y*0.3, z*0.3])\n                    cube([0.4, 0.4, 0.4], center=true);\n            }\n        }\n    }\n}\n\n// LCD screen\nmodule lcd_screen() {\n    difference() {\n        cube([screen_width, screen_height*0.3, screen_depth*0.4], center=true);\n        \n        // LCD recess\n        translate([0, 0, 0])\n            cube([screen_width*0.5, screen_height*0.3, screen_depth*0.4], center=true);\n        \n        // Display area\n        translate([0, 0, 0])\n            cube([screen_width*0.6, screen_height*0.3, screen_depth*0.3], center=true);\n    }\n}\n\n// Ports\nmodule ports() {\n    // USB-C port (left)\n    translate([-screen_width/2 - 2, 0, 0])\n        cube([5, 3, 3], center=true);\n    \n    // Power LED\n    translate([0, 0, -screen_depth/2 - 0.5])\n        cylinder(h=0.5, r=1.5, center=true);\n}\n\n// Stand\nmodule stand() {\n    difference() {\n        // Base\n        cube([100, 20, 10], center=true);\n        \n        // Screen mount\n        translate([0, -10, -5])\n            cube([10, 10, 20], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    stand();\n    main_panel();\n    screen_bezel();\n    screen_bezel();\n    lcd_screen();\n    ports();\n    stand();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "bent cylinder",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 94,
      "code": "// OpenSCAD code for a simple rounded cylinder with 2mm radius and 8mm height\n// Overall height is 20 mm, making it roughly 30 mm long\n\n$fn = 36;          // Scale factor for rounding\n\ndifference() {\n    // Main rounded body\n    minkowski() {\n        cube([16, 8, 20], center = true);\n        sphere(r = 2);\n    }\n\n    // Bottom opening for sink\n    translate([0, 0, -1])\n        cylinder(r = 3, h = 20, center = false);\n\n    // Top opening for height\n    translate([0, 0, 20])\n        cylinder(r = 3, h = 18, center = false);\n\n    // Side hollow cutouts\n    for (x = [-4, 4]) {\n        for (y = [-5, 5]) {\n            translate([x, y, 0])\n                cylinder(r = 6, h = 20, center = false);\n        }\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "skewed shape",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 88,
      "code": "// Realistic 3D-printable wooden chair (medium complexity)\n// Overall height \u2248 110mm, width \u2248 60mm, depth \u2248 50mm\n\n// Parameters\nseat_height = 40;          // 40 mm seat height\nseat_width = 50;            // 50 mm seat width\nseat_depth = 60;             // 60 mm seat depth\nback_height = 45;            // 45 mm back height\nleg_height = 60;             // 60 mm leg height\narmrest_height = 60;         // 60 mm armrest height\nwall_thickness = 2;         // 2 mm wall thickness for printing\nwall_depth = 2;             // 2 mm wall thickness for printing\n\n// Main seat module\nmodule seat() {\n    difference() {\n        // Seat block\n        cube([seat_width, seat_depth, seat_height], center=true);\n        \n        // Rounded edges for comfort\n        translate([0, 0, -seat_height/2])\n            scale([1.2, 1.2, 0.8])\n                sphere(r=10);\n        translate([0, 0, -seat_height/2])\n            scale([1.2, 1.2, 0.8])\n                sphere(r=10);\n    }\n}\n\n// Backrest module\nmodule backrest() {\n    difference() {\n        // Back panel\n        cube([back_height, seat_width, 5], center=true);\n        \n        // Rounded top edge\n        translate([0, seat_width/2 - wall_depth/2, 5])\n            sphere(r=wall_depth/2);\n        \n        // Hollow back for printability\n        translate([0, seat_width/2 - wall_depth/2, 5])\n            cube([back_height - wall_depth*2, seat_width - wall_depth*2, 5], center=true);\n    }\n}\n\n// Leg module\nmodule leg() {\n    // Leg post\n    cube([leg_height, wall_thickness*2, leg_height*2], center=true);\n    \n    // Foot rest\n    translate([0, wall_thickness*2 + leg_height*2/2, -leg_height*2/2])\n        cube([wall_thickness*3, wall_thickness*3, leg_height*2/4], center=true);\n}\n\n// Armrest module\nmodule armrest() {\n    // Left armrest\n    translate([seat_width/2, 0, 0])\n        cube([armrest_height, seat_depth*2, leg_height*1.5], center=true);\n    \n    // Right armrest\n    translate([-seat_width/2, 0, 0])\n        cube([armrest_height, seat_depth*2, leg_height*1.5], center=true);\n}\n\n// Assembly\nunion() {\n    // Main assembly\n    union() {\n        seat();\n        backrest();\n        leg();\n        armrest();\n        // Rounded top edge for smooth printing\n        translate([0, 0, 0])\n            cylinder(h=4, r=wall_depth*2);\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "distorted cube",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 71,
      "code": "// Realistic 3D-printable toy car \u2013 medium-complexity\n// Designed for 3D printing without supports (approx 60mm length)\n\n$fn = 30;            // Medium smoothness for printing\nwall = 1.2;           // 0.4mm wall thickness for 3D printing\n\nmodule car() {\n    // Main chassis\n    difference() {\n        hull() {\n            translate([0, 0, 0]) cube([40, 20, 25], center = true);\n            translate([20, 0, 0]) cube([36, 24, 26], center = true);\n        }\n        \n        // Hood\n        translate([0, 0, 20]) cube([30, 20, 20], center = true);\n        \n        // Doors\n        translate([0, -15, 0]) cube([25, 25, 8], center = true);\n        translate([0, 15, 0]) cube([25, 25, 8], center = true);\n        \n        // Windows\n        translate([0, -15, 10]) cube([20, 20, 4], center = true);\n        translate([0, 15, 10]) cube([20, 20, 4], center = true);\n        \n        // Wheels\n        for (side = [1, -1]) {\n            translate([side * 18, 0, 0]) {\n                rotate([0, 15, 0]) cylinder(h = 8, r = 8);\n            }\n        }\n        \n        // Wheel hubs\n        for (side = [1, -1]) {\n            translate([side * 18, 0, 0]) {\n                difference() {\n                    cylinder(h = 10, r = 10);\n                    cylinder(h = 12, r = 8);\n                }\n            }\n        }\n    }\n    \n    // Side panels\n    difference() {\n        hull() {\n            translate([0, 0, 20]) cube([32, 22, 20], center = true);\n            translate([20, 0, 20]) cube([28, 20, 20], center = true);\n        }\n        \n        // Rear door\n        translate([0, -15, -15]) cube([22, 22, 6], center = true);\n        \n        // Back window\n        translate([0, 15, -15]) cube([22, 22, 4], center = true);\n        \n        // Cockpit\n        translate([0, 0, 0]) cube([28, 28, 40], center = true);\n    }\n    \n    // Roof\n    difference() {\n        hull() {\n            translate([0, 0, 30]) cube([40, 20, 10], center = true);\n            translate([20, 0, 30]) cube([36, 24, 10], center = true);\n        }\n        \n        // Hood\n        translate([0, 0, 35]) cube([36, 24, 12], center = true);\n        \n        // Windows\n        translate([20, 0, 35]) cube([24, 24, 6], center = true);\n        translate([20, 0, 35]) cube([24, 24, 6], center = true);\n        \n        // Rear window\n        translate([0, 15, 35]) cube([24, 24, 6], center = true);\n    }\n    \n    // Side mirrors\n    difference() {\n        translate([15, -15, -30]) cube([2, 2, 3], center = true);\n        translate([15, 15, -30]) cube([2, 2, 3], center = true);\n    }\n    \n    // Front mirror\n    difference() {\n        translate([0, 15, 30]) cube([2, 2, 3], center = true);\n        translate([0, 15, 30]) cube([2, 2, 3], center = true);\n    }\n    \n    // Exhaust pipes\n    for (side = [1, -1]) {\n        translate([side * 20, 0, 0]) {\n            difference() {\n                cylinder(h = 2, r = 4);\n                cylinder(h = 3, r = 2);\n            }\n        }\n    }\n    \n    // Front headlights\n    for (side = [1, -1]) {\n        translate([side * 20, 0, 12]) {\n            sphere(r = 4);\n        }\n    }\n    \n    // Back headlights\n    for (side = [1, -1]) {\n        translate([side * 20, 0, -12]) {\n            sphere(r = 4);\n        }\n    }\n    \n    // Wheels\n    for (side = [1, -1]) {\n        for (wheel_index = [0:3]) {\n            difference() {\n                cylinder(h = 6, r = 8);\n                cylinder(h = 7, r = 6);\n            }\n        }\n    }\n    \n    // Exhaust outlets\n    for (side = [1, -1]) {\n        translate([side * 30, 0, 50]) {\n            cylinder(h = 2, r = 4);\n        }\n    }\n}\n\n// Render the car\ncar();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "twisted torus",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 63,
      "code": "// Realistic medium-complexity 3D-printable model of a medium-sized mechanical tool\n// Overall dimensions: 80 mm long \u00d7 40 mm wide \u00d7 30 mm high\n// Designed for FDM printing (no steep overhangs, 2 mm wall thickness)\n\n// Wall thickness for 2 mm nozzle clearance\nwall = 2;\n// Base mounting hole\nbase_d = 8;\nbase_h = 6;\nhole_d = 1.5;\nhole_z = base_h + 0.5;\n\n// Main assembly\nunion() {\n    // Base platform\n    difference() {\n        cube([80, 40, 30], center = true);\n        translate([0, 0, -2])\n            cube([76, 36, 28], center = true);\n    }\n\n    // Main body\n    difference() {\n        translate([0, 0, -base_h/2])\n            cube([76, 36, 30], center = true);\n\n        // Main shaft\n        translate([0, 0, 10])\n            cube([38, 28, 20], center = true);\n\n        // Handle\n        translate([0, 0, -base_h - 2])\n            cylinder(h = 15, d = 12, center = false);\n    }\n\n    // Grip pattern\n    for (x = [-35, -25, -15, 0, 0, 15, 25, 35]) {\n        for (y = [-15, -7.5, -2.5, 0, 2.5, 5.5, 7.5, 10]) {\n            translate([x, y, 0])\n                cylinder(h = 2, d = 8, center = false);\n        }\n    }\n\n    // Mounting holes\n    for (x = [-30, -15, -5, 5, 15, 30]) {\n        for (y = [-15, -7.5, -2.5, 0, 2.5, 5.5, 7.5, 10]) {\n            translate([x, y, base_h + hole_z])\n                cylinder(h = 2, d = hole_d, center = true);\n        }\n    }\n\n    // End caps\n    difference() {\n        translate([0, 0, base_h + hole_z + 20])\n            cube([20, 20, 5], center = true);\n        translate([0, 0, base_h + hole_z - 20])\n            cube([20, 20, 5], center = true);\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "glowing sphere",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 88,
      "code": "// Realistic medium-complexity 3D-printable model of a wooden chair\n// Overall height: ~100 mm, width: ~80 mm, length: ~70 mm\n\n// Wall thickness for 2 mm walls\n$fn = 32;\n\nmodule chair_assembly() {\n    // Seat base\n    difference() {\n        // Main seat block\n        cube([50, 40, 20], center = true);\n        \n        // Rounded front edge\n        translate([0, 0, 2])\n            scale([1.2, 1, 0.8])\n                sphere(r = 12);\n    }\n    \n    // Seat\n    translate([0, 0, 0])\n        cube([50, 40, 20], center = true);\n    \n    // Backrest\n    translate([0, 0, 50])\n        cube([40, 30, 20], center = true);\n    \n    // Legs\n    for (x = [-20, 20])\n        for (y = [-15, 15])\n            translate([x, y, -25])\n                cylinder(h = 15, r = 5, center = false);\n    \n    // Front legs\n    translate([-20, 0, -20])\n        cylinder(h = 18, r = 5, center = true);\n    translate([20, 0, -20])\n        cylinder(h = 18, r = 5, center = true);\n    \n    // Back legs\n    translate([-20, 0, 50])\n        cylinder(h = 18, r = 5, center = true);\n    translate([20, 0, 50])\n        cylinder(h = 18, r = 5, center = true);\n    \n    // Armrest\n    translate([0, -15, 45])\n        cube([30, 2, 20], center = true);\n    \n    // Backrest armrest\n    translate([0, 12, 55])\n        cube([20, 2, 15], center = true);\n    \n    // Front armrest\n    translate([0, 0, 45])\n        cube([20, 2, 15], center = true);\n    \n    // Dowel pins\n    for (x = [-20, 20])\n        for (y = [-15, 15])\n            translate([x, y, -25])\n                cylinder(h = 3, r = 1, center = false);\n    \n    // Hardware details\n    translate([0, -10, 0])\n        cylinder(h = 2, r = 2, center = true);\n    translate([0, 10, 0])\n        cylinder(h = 2, r = 2, center = true);\n}\n\n// Render the chair\nchair_assembly();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "light source",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 99,
      "code": "// Realistic Wooden Chair - Medium Complexity\n// Designed for 3D printing with 2 mm walls and no steep overhangs\n\n// Chair parameters\nchair_height = 100;\nseat_width = 60;\nseat_depth = 50;\nseat_thickness = 2;\nback_height = 80;\nleg_height = 40;\nback_thickness = 4;\narm_height = 30;\narm_width = 15;\nleg_radius = 3;\n\n// Main wooden seat\nmodule seat() {\n    difference() {\n        // Seat panel\n        cube([seat_width, seat_depth, seat_thickness], center=true);\n        \n        // Chamfer top edge\n        translate([0, 0, seat_thickness/2 + 0.1])\n            cube([seat_width - 1, seat_depth - 1, 0.2], center=true);\n        \n        // Drainage hole in back\n        translate([seat_width/2 - 10, seat_depth/2 - 10, 2])\n            cylinder(h=2, r=3, center=true);\n    }\n}\n\n// Wooden frame with joints\nmodule frame() {\n    // Front legs\n    translate([0, 0, -leg_height/2])\n        cube([leg_radius * 2, leg_radius * 2, leg_height], center=true);\n    translate([0, 0, -leg_height/2])\n        cube([leg_radius * 2, leg_radius * 2, leg_height], center=true);\n    \n    // Back legs\n    translate([0, 0, -back_height/2])\n        cube([leg_radius * 2, leg_radius * 2, leg_height], center=true);\n    translate([0, 0, -back_height/2])\n        cube([leg_radius * 2, leg_radius * 2, leg_height], center=true);\n    \n    // Seat assembly\n    translate([0, 0, 0])\n        seat();\n}\n\n// Chair legs\nmodule legs() {\n    // Front left leg\n    translate([-seat_width/2, -seat_depth/2, -leg_height/2 - leg_height/2])\n        cylinder(h=leg_height, r=leg_radius);\n    \n    // Front right leg\n    translate([-seat_width/2, seat_depth/2, -leg_height/2 - leg_height/2])\n        cylinder(h=leg_height, r=leg_radius);\n    \n    // Back left leg\n    translate([seat_width/2, -seat_depth/2, -back_height/2 - leg_height/2])\n        cylinder(h=leg_height, r=leg_radius);\n    \n    // Back right leg\n    translate([seat_width/2, seat_depth/2, -back_height/2 - leg_height/2])\n        cylinder(h=leg_height, r=leg_radius);\n}\n\n// Chair backrest with joints\nmodule backrest() {\n    difference() {\n        // Main backrest block\n        translate([0, 0, -back_height/2 - 5])\n            cube([seat_width + 10, seat_depth + 10, 10], center=true);\n        \n        // Joint cutouts for 45-degree angle\n        translate([0, 0, -back_height/2 - 5])\n            cube([seat_width + 4, seat_depth + 4, 10], center=true);\n        translate([0, 0, -back_height/2 - 5])\n            cube([seat_width + 4, seat_depth + 4, 10], center=true);\n    }\n}\n\n// Chair support arm\nmodule arm() {\n    difference() {\n        // Arm base\n        translate([0, 0, -back_height/2 - back_thickness/2 - 5])\n            cube([arm_width, arm_width, back_thickness], center=true);\n        \n        // Joint cutouts\n        translate([0, 0, -back_height/2 - back_thickness/2 - 5])\n            cube([arm_width * 0.8, arm_width * 0.8, back_thickness * 0.8], center=true);\n    }\n}\n\n// Assemble the chair\n// Seat\nseat();\n// Frame\nframe();\n// Legs\ntranslate([0, 0, leg_height/2 - 5])\n    legs();\n// Backrest\ntranslate([0, 0, back_height/2 - 5])\n    backrest();\n// Chair support arm\ntranslate([0, 0, 0])\n    arm();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "shadow maker",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 15,
      "code": "// ShadowMaker - Realistic style, medium complexity\n\n// Overall dimensions\nbody_length = 60;\nbody_width = 40;\nbody_height = 25;\nwall_thickness = 2;\n\n// Main body module\nmodule shadow_maker_body() {\n    difference() {\n        // Main body\n        cube([body_length, body_width, body_height], center=true);\n        \n        // Hollow out interior\n        translate([0, 0, -wall_thickness/2])\n            cube([body_length-wall_thickness*2, body_width-wall_thickness*2, body_height-wall_thickness*2], center=true);\n        \n        // Hollow out top\n        translate([0, 0, body_height/2-wall_thickness/2])\n            cube([body_length*0.7, body_width*0.7, body_height*0.7], center=true);\n        \n        // Front ventilation slots\n        for(i = [0:3]) {\n            translate([-body_length/2-5, 0, i*body_height/3])\n                cube([8, body_width/2, 2]);\n        }\n        \n        // Rear exhaust vents\n        for(i = [0:3]) {\n            translate([body_length/2+5, 0, i*body_height/3])\n                cube([8, body_width/2, 2]);\n        }\n    }\n}\n\n// Handle module\nmodule shadow_maker_handle() {\n    difference() {\n        // Handle grip\n        translate([body_length-10, 0, body_height*0.6])\n            cube([15, body_width-4, 10], center=true);\n        \n        // Handle grip holes\n        for(i = [0:3]) {\n            translate([body_length-10, 0, body_height*0.6-5])\n                cube([10, body_width-4, 2], center=true);\n        }\n    }\n}\n\n// Feet module\nmodule shadow_maker_feet() {\n    // Front left foot\n    translate([-body_length/2-5, body_width/2-3, -body_height*0.4])\n        cylinder(h=4, d=5);\n    \n    // Front right foot\n    translate([-body_length/2+5, body_width/2-3, -body_height*0.4])\n        cylinder(h=4, d=5);\n    \n    // Rear left foot\n    translate([body_length/2+5, body_width/2-3, -body_height*0.4])\n        cylinder(h=4, d=5);\n    \n    // Rear right foot\n    translate([body_length/2+5, body_width/2-3, -body_height*0.4])\n        cylinder(h=4, d=5);\n}\n\n// Top plate\nmodule shadow_maker_plate() {\n    difference() {\n        // Main plate\n        cube([body_length*0.8, body_width*0.8, 2], center=true);\n        \n        // Ventilation slots on plate\n        for(i = [0:3]) {\n            translate([body_length*0.7, body_width*0.7, i*2])\n                cube([8, 8, 1], center=true);\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    shadow_maker_body();\n    \n    // Handle\n    shadow_maker_handle();\n    \n    // Feet\n    shadow_maker_feet();\n    \n    // Plate\n    shadow_maker_plate();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "warped sphere",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 60,
      "code": "// Realistic 3D-printable warp ball\n// Medium complexity, 50mm diameter, 2mm wall thickness\n\n$fn = 32;          // Smooth curves for realistic look\nwall = 2;          // Wall thickness for 3D printing\n\nmodule warp_ball() {\n    // Main body - sphere with slight taper\n    difference() {\n        sphere(d = 50);\n        translate([0, 0, 2]) sphere(d = 45);\n    }\n\n    // Central hole for viewing\n    translate([0, 0, -1]) cylinder(d = 12, h = 4, center = true);\n\n    // Top ridge detail\n    difference() {\n        sphere(d = 45);\n        translate([0, 0, 45]) sphere(d = 40);\n    }\n\n    // Bottom ridge detail\n    difference() {\n        sphere(d = 40);\n        translate([0, 0, -40]) sphere(d = 38);\n    }\n\n    // Subtle surface imperfections\n    for (x = [-15:5:15]) {\n        for (y = [-8:4:8]) {\n            translate([x, y, 0]) cube([wall*2, wall*2, wall*2*2]);\n        }\n    }\n\n    // Tiny surface markings\n    for (x = [-15:5:15]) {\n        for (y = [-8:4:8]) {\n            translate([x, y, 0]) cube([wall*3, wall*3, wall*2*3]);\n        }\n    }\n\n    // Top ridge details\n    for (i = [0:3]) {\n        for (j = [0:3]) {\n            translate([0, 0, 4 + i*2 + j*2]) rotate([0, 0, 0]) difference() {\n                sphere(d = 44);\n                translate([0, 0, 4 + i*2]) sphere(d = 42);\n            }\n        }\n    }\n\n    // Bottom ridge details\n    for (i = [0:3]) {\n        for (j = [0:3]) {\n            translate([0, 0, -4 + i*2 + j*2]) rotate([0, 0, 0]) difference() {\n                sphere(d = 42);\n                translate([0, 0, -4 + i*2 + j*2]) sphere(d = 40);\n            }\n        }\n    }\n\n    // Small texture details on top\n    for (x = [-15:5:15]) {\n        for (y = [-8:4:8]) {\n            translate([x, y, 45]) sphere(d = 1.5);\n        }\n    }\n}\n\n// Render the warp ball\nwarp_ball();",
      "inference_error": null,
      "render_error": "Rendering timeout (>60s)",
      "vlm_response": null
    },
    {
      "object": "transparent shape",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 94,
      "code": "// Realistic 3D-printable Tesseract (tesseract)\n// Medium complexity with proper wall thickness\n\n// Overall scale factor for printing\nscale_factor = 1.0;\n\n// Main wall thickness for 3D printing\nwall_thickness = 1.2;\n\n// Base sphere\nsphere_radius = 15;\nsphere_height = 25;\nbase_height = 3;\n\n// Central hub\nhub_radius = 12;\nhub_height = 8;\n\n// Tesseract face\nface_radius = 12;\nface_height = 18;\nface_offset = 8;\n\n// Create the sphere\nmodule sphere() {\n    difference() {\n        sphere(r=sphere_radius, $fn=64);\n        translate([0, 0, -face_offset]) sphere(r=sphere_radius - 2*wall_thickness, $fn=64);\n    }\n}\n\n// Create the cube with rounded edges\nmodule cube() {\n    difference() {\n        // Main cube body\n        cube([sphere_radius * 2, sphere_radius * 2, face_height], center=true);\n        // Rounded edges\n        for (x = [-sphere_radius * 2/2, sphere_radius * 2/2]) {\n            for (y = [-sphere_radius * 2/2, sphere_radius * 2/2]) {\n                translate([x, y, -0.1]) cube([sphere_radius * 1.5, sphere_radius * 1.5, 1.5], center=true);\n            }\n        }\n    }\n}\n\n// Create the face\nmodule face() {\n    difference() {\n        // Main face\n        translate([0, 0, sphere_height/2]) sphere(r=sphere_radius - 2*wall_thickness, $fn=64);\n        // Cutout for face\n        translate([0, 0, -sphere_height/2 + face_height/2]) sphere(r=sphere_radius - 2*wall_thickness, $fn=64);\n    }\n}\n\n// Create the central hub\nmodule hub() {\n    difference() {\n        cylinder(h=hub_height, r=hub_radius, $fn=32);\n        cylinder(h=hub_height, r=hub_radius - 1.5, $fn=32);\n    }\n}\n\n// Create the top face\nmodule top_face() {\n    difference() {\n        translate([0, 0, sphere_height/2 + face_height/2]) sphere(r=sphere_radius - 2*wall_thickness, $fn=64);\n        translate([0, 0, sphere_height/2 + face_height/2 + 1.5]) sphere(r=sphere_radius - 2*wall_thickness, $fn=64);\n    }\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: Geometries in cache: 1\nGeometry cache size in bytes: 0\nCGAL Polyhedrons in cache: 0\nCGAL cache size in bytes: 0\nTotal rendering time: 0:00:00.000\nCurrent top level object is empty.\n",
      "vlm_response": null
    },
    {
      "object": "reflection",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 74,
      "code": "// Realistic 3D-Printable Bench (Medium Complexity)\n// Designed for 3D-printing with no overhangs >45\u00b0\n\n// Overall dimensions\nbench_width = 120;\nbench_depth = 80;\nbench_height = 80;\n\n// Seat thickness\nseat_thickness = 4;\n\n// Leg thickness\nleg_thickness = 3;\n\n// Rail thickness\nrail_thickness = 2;\n\n// Hole diameter for screws\nhole_diameter = 20;\n\n// Screw hole diameter\nscrew_hole_diameter = 6;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Bench frame details\n\nmodule frame_base() {\n    // Main rectangular frame\n    difference() {\n        cube([bench_width, bench_depth, bench_height], center=true);\n        // Inner cavity for frame structure\n        cube([bench_width - 2*wall_thickness, bench_depth - 2*wall_thickness, bench_height - wall_thickness - seat_thickness], center=true);\n    }\n    \n    // Cross supports\n    translate([0, 0, bench_height/2 - seat_thickness/2]) {\n        cube([wall_thickness, wall_thickness, bench_height/2], center=true);\n    }\n    translate([bench_width - wall_thickness, 0, bench_height/2 - seat_thickness/2]) {\n        cube([wall_thickness, wall_thickness, bench_height/2], center=true);\n    }\n}\n\nmodule legs() {\n    // Four legs with rounded tops\n    for (x = [-20, 20]) {\n        for (y = [-20, 20]) {\n            translate([x, y, 0]) {\n                // Leg base\n                cylinder(h=leg_thickness, r1=leg_thickness/2, r2=leg_thickness/2, $fn=20);\n                // Leg post\n                translate([0, 0, leg_thickness/2]) {\n                    cylinder(h=leg_thickness*2, r1=leg_thickness/2, r2=leg_thickness/2, $fn=20);\n                }\n            }\n        }\n    }\n}\n\nmodule stretcher() {\n    // Single stretcher between legs\n    difference() {\n        cube([wall_thickness, bench_depth, bench_height], center=true);\n        translate([0, wall_thickness/2, wall_thickness/2]) {\n            cube([wall_thickness, bench_depth - wall_thickness, bench_height - wall_thickness - seat_thickness], center=true);\n        }\n    }\n}\n\nmodule backrest() {\n    // Simple backrest frame\n    difference() {\n        cube([bench_width, wall_thickness, bench_height], center=true);\n        translate([0, 0, bench_height/2 - wall_thickness/2]) {\n            cube([bench_width - 2*wall_thickness, wall_thickness, bench_height - wall_thickness - seat_thickness], center=true);\n        }\n    }\n    \n    // Backrest support bars\n    translate([0, bench_depth/2 - wall_thickness/2, bench_height/2]) {\n        cube([bench_width, wall_thickness, wall_thickness], center=true);\n    }\n    translate([0, -bench_depth/2 + wall_thickness/2, bench_height/2]) {\n        cube([bench_width, wall_thickness, wall_thickness], center=true);\n    }\n    \n    // Backrest slats\n    for (x = [-bench_width/4, 0, bench_width/4]) {\n        for (y = [-bench_depth/4, 0, bench_depth/4]) {\n            translate([x, y, bench_height/2 - seat_thickness/2]) {\n                cube([wall_thickness, wall_thickness, seat_thickness], center=true);\n            }\n        }\n    }\n}\n\nmodule front_support() {\n    // Front support bar\n    difference() {\n        cube([bench_width, wall_thickness, wall_thickness], center=true);\n        translate([0, wall_thickness/2, wall_thickness/2]) {\n            cube([bench_width - 2*wall_thickness, wall_thickness, wall_thickness], center=true);\n        }\n    }\n}\n\n// Main assembly\nunion() {\n    // Frame\n    frame_base();\n    \n    // Legs\n    translate([bench_width/2 - leg_thickness/2, 0, bench_height/2 - leg_thickness/2]) {\n        legs();\n    }\n    \n    // Backrest\n    backrest();\n    \n    // Front support\n    translate([0, 0, bench_height - leg_thickness/2 - seat_thickness/2]) {\n        front_support();\n    }\n    \n    // Cross supports\n    translate([bench_width/2 - wall_thickness, 0, bench_height/2 - seat_thickness/2 - wall_thickness/2]) {\n        // Left cross\n        cylinder(h=wall_thickness, r=leg_thickness/2, $fn=20);\n        // Right cross\n        cylinder(h=wall_thickness, r=leg_thickness/2, $fn=20);\n    }\n}\n\n// Screw holes\ntranslate([bench_width/2 - 10, bench_depth/4 - wall_thickness/2, bench_height/2 - seat_thickness/2 - leg_thickness/2]) {\n    rotate([0, 90, 0]) {\n        for (i = [0:2]) {\n            translate([i * 15, 0, -screw_hole_diameter/2]) {\n                cube([screw_hole_diameter/2, screw_hole_diameter/2, screw_hole_diameter/2], center=true);\n            }\n        }\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "square tessellation",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 98,
      "code": "// Realistic Medium-Complexity Realistic OpenSCAD Model\n// A medium-complexity 3D-printable model of a traditional European wooden table (Stool)\n\n$fn = 32;  // Smooth curves for realistic appearance\n\n// Overall dimensions\ntable_length = 120;\ntable_width = 70;\ntable_height = 10;\nseat_height = 4;\nleg_height = 18;\nleg_thickness = 3;\nbackrest_thickness = 2;\narmrest_length = 80;\n\n// Wall thickness for 3D printing\nwall_thickness = 1;\n\nmodule table() {\n    // Main wooden seat\n    difference() {\n        cube([table_length, table_width, seat_height], center=true);\n        translate([0, 0, -wall_thickness/2])\n            cube([table_length - wall_thickness*2, table_width - wall_thickness*2, seat_height + wall_thickness*2], center=true);\n    }\n\n    // Leg structure\n    for (x = [-table_length/2 + 15, table_length/2 - 15]) {\n        for (y = [-table_width/2 + 15, table_width/2 - 15]) {\n            // Front leg\n            translate([x, y, -leg_height/2])\n                cube([leg_thickness, leg_thickness, leg_height]);\n            // Back leg\n            translate([x, y, -leg_height/2])\n                cube([leg_thickness, leg_thickness, leg_height]);\n            // Decorative toe cap\n            translate([x, y, -leg_height/2 + 1])\n                cylinder(h=1.5, r1=3, r2=3);\n        }\n    }\n\n    // Table top with subtle grain texture\n    difference() {\n        cube([table_length, table_width, table_height], center=true);\n        for (x = [-table_length/2 + 5, table_length/2 - 5]) {\n            for (y = [-table_width/2 + 5, table_width/2 - 5]) {\n                translate([x, y, table_height/2 + 0.1])\n                    cube([table_length - 2*wall_thickness, table_width - 2*wall_thickness, 0.5], center=true);\n            }\n        }\n    }\n\n    // Table legs\n    for (x = [-table_length/2 + 15, table_length/2 - 15]) {\n        for (y = [-table_width/2 + 15, table_width/2 - 15]) {\n            // Front leg\n            translate([x, y, -leg_height/2])\n                cube([leg_thickness, leg_thickness, leg_height]);\n            // Back leg\n            translate([x, y, -leg_height/2])\n                cube([leg_thickness, leg_thickness, leg_height]);\n            // Decorative joint detail\n            translate([x, y, -leg_height/2 + 1.5])\n                cylinder(h=2, r1=3, r2=3);\n        }\n    }\n\n    // Backrest\n    translate([0, -table_width/2 + 5, leg_height/2 + table_height/2 + 15]) {\n        difference() {\n            cube([leg_thickness, leg_thickness, leg_height/2], center=true);\n            translate([0, 0, -leg_height/2 + 5])\n                cube([leg_thickness, leg_thickness, leg_height/2 - 1], center=true);\n        }\n    }\n\n    // Armrest\n    translate([-table_length/2 - 15, table_width/2 - 5, 0]) {\n        difference() {\n            cube([15, 15, 40], center=true);\n            translate([0, 0, -15])\n                cube([15, 15, 40 - 2*wall_thickness]);\n        }\n    }\n\n    // Top rail\n    translate([0, 0, 10]) {\n        cube([table_length - 2*leg_thickness - 2, table_width - 2*leg_thickness - 2, 2], center=true);\n    }\n}\n\n// Assembly\ntable();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "hexagonal tessellation",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 89,
      "code": "// Hexagonal prism with rounded edges (rounded-cube)\n// All sides are equal, creating a prism with no sharp corners\n\n// Parameters\nbase_width = 40;\nbase_height = 40;\nbase_depth = 40;\nwall_thickness = 2;\nradius = 15;\nheight = 40;\n\n// Helper functions\nmodule rounded_cube(size, radius, height) {\n    difference() {\n        hull() {\n            translate([0, 0, height/2]) cube([size, size, height], center = true);\n            translate([radius, radius, height/2]) sphere(r = radius);\n        }\n        difference() {\n            translate([0, 0, height/2]) cube([size - 2*radius, size - 2*radius, height - 2*radius], center = true);\n            translate([radius, radius, height/2]) sphere(r = radius);\n        }\n    }\n}\n\n// Main prism body\ndifference() {\n    rounded_cube([base_width, base_height, base_depth], radius, height);\n}\n\n// Bottom face\ndifference() {\n    rounded_cube([base_width, base_height, base_depth], radius, height);\n}\n\n// Top face\ndifference() {\n    rounded_cube([base_width, base_height, base_depth], radius, height);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "triangular tessellation",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 68,
      "code": "// Realistic 3D-Printable Kitchen Appliance - Microwave Oven\n// Overall dimensions: 120mm wide x 80mm deep x 120mm tall\n\n$fn = 32;\n\n// Main body dimensions\nbody_length = 120;\nbody_width = 80;\nbody_height = 120;\n\n// Control panel dimensions\npanel_width = 30;\npanel_height = 20;\npanel_thickness = 4;\n\n// Control panel buttons\nbutton_spacing = 3;\nbutton_height = 6;\n\n// Control panel display\ndisplay_width = 25;\ndisplay_height = 15;\ndisplay_thickness = 3;\n\n// Grill grate dimensions\ngrill_width = 70;\ngrill_height = 40;\ngrill_thickness = 3;\n\n// Door handle dimensions\nhandle_length = 20;\nhandle_width = 15;\nhandle_height = 10;\n\n// Vent mount dimensions\nvent_width = 25;\nvent_height = 35;\nvent_thickness = 4;\n\n// Main body with rounded edges\ndifference() {\n    // Main body shell\n    hull() {\n        cube([body_length, body_width, body_height], center = true);\n        translate([0, 0, body_height/2 - 1]) sphere(r = 4);\n    }\n    \n    // Ventilation slots\n    for (i = [0:3]) {\n        translate([body_length - 5*i, 0, body_height - 10]) {\n            rotate([0, 90, 0]) {\n                cube([5, body_width - 2*i, 4], center = true);\n            }\n        }\n    }\n    \n    // Door slot\n    translate([body_length/2 - 15, 0, body_height/2 - 10]) {\n        cube([door_width, door_height, door_thickness], center = true);\n    }\n    \n    // Control panel cutout\n    translate([body_length/2 - 10, body_width/2 - 10, body_height/2 - 10]) {\n        cube([display_width, display_height, display_thickness], center = true);\n    }\n    \n    // Control panel buttons\n    for (i = [0:4]) {\n        translate([body_length/2 - 10 + i*button_spacing, body_width/2 - 10 + i*button_spacing, body_height/2 - 10 + i*button_height]) {\n            button();\n        }\n    }\n    \n    // Control panel display\n    translate([body_length/2 - 10, body_width/2 - 10, body_height/2 - 10 + display_thickness/2]) {\n        cube([display_width, display_height, display_thickness], center = true);\n    }\n    \n    // Control panel buttons\n    translate([body_length/2 - 10, body_width/2 - 10, body_height/2 - 10 + display_thickness/2 + button_height/2]) {\n        button();\n    }\n}\n\n// Button with rounded edges\nmodule button() {\n    difference() {\n        cylinder(h = 1.5, r = 3, center = false);\n        translate([0, 0, 0.1]) sphere(r = 2.5);\n    }\n    \n    // Button color\n    color(\"darkblue\") {\n        translate([0, 0, 1.5]) {\n            difference() {\n                cylinder(h = 1.5, r = 3, center = false);\n                translate([0, 0, 0.1]) sphere(r = 2.5);\n            }\n        }\n    }\n}\n\n// Grill grate\ndifference() {\n    cube([grill_width, grill_height, grill_thickness], center = true);\n}\n\n// Vent mount\ndifference() {\n    cylinder(h = vent_thickness, r = vent_width/2, center = true);\n}\n\n// Door handle\ndifference() {\n    cylinder(h = handle_length, r = handle_width/2, center = false);\n    translate([handle_length, 0, 0]) {\n        sphere(r = handle_width/2);\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "complex tessellation",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 60,
      "code": "// Realistic Medium-Complexity 3D-Print Model - \"Forest Floor\"\n// Scale: 1:100, ~80 mm wide, ~50 mm deep, ~40 mm tall\n\n// Main body of the model\nmodule body() {\n    difference() {\n        // Main trunk\n        cube([35, 20, 20], center=true);\n        \n        // Root cavity\n        translate([0, 0, -1])\n            cube([35, 20, 20], center=true);\n    }\n}\n\n// Leaves - realistic texture with slight randomness\nmodule leaves() {\n    // Central leaf\n    translate([0, 0, 0])\n        scale([0.2, 0.2, 0.15])\n            sphere(15);\n    \n    // Side leaves\n    for (y = [-12, 0, 12]) {\n        translate([0, y, 0])\n            rotate([0, 0, -15])\n            scale([0.3, 0.3, 0.2])\n            sphere(10);\n    }\n}\n\n// Bark texture\nmodule bark() {\n    // Main bark layers\n    difference() {\n        // Outer bark\n        cube([35, 20, 25], center=true);\n        \n        // Inner bark cavity\n        translate([0, 0, -1])\n            cube([35, 20, 25], center=true);\n    }\n}\n\n// Branches and twigs\nmodule branches() {\n    // Central branch\n    translate([0, 0, 0])\n        cylinder(h=25, r=10, center=true);\n    \n    // Left branch\n    translate([0, -10, 0])\n        cylinder(h=30, r=8, center=true);\n    \n    // Right branch\n    translate([0, 10, 0])\n        cylinder(h=30, r=8, center=true);\n}\n\n// Small flowers\nmodule flowers() {\n    // Single white flower\n    translate([0, 20, 20])\n        scale([0.15, 0.15, 0.1])\n            sphere(6);\n    \n    // Small blue flower\n    translate([0, 25, 15])\n        scale([0.1, 0.1, 0.1])\n            sphere(3);\n    \n    // Small yellow flower\n    translate([0, 18, 20])\n        scale([0.08, 0.08, 0.08])\n            sphere(4);\n}\n\n// Root system\nmodule roots() {\n    // Main roots\n    for (z = [-12, -6, 0, 6, 12]) {\n        translate([0, 0, z])\n            cylinder(h=5, r=5, center=true);\n    }\n}\n\n// Ground texture\nmodule ground() {\n    difference() {\n        cube([38, 28, 4], center=true);\n        cube([37, 27, 3], center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main body\n    body();\n    \n    // Leaves\n    leaves();\n    \n    // Branches and bark\n    translate([0, 0, 0])\n        rotate([0, 0, 0])\n        branches();\n    \n    // Roots\n    roots();\n    \n    // Flowers\n    flowers();\n    \n    // Ground\n    translate([0, 0, 0])\n        ground();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "bordered cube",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 58,
      "code": "// Realistic 3D-printable model of a medium-sized wooden chair\n// Overall height \u2248 85 mm, width \u2248 50 mm, depth \u2248 45 mm\n\nmodule chair_seat() {\n    difference() {\n        // Main seat cushion\n        cube([40, 35, 10], center=true);\n        \n        // Rounded front edge\n        translate([0, 0, 2])\n            scale([1.2, 1.2, 1.2])\n                sphere(r=8, center=true);\n    }\n}\n\nmodule chair_back() {\n    difference() {\n        cube([25, 20, 15], center=true);\n        \n        // Backrest curve\n        translate([0, 0, 10])\n            rotate([0, 30, 0])\n                scale([1, 1, 1])\n                    cylinder(h=15, r1=12, r2=8, center=true);\n        \n        // Top bar\n        translate([0, 0, 15])\n            cube([20, 2, 2], center=true);\n    }\n}\n\nmodule chair_legs() {\n    // Four legs with simple tapered feet\n    for (x = [-15, 0, 15])\n        for (y = [-10, 0, 10])\n            translate([x, y, -35])\n                cylinder(h=10, r1=4, r2=3, center=true);\n}\n\nmodule chair_legs_base() {\n    // Tapered base for stability\n    translate([0, 0, -25])\n        cube([20, 2, 2], center=true);\n}\n\nmodule chair_arm(side) {\n    // Left arm\n    translate([side * 25, 0, -10])\n        rotate([0, 0, 15])\n            difference() {\n                cube([25, 2, 15], center=true);\n                translate([0, 0, -2])\n                    cube([25, 2, 15], center=true);\n            }\n    \n    // Right arm\n    translate([side * 25, 0, -10])\n        rotate([0, 0, -15])\n            difference() {\n                cube([25, 2, 15], center=true);\n                translate([0, 0, -2])\n                    cube([25, 2, 15], center=true);\n            }\n}\n\nmodule chair_cushions() {\n    // Seat cushion\n    difference() {\n        cube([30, 28, 6], center=true);\n        translate([0, 0, 3])\n            sphere(r=5, center=true);\n    }\n    \n    // Back cushion\n    difference() {\n        cube([26, 26, 8], center=true);\n        translate([0, 0, 16])\n            sphere(r=5, center=true);\n    }\n}\n\nmodule chair_frame() {\n    // Simple frame supports\n    translate([0, 0, -30])\n        cube([6, 6, 10], center=true);\n    translate([0, 0, -45])\n        cube([6, 6, 10], center=true);\n}\n\n// Main assembly\nunion() {\n    chair_seat();\n    chair_back();\n    chair_legs();\n    chair_legs_base();\n    chair_arm(1);\n    chair_arm(-1);\n    chair_cushions();\n    chair_frame();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "outlined sphere",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 25,
      "code": "// Realistic Medium-Complexity OpenSCAD Model - \"Ancient Roman Coin\"\n\n// Overall scale factor for 3D printing\nscale_factor = 0.8;\n\n// Main parameters\ncoin_diameter = 50;\ncoin_thickness = 12;\ncoin_height = 35;\nedge_radius = 1.5;\n\n// Colors\ncolor_metal = [0.9, 0.9, 0.9];\ncolor_bronze = [0.35, 0.35, 0.35];\ncolor_gold = [1, 1, 1];\ncolor_marble = [0.95, 0.9, 0.85];\n\n// Main coin body\nmodule coin_body() {\n    difference() {\n        // Main coin disk\n        color(color_metal) {\n            cylinder(h=coin_thickness, d=coin_diameter, center=true);\n        }\n        \n        // Hollow out center\n        translate([0, 0, -0.1])\n            cylinder(h=1, d=coin_diameter - 2, center=true);\n        \n        // Edge bevel\n        translate([0, -0.1, -0.1])\n            cylinder(h=0.5, d=coin_diameter, center=true);\n    }\n}\n\n// Roman emperor portrait area\nmodule emperor_portrait() {\n    // Background arch\n    difference() {\n        color(color_bronze) {\n            cube([20, 15, 12], center=true);\n        }\n        translate([0, 0, -1])\n            cube([24, 13, 10], center=true);\n    }\n    \n    // Emperor's seal\n    color(color_gold) {\n        translate([0, 0, 4.5])\n            cube([5, 5, 4], center=true);\n    }\n}\n\n// Coin inscription lines\nmodule inscriptions() {\n    for (i = [0:1:5]) {\n        // Line 1\n        translate([0, -coin_diameter/2 - 1, i * 2])\n            color(color_bronze) {\n                cube([1, 1, 0.3], center=true);\n            }\n        \n        // Line 2\n        translate([0, -coin_diameter/2 - 2, i * 3])\n            color(color_gold) {\n                cube([1, 1, 0.3], center=true);\n            }\n    }\n}\n\n// Decorative border around edges\nmodule border() {\n    color(color_bronze) {\n        difference() {\n            cylinder(h=1.5, d=coin_diameter + 1, center=true);\n            cylinder(h=1.5, d=coin_diameter - 2, center=true);\n        }\n    }\n}\n\n// Roman eagle emblem\nmodule eagle() {\n    translate([0, -coin_diameter/2 - 1, -coin_height/2 - 5])\n        color(color_bronze) {\n            // Eagle body\n            cylinder(h=1, d1=2, d2=4, center=true);\n            \n            // Eagle wing\n            translate([0, 0, -1])\n                scale([1, 0.3, 0.1])\n                    sphere(d=1.5);\n            \n            // Eagle head\n            translate([0, 0, 0])\n                sphere(d=3);\n        }\n}\n\n// Mint mark\nmodule mint_mark() {\n    translate([0, 0, -coin_height/2 + 0.5])\n        color(color_metal) {\n            cube([1, 2, 0.1], center=true);\n        }\n}\n\n// Assembly\nunion() {\n    // Main coin body\n    coin_body();\n    \n    // Emperor portrait\n    empire_portrait();\n    \n    // Inscriptions\n    inscriptions();\n    \n    // Decorative border\n    border();\n    \n    // Decorative elements\n    eagle();\n    mint_mark();\n    \n    // Bottom relief\n    color(color_metal) {\n        translate([0, 0, -coin_height/2 - 1])\n            cylinder(h=1, d=coin_diameter, center=true);\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "frame structure",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 35,
      "code": "// Realistic medium-complexity 3D-printable model of a small electric scooter\n// Overall footprint: 80 mm \u00d7 50 mm \u00d7 15 mm\n// Wall thickness: 2 mm\n\n$fn = 24;  // Good balance between detail and speed\n\nmodule scooter() {\n    // Main frame block\n    union() {\n        // 4 wheels on 2 wheels\n        translate([0, 0, 5]) wheel();\n        translate([0, 0, -5]) wheel();\n        translate([0, 0, -10]) wheel();\n        translate([0, 0, 0]) wheel();\n    }\n\n    // Fork and handlebars\n    translate([20, 0, 5])\n        fork();\n    translate([20, 0, -5])\n        handlebar();\n\n    // Seat\n    translate([0, 0, -12])\n        seat();\n\n    // Body\n    translate([0, 0, 0])\n        body();\n\n    // Handlebars\n    translate([20, 0, 12])\n        handlebars();\n    translate([20, 0, -12])\n        handlebars();\n}\n\nmodule wheel() {\n    difference() {\n        // Tire\n        cylinder(h = 3, r = 20);\n        // Rim\n        cylinder(h = 1, r = 18);\n    }\n}\n\nmodule fork() {\n    // Fork tube\n    translate([0, 0, 0])\n        cylinder(h = 40, r = 12);\n    translate([0, 0, 10])\n        fork_pivot();\n}\n\nmodule fork_pivot() {\n    // Pivot bracket\n    difference() {\n        cylinder(h = 20, r = 18);\n        cylinder(h = 25, r = 16);\n    }\n    translate([0, 0, 20])\n        pivot_hole();\n}\n\nmodule handlebars() {\n    // Handlebar\n    translate([0, 0, 5])\n        cylinder(h = 60, r = 12);\n    translate([0, 0, 105])\n        handlebar_base();\n}\n\nmodule body() {\n    // Main body\n    difference() {\n        cube([80, 50, 15], center = true);\n        // Bottom cutout for weight reduction\n        translate([0, 0, -5])\n            cube([78, 48, 15], center = true);\n    }\n}\n\nmodule seat() {\n    // Seat tube\n    difference() {\n        cylinder(h = 3, r = 12);\n        translate([0, 0, -3])\n            cylinder(h = 1, r = 12);\n    }\n    // Seat cushion\n    translate([0, 0, 2.5])\n        sphere(r = 10);\n}\n\nmodule handlebar_base() {\n    // Handlebar tube\n    difference() {\n        cylinder(h = 40, r = 12);\n        cylinder(h = 42, r = 10);\n    }\n    // Handle bar\n    translate([0, 0, 25])\n        cylinder(h = 40, r = 12);\n}\n\n// Render the model\ntranslate([0, 0, 0])\n    scooter();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "connector piece",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 17,
      "code": "// Toy Stool - Realistic Style, Medium Complexity\n// Dimensions: 60mm height, 45mm width, 45mm depth\n\n// Parameters\nstool_height = 45;\nstool_width = 45;\nstool_depth = 45;\nleg_height = 30;\nbase_diameter = 35;\nwall_thickness = 2;\ngrip_height = 4;\n\n// Main leg module\nmodule leg() {\n    difference() {\n        // Main leg body\n        cylinder(h=leg_height, d=base_diameter/2, center=false);\n        // Base mounting hole\n        cylinder(h=wall_thickness, d=base_diameter/2, center=true);\n        \n        // Reinforcement ribs\n        for(i=[0:2:3]) {\n            translate([0, 0, 0])\n                rotate([0, 90, 0])\n                    cylinder(h=wall_thickness, d=base_diameter/2 - 2, center=false);\n        }\n    }\n}\n\n// Stool seat\nmodule seat() {\n    difference() {\n        // Seat platform\n        cylinder(h=stool_depth, d=stool_width, center=false);\n        \n        // Leg support\n        translate([0, 0, 1])\n            cylinder(h=leg_height - 2, d=stool_width - 4, center=false);\n        \n        // Grip texture\n        for(i=[0:4]) {\n            translate([0, 0, -i])\n                cylinder(h=2, d=stool_width/2 - 3, center=false);\n        }\n    }\n}\n\n// Stool support brackets\nmodule brackets() {\n    // Front brace\n    translate([0, 0, leg_height - 5])\n        rotate([0, 90, 0])\n            cylinder(h=3, d=3, center=true);\n    \n    // Rear brace\n    translate([0, 0, -leg_height - 5])\n        rotate([0, 90, 0])\n            cylinder(h=3, d=3, center=true);\n}\n\n// Assembly\nmodule stool() {\n    union() {\n        // Seat assembly\n        translate([0, 0, -stool_depth/2])\n            seat();\n        \n        // Leg assembly\n        translate([0, 0, -stool_height/2])\n            rotate([0, 90, 0])\n                translate([0, 0, 0])\n                    leg();\n        \n        // Support brackets\n        translate([0, 0, 0])\n            brackets();\n    }\n}\n\n// Render the stool\nstool();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "hollow outline",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 69,
      "code": "// Realistic medium-complexity OpenSCAD model of a 3D-printable wall-unit\n// Overall footprint: 60 mm x 80 mm x 120 mm\n\n$fn = 36;          // Smooth curves for realistic appearance\n\n// Main body dimensions\nbody_w = 60;\nbody_d = 80;\nbody_h = 120;\n\n// Wall thickness\nwall = 2;\n\n// Cable-run cavity\ncavity_w = body_w - 12;\ncavity_d = body_d - 12;\ncavity_h = 3;\n\n// Wall-unit front panel\npanel_w = body_w - 10;\npanel_d = body_d - 10;\npanel_h = 8;\n\n// Wall-unit back panel\npanel_w = body_w - 10;\npanel_d = body_d - 10;\npanel_h = 8;\n\n// Wall-unit side panels\npanel_w = body_w - 12;\npanel_d = body_d - 12;\npanel_h = 8;\n\n// Cable-run channels\nchannel_w = 4;\nchannel_d = 12;\nchannel_h = 3;\n\n// Wall-unit shelf\nshelf_w = 10;\nshelf_d = 60;\nshelf_h = 5;\n\n// Base plate\nplate_w = 10;\nplate_d = 60;\nplate_h = 4;\n\n// Mounting holes\nhole_r = 3;\nhole_x = 8;\n\n// Wall-unit door\ndoor_w = 10;\ndoor_h = 10;\ndoor_gap = 5;\n\n// Base mounting bracket\nbracket_w = 12;\nbracket_h = 15;\n\n// Ventilation slots\nslot_w = 4;\nslot_d = 20;\nslot_h = 2;\n\nmodule wall_unit() {\n    difference() {\n        // Main body shell\n        cube([body_w, body_d, body_h], center=true);\n        \n        // Cable-run cavity\n        translate([0, 0, -wall/2]) cube([cavity_w, cavity_d, cavity_h], center=true);\n        \n        // Wall-unit front panel\n        translate([-body_w/2 - wall/2, 0, 0])\n        difference() {\n            cube([panel_w, panel_d, panel_h], center=true);\n            \n            // Cable-channel openings\n            translate([0, 0, 0]) cylinder(h=channel_h, d=channel_d, center=true);\n            translate([0, 0, 0]) cylinder(h=channel_h, d=channel_d, center=true);\n        }\n        \n        // Wall-unit back panel\n        translate([0, 0, 0])\n        difference() {\n            cube([panel_w, panel_d, panel_h], center=true);\n            \n            // Cable-channel openings\n            translate([0, 0, 0]) cylinder(h=channel_h, d=channel_d, center=true);\n            translate([0, 0, 0]) cylinder(h=channel_h, d=channel_d, center=true);\n        }\n        \n        // Wall-unit side panels\n        for(x = [-body_w/2 + panel_w/2, body_w/2 - panel_w/2]) {\n            translate([x, 0, panel_h/2])\n            difference() {\n                cube([panel_w, panel_d, panel_h], center=true);\n                \n                // Cable-channel openings\n                translate([0, 0, 0]) cylinder(h=channel_h, d=channel_d, center=true);\n                translate([0, 0, 0]) cylinder(h=channel_h, d=channel_d, center=true);\n            }\n        }\n        \n        // Wall-unit shelf\n        translate([0, body_d/2 - 10, 0]) cube([shelf_w, shelf_d, shelf_h], center=true);\n        \n        // Mounting holes\n        for(i = [0:2]) {\n            for(j = [0:2]) {\n                translate([i * body_w/4, j * body_d/4, -plate_h/2])\n                rotate([0, 0, -30 * j])\n                cylinder(r=hole_r, h=hole_x, center=true);\n            }\n        }\n        \n        // Base plate\n        translate([0, 0, -plate_h/2])\n        difference() {\n            cube([plate_w, plate_d, plate_h], center=true);\n            \n            // Mounting holes\n            for(i = [0:3]) {\n                translate([i * plate_w/4, 0, 0])\n                cylinder(r=hole_r, h=hole_x, center=true);\n            }\n        }\n    }\n    \n    // Front panel\n    translate([-body_w/2 + wall_unit_width/2, 0, 0])\n    difference() {\n        cube([wall_unit_width, wall_unit_d, wall_unit_h], center=true);\n        \n        // Cable-channel openings\n        translate([-wall_unit_width/2 - 1, 0, 0]) cylinder(h=channel_h, d=channel_d, center=true);\n        translate([-wall_unit_width/2 + 1, 0, 0]) cylinder(h=channel_h, d=channel_d, center=true);\n    }\n    \n    // Back panel\n    translate([0, 0, -wall_unit_h/2])\n    difference() {\n        cube([wall_unit_width, wall_unit_d, wall_unit_h], center=true);\n        \n        // Cable-channel openings\n        translate([0, 0, 0]) cylinder(h=channel_h, d=channel_d, center=true);\n        translate([0, 0, 0]) cylinder(h=channel_h, d=channel_d, center=true);\n    }\n    \n    // Side panels\n    translate([-body_w/2 - wall_unit_width/2, 0, wall_unit_h/2])\n    difference() {\n        cube([wall_unit_width, wall_unit_d, wall_unit_h], center=true);\n        \n        // Cable-channel openings\n        translate([-wall_unit_width/2 - 1, 0, 0]) cylinder(h=channel_h, d=channel_d, center=true);\n        translate([-wall_unit_width/2 + 1, 0, 0]) cylinder(h=channel_h, d=channel_d, center=true);\n    }\n    \n    // Door\n    translate([-body_w/2 - wall_unit_width/2 - 20, body_d/2, wall_unit_h/2])\n    difference() {\n        cube([door_w, door_d, door_h], center=true);\n        \n        // Door gap\n        translate([0, 0, 0]) cylinder(h=door_gap, d=door_gap, center=true);\n        translate([0, 0, 0]) cylinder(h=door_gap, d=door_gap, center=true);\n    }\n}\n\n// Generate the wall-unit\nwall_unit();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "framed shape",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 66,
      "code": "// Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic Medium-Complexity Realistic",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: Geometries in cache: 1\nGeometry cache size in bytes: 0\nCGAL Polyhedrons in cache: 0\nCGAL cache size in bytes: 0\nTotal rendering time: 0:00:00.000\nCurrent top level object is empty.\n",
      "vlm_response": null
    },
    {
      "object": "joint",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 46,
      "code": "// Realistic 3D-print model of a medium-sized wooden chair with joints and supports\n// Overall size \u2248 110 mm tall \u00d7 60 mm wide \u00d7 65 mm deep\n// Designed for FDM printing with minimal supports and overhangs\n\n$fa = 1; $fs = 0.5; $pr = 2;\n\nmodule chair() {\n    // Main seat frame\n    difference() {\n        cube([60, 55, 8]);\n        translate([0, 0, 4]) cube([60, 55, 8]);\n    }\n\n    // Seat cushion\n    difference() {\n        translate([0, 0, 4]) cube([60, 55, 7]);\n        translate([0, 0, 6]) cube([60, 55, 7]);\n    }\n\n    // Backrest frame\n    difference() {\n        translate([30, 25, 4]) cube([30, 30, 6]);\n        translate([0, 0, 6]) cube([30, 30, 6]);\n    }\n\n    // Backrest slats\n    for (y = [-20, 0, 20]) {\n        translate([30, y, 4]) cube([2, 30, 6]);\n    }\n\n    // Front legs\n    for (x = [-25, 25]) {\n        translate([x, 0, 0]) cube([35, 4, 10]);\n        translate([-x, 0, 0]) cube([35, 4, 10]);\n    }\n\n    // Front legs extension\n    translate([-x, 0, 0]) cube([35, 4, 10]);\n    translate([x, 0, 0]) cube([35, 4, 10]);\n\n    // Side legs\n    for (z = [-20, 20]) {\n        translate([0, 0, z]) cube([35, 5, 10]);\n        translate([0, 0, z]) cube([35, 5, 10]);\n    }\n\n    // Support legs\n    for (z = [-20, 20]) {\n        translate([0, 0, z]) cube([35, 5, 10]);\n        translate([0, 0, z]) cube([35, 5, 10]);\n    }\n\n    // Joint supports\n    for (x = [-25, 25]) {\n        translate([x, 0, 8]) cube([35, 5, 10]);\n        translate([x, 0, 8]) cube([35, 5, 10]);\n    }\n\n    // Armrest\n    difference() {\n        translate([25, 2, 7]) cube([20, 5, 4]);\n        translate([0, 0, -0.5]) cube([20, 5, 4]);\n    }\n\n    // Armrest holes\n    for (x = [-15, 15]) {\n        for (y = [-10, 10]) {\n            translate([x, y, 7.5]) cube([2.5, 2, 1.5]);\n        }\n    }\n\n    // Backrest joints\n    for (x = [-20, 20]) {\n        translate([x, 0, 4]) cube([2, 30, 6]);\n        translate([-x, 0, 4]) cube([2, 30, 6]);\n    }\n\n    // Joints\n    for (z = [-20, 20]) {\n        translate([x, 0, z]) cube([2, 30, 6]);\n        translate([-x, 0, z]) cube([2, 30, 6]);\n    }\n\n    // Decorative joints\n    for (z = [-20, 20]) {\n        translate([x, 0, z]) cube([2, 30, 6]);\n        translate([-x, 0, z]) cube([2, 30, 6]);\n    }\n\n    // Chair top\n    difference() {\n        cube([60, 55, 10]);\n        translate([0, 0, 5]) cube([60, 55, 2]);\n    }\n}\n\n// Render the chair\nchair();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "socket",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 75,
      "code": "// Realistic Medium-Complexity Pocket Watch (OpenSCAD)\n// Overall dimensions: ~100mm diameter x ~25mm height\n\n$fn = 36;\n\n// Main assembly\nmodule pocket_watch() {\n    // Case\n    case();\n\n    // Dial\n    dial();\n\n    // Crystal\n    crystal();\n\n    // Crown\n    crown();\n\n    // Hands\n    hands();\n\n    // Pockets\n    pocket_pockets();\n}\n\n// Case module with rounded edges\nmodule case() {\n    difference() {\n        // Main case body\n        cylinder(h = 15, r1 = 12, r2 = 12, center = true);\n        \n        // Hollow out for weight reduction\n        translate([0, 0, 15])\n            cylinder(h = 12, r1 = 8, r2 = 8, center = true);\n        \n        // Front button\n        translate([0, 0, 10.5])\n            sphere(d = 10, center = true);\n        \n        // Top curve\n        translate([0, 0, 10])\n            rotate([90, 0, 0])\n                cylinder(h = 3, r1 = 8, r2 = 8, center = true);\n    }\n}\n\n// Dial module with markers\nmodule dial() {\n    color(\"black\") {\n        difference() {\n            // Main dial plate\n            cylinder(h = 4, r = 12.5, center = true);\n            \n            // Central marker\n            translate([0, 0, -0.1])\n                cube([4, 12.5, 2], center = true);\n            \n            // Hour markers (simplified)\n            translate([0, 0, 4])\n                sphere(d = 3, center = true);\n            translate([0, 0, -1.5])\n                sphere(d = 2.5, center = true);\n        }\n    }\n}\n\n// Crown module\nmodule crown() {\n    difference() {\n        cylinder(h = 2, r = 10, center = true);\n        \n        // Crown edges\n        translate([0, 0, 2])\n            cylinder(h = 1, r1 = 10, r2 = 10, center = true);\n        translate([0, 0, -1])\n            cylinder(h = 1, r1 = 10, r2 = 10, center = true);\n    }\n}\n\n// Hands module\nmodule hands() {\n    color(\"black\") {\n        // Hour hand\n        translate([0, 0, 6.5])\n            cylinder(h = 1, r = 3, center = true);\n        \n        // Minute hand\n        translate([0, 0, -6.5])\n            cylinder(h = 1, r = 3, center = true);\n        \n        // Wrist pointer\n        translate([0, 0, 6.5 - 1])\n            cylinder(h = 1, r = 2, center = true);\n    }\n}\n\n// Pocket pockets\nmodule pocket_pockets() {\n    color(\"silver\") {\n        // Inner pockets\n        translate([0, 0, -1.5])\n            cylinder(h = 1, r = 8, center = true);\n        translate([0, 0, -1.5])\n            cylinder(h = 1, r = 8, center = true);\n        \n        // Main pocket\n        translate([0, 0, 0.5])\n            cylinder(h = 2, r = 10, center = true);\n    }\n}\n\n// Main assembly\ncolor(\"darkslategray\") {\n    union() {\n        // Case\n        case();\n        \n        // Dial\n        dial();\n        \n        // Crown\n        crown();\n        \n        // Hands\n        hands();\n        \n        // Pockets\n        pocket_pockets();\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "coupling",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 43,
      "code": "// Realistic Medium-Complexity Taper Tool - Combined Pliers & Screwdriver\n// Medium-size (50mm length) tool with functional features\n\n// Overall dimensions: ~40mm length, 25mm width, 30mm height\n\nmodule handle_grip() {\n    // Main grip with textured material\n    difference() {\n        // Tapered grip body\n        hull() {\n            translate([-10, 0, 0]) cylinder(h=12, r1=8, r2=8);\n            translate([0, 0, 12]) sphere(d=10);\n        }\n        \n        // End caps\n        translate([-30, 0, 0]) cylinder(h=3, r=8, center=true);\n        translate([30, 0, 0]) cylinder(h=3, r=8, center=true);\n        \n        // Finger grooves for ergonomic grip\n        for (i = [0:3]) {\n            translate([0, 0, -15 - i*4]) cube([2, 2, 2], center=true);\n        }\n    }\n}\n\nmodule shaft() {\n    // Main metal shaft\n    difference() {\n        cylinder(h=15, r1=3, r2=2.5, center=true);\n        \n        // Threaded end for screw\n        translate([0, 0, -2]) cylinder(h=5, r1=1.5, r2=1.2, center=true);\n    }\n}\n\nmodule pliers_jaw() {\n    // Pliers jaws with gripping tabs\n    difference() {\n        hull() {\n            translate([-20, 0, 0]) cylinder(h=3, r=2.5);\n            translate([0, 0, 0]) sphere(d=2.5);\n        }\n        \n        // Tapered jaws\n        translate([0, 0, -2]) cylinder(h=4, r1=2, r2=1, center=true);\n        translate([0, 0, 2]) cylinder(h=4, r1=2.5, r2=1.2, center=true);\n        \n        // Gripping tabs\n        for (i = [0:2]) {\n            translate([0, -1, 0]) cube([3, 2, 1], center=true);\n        }\n    }\n}\n\nmodule screw_head() {\n    // Hexagonal screw head\n    difference() {\n        cylinder(h=2, r=3, center=true);\n        translate([0, 0, 0]) cylinder(h=2.5, r=1.5, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Handle assembly\n    union() {\n        handle_grip();\n        \n        // Shaft\n        translate([0, 0, -5]) shaft();\n        \n        // Pliers assembly\n        translate([0, 0, -8]) pliers_jaw();\n        \n        // Screw head\n        translate([0, 0, -12]) screw_head();\n        \n        // End caps\n        translate([0, 0, -20]) cylinder(h=1.5, r=8, center=true);\n        translate([0, 0, -20]) cylinder(h=1.5, r=8, center=true);\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "bracket",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 94,
      "code": "// Realistic Medium-Complexity Side Table \u2013 3D Printable with No Support Needed\n\n// Overall dimensions: 120mm x 80mm x 80mm (fits most printers)\n\n// Wall thickness for 3D printing (0.4mm for good printability)\nwall_thickness = 1.2;\n\n// Main assembly: legs, top surface, and lower support structure\nmodule table_assembly() {\n    // Leg assembly \u2013 4 legs, 1 x 80mm x 120mm\n    for (x = [-40, 0, 40]) {\n        for (y = [-30, 0, 30]) {\n            translate([x, y, 2]) {\n                // Leg base \u2013 tapered cylinder\n                cylinder(h = 20, r1 = 4, r2 = 2);\n            }\n        }\n    }\n\n    // Table top\n    translate([0, 0, 5]) {\n        // Main table surface\n        difference() {\n            cube([120, 80, 4], center = true);\n            translate([0, 0, -1]) cube([120, 80, 3], center = true);\n        }\n    }\n\n    // Support frame \u2013 2 x 80mm x 40mm\n    // Central post for stability\n    difference() {\n        cube([80, 40, 120]);\n        translate([0, 0, 30]) cube([80, 40, 120]);\n    }\n\n    // Cross braces (for legs)\n    // Front left leg\n    translate([-40, 25, 20]) {\n        cube([8, 4, 80]);\n    }\n    // Front right leg\n    translate([40, 25, 20]) {\n        cube([8, 4, 80]);\n    }\n    // Rear left leg\n    translate([-40, -25, 20]) {\n        cube([8, 4, 80]);\n    }\n    // Rear right leg\n    translate([40, -25, 20]) {\n        cube([8, 4, 80]);\n    }\n\n    // Reinforcement ribs\n    // Top surface ribs\n    for (i = [-20:10:20]) {\n        translate([i, 2, 5]) {\n            cube([120, 80, 2], center = true);\n        }\n    }\n}\n\n// Render the table\ntable_assembly();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "mounting base",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 87,
      "code": "// Realistic 3D-printable benchtop desktop computer\n// Medium complexity, ~90mm tall, 60mm wide, 45mm deep\n// All walls 2mm thick, no overhangs, all corners 90\u00b0, no sharp edges\n\n$fa = 1; $fs = 0.5;\n\n// Main colors\ncolor_case = [0.2, 0.1, 0.05];\ncolor_metal = [0.9, 0.1, 0.1];\ncolor_screen = [0.9, 0.2, 0.2];\ncolor_board = [0.35, 0.35, 0.35];\ncolor_feet = [0.45, 0.45, 0.45];\ncolor_power = [0.9, 0.1, 0.1];\n\n// Main body\ndifference() {\n    // Main shell\n    color(color_case)\n    cube([60, 45, 40], center = true);\n    \n    // Front panel recess\n    translate([0, 22.5, -5])\n    cube([40, 2, 20], center = true);\n    \n    // Side panels\n    translate([0, -22.5, 0])\n    cube([40, 2, 40], center = true);\n    translate([0, 22.5, 0])\n    cube([40, 2, 40], center = true);\n    \n    // Back panel\n    translate([0, -22.5, -25])\n    cube([40, 2, 40], center = true);\n    translate([0, 22.5, -25])\n    cube([40, 2, 40], center = true);\n}\n\n// Screen\ntranslate([0, 22.5, 0])\ncolor(color_screen)\ncube([30, 2, 2], center = true);\n\n// Keyboard\ntranslate([0, 22.5, 22.5])\ncolor(color_keyboard)\ncube([15, 4, 10], center = true);\n\n// Mouse\ntranslate([0, 22.5, 24.5])\ncolor(color_mouse)\ncube([3, 2.5, 2], center = true);\n\n// Fan headers\ntranslate([0, 22.5, -30])\ncolor(color_fan)\ncylinder(h = 3, d = 4, $fn = 24);\ntranslate([0, 22.5, -30])\nmirror([1, 0, 0])\ncolor(color_fan)\ncylinder(h = 3, d = 4, $fn = 24);\n\n// Power button\ntranslate([0, -22.5, -45])\ncolor(color_power)\ncylinder(h = 1, d = 2, $fn = 12);\n\n// USB ports\ntranslate([20, 22.5, -42.5])\ncolor(color_port)\ncube([4, 2, 2], center = true);\ntranslate([20, 22.5, -42.5])\nmirror([1, 0, 0])\ncolor(color_port)\ncube([4, 2, 2], center = true);\n\n// USB-C port\ntranslate([20, -22.5, -42.5])\ncolor(color_port)\ncube([4, 2, 2], center = true);\n\n// Speaker grill\ntranslate([0, 22.5, 0])\ncolor(color_metal)\ncube([4, 2, 2], center = true);\ntranslate([0, 22.5, 0])\nmirror([1, 0, 0])\ncolor(color_metal)\ncube([4, 2, 2], center = true);\n\n// Feet\ntranslate([0, -22.5, -25])\ncolor(color_feet)\ncube([8, 2, 2], center = true);\ntranslate([0, 22.5, -25])\ncolor(color_feet)\ncube([8, 2, 2], center = true);\n\n// Cable management\ntranslate([0, 22.5, -30])\ncolor(color_cable)\ncube([4, 2, 3], center = true);\n\n// Ventilation slots\ntranslate([0, 22.5, 22.5])\ncolor(color_metal)\ncube([2, 2, 2], center = true);\n\n// Display\ntranslate([0, 22.5, 30])\ncolor(color_screen)\ncube([30, 2, 0.5], center = true);\n\n// Brand label\ntranslate([0, 22.5, 30.5])\ncolor(color_label)\ncube([15, 2, 1], center = true);",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "adapter",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 1,
      "code": "// Realistic 3D-Printable Office Chair - Medium Complexity\n// Designed for 3D printing with minimal overhangs and 2mm walls\n// Overall size ~120mm x 60mm x 100mm (width x depth x height)\n\n$fn = 32; // Smooth curves for realistic appearance\n\nmodule seat_base() {\n    // Main seat cushion\n    difference() {\n        // Outer cushion\n        cube([100, 60, 4], center = true);\n        \n        // Cushion cutouts for comfort (approx 2mm thick)\n        translate([0, 0, 2.5]) cube([100, 60, 1.5], center = true);\n    }\n    \n    // Seat cushion frame\n    difference() {\n        cube([102, 61, 3.5], center = true);\n        translate([0, 0, 2.5]) cube([100, 61, 1.5], center = true);\n    }\n    \n    // Leg supports\n    for(x = [-30, 30]) {\n        for(y = [-20, 20]) {\n            translate([x, y, -2.5]) {\n                cylinder(h = 6, r = 3);\n            }\n        }\n    }\n}\n\nmodule backrest() {\n    // Main backrest frame\n    difference() {\n        cube([80, 50, 6], center = true);\n        translate([0, 0, 3.5]) cube([76, 46, 5], center = true);\n    }\n    \n    // Backrest slats\n    for(y = [-20, 0, 20]) {\n        translate([0, y, -2.5]) {\n            cube([78, 54, 1.5], center = true);\n        }\n    }\n    \n    // Lumbar support post\n    difference() {\n        cube([10, 5, 4], center = true);\n        translate([0, 0, -2.5]) cube([10, 5, 2.5], center = true);\n    }\n}\n\nmodule armrest() {\n    // Right armrest\n    difference() {\n        translate([30, -20, 2.5]) {\n            cube([15, 10, 4], center = true);\n            translate([0, 0, 2.5]) cube([12, 6, 1.5], center = true);\n        }\n        translate([30, -20, -2.5]) {\n            cube([15, 10, 4], center = true);\n            translate([0, 0, 2.5]) cube([12, 6, 1.5], center = true);\n        }\n    }\n    \n    // Left armrest\n    difference() {\n        translate([-30, -20, 2.5]) {\n            cube([15, 10, 4], center = true);\n            translate([0, 0, 2.5]) cube([12, 6, 1.5], center = true);\n        }\n        translate([-30, -20, -2.5]) {\n            cube([15, 10, 4], center = true);\n            translate([0, 0, 2.5]) cube([12, 6, 1.5], center = true);\n        }\n    }\n}\n\nmodule casters() {\n    // Front left caster wheel\n    difference() {\n        cylinder(h = 1, r = 5);\n        translate([0, 0, -1]) cylinder(h = 2, r = 3);\n    }\n    \n    // Front right caster wheel\n    difference() {\n        cylinder(h = 1, r = 5);\n        translate([0, 0, -1]) cylinder(h = 2, r = 3);\n    }\n    \n    // Wheels\n    for(x = [-30, 0, 30]) {\n        for(y = [-20, 0, 20]) {\n            translate([x, y, 0]) {\n                cylinder(h = 2, r = 3);\n            }\n        }\n    }\n    \n    // Base with casters\n    difference() {\n        cube([30, 30, 6], center = true);\n        translate([0, 0, -1]) cube([28, 28, 8], center = true);\n    }\n}\n\nmodule gas() {\n    // Gas cylinder\n    difference() {\n        cylinder(h = 10, r = 2.5);\n        translate([0, 0, -3]) cube([30, 25, 5], center = true);\n    }\n    \n    // Gas tank\n    difference() {\n        cylinder(h = 8, r = 2.5);\n        translate([0, 0, -10]) cube([30, 25, 5], center = true);\n    }\n}\n\n// Assembly\nunion() {\n    // Seat base\n    seat_base();\n    \n    // Backrest\n    backrest();\n    \n    // Arms\n    armrest();\n    \n    // Casters\n    casters();\n    gas();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "mounting bracket",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 25,
      "code": "// Realistic 3D-printable wall-mounted magazine holder (medium-complexity)\n// Dimensions: 80 mm W x 60 mm H x 120 mm D\n// Wall thickness: 2 mm\n\n$fn = 36;\n\n// Main body\nmodule magazine_holder() {\n    difference() {\n        // Outer shell\n        union() {\n            // Main body\n            difference() {\n                cube([80, 60, 120], center = false);\n                translate([0, 0, 5]) cube([76, 56, 110], center = false);\n            }\n            \n            // Front panel\n            translate([0, 0, 10]) difference() {\n                cube([76, 56, 100], center = false);\n                translate([0, 0, 5]) cube([76, 56, 100], center = false);\n            }\n            \n            // Top panel\n            translate([0, 0, 100]) difference() {\n                cube([76, 56, 100], center = false);\n                translate([0, 0, 5]) cube([76, 56, 100], center = false);\n            }\n            \n            // Rear panel\n            translate([0, 0, 0]) difference() {\n                cube([76, 56, 120], center = false);\n                translate([0, 0, 5]) cube([76, 56, 120], center = false);\n            }\n        }\n        \n        // Control panel\n        translate([0, 0, 10]) {\n            cube([15, 30, 20], center = false);\n            translate([0, 0, 20]) cube([15, 30, 20], center = false);\n        }\n        \n        // Magazine slot\n        translate([0, 0, 50]) {\n            difference() {\n                cube([70, 60, 12], center = false);\n                translate([0, 0, 5]) cube([70, 60, 12], center = false);\n            }\n            \n            // Slot opening\n            translate([0, 0, 70]) cube([70, 60, 12], center = false);\n            translate([0, 0, 70]) cube([70, 60, 12], center = false);\n        }\n        \n        // Ventilation slots\n        for (x = [-30, 0, 30]) {\n            translate([x, 0, 50]) cube([2, 2, 20], center = false);\n            translate([x, 0, -50]) cube([2, 2, 20], center = false);\n        }\n        \n        // Screw holes\n        for (x = [-30, 30]) {\n            for (y = [-25, 25]) {\n                translate([x, y, 50]) cylinder(h = 2, d = 2.5, center = false);\n            }\n        }\n        \n        // Bottom feet\n        for (x = [-20, 20]) {\n            for (y = [-20, 20]) {\n                translate([x, y, -50]) cylinder(h = 4, d = 12, center = false);\n            }\n        }\n        \n        // Wall thickness\n        for (x = [-30, 30]) {\n            for (y = [-20, 20]) {\n                translate([x, y, 0]) cube([80, 60, 2], center = false);\n            }\n        }\n    }\n}\n\n// Main assembly\nmagazine_holder();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "pivot mount",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 9,
      "code": "// Realistic OpenSCAD Medium Complexity Model \u2013 3D-printable, no support needed\n// Overall size: ~80mm x 40mm x 45mm\n\n$fn = 36;               // Smooth curves for realistic look\nwall = 2;                // Minimum wall thickness for 3D printing\nbase = 12;               // Base plate size\nbase_h = 2;               // Base height\nplate_w = 60;              // Plate thickness\nplate_d = 40;              // Plate width\nplate_h = 30;              // Plate height\npost_h = 12;               // Post height\npost_d = 8;                // Post diameter\nwall_t = 1.2;              // Wall thickness for 3D printing\n\nmodule main_plate() {\n    difference() {\n        cube([plate_w, plate_d, plate_h], center = true);\n        translate([0, 0, -0.1]) cube([plate_w + 0.2, plate_d + 0.2, plate_h + 0.2], center = true);\n    }\n}\n\nmodule main_post() {\n    difference() {\n        translate([0, 0, -post_h / 2]) cube([post_d, post_h, post_d * 0.8], center = true);\n        translate([0, 0, -post_h / 2 - 1]) cube([post_d * 0.9, post_h * 0.8, post_d * 0.6], center = true);\n    }\n}\n\nmodule base() {\n    difference() {\n        cube([base_w, base_d, base_h], center = true);\n        translate([0, 0, -1]) cube([base_w - wall_t, base_d - wall_t, base_h - wall_t], center = true);\n    }\n}\n\nmodule supports() {\n    for (x = [-1, 1]) {\n        for (y = [-1, 1]) {\n            translate([x * plate_w / 2, y * plate_d / 2, 0]) {\n                difference() {\n                    cube([wall_t, wall_t, plate_h - 10], center = true);\n                    translate([0, 0, -wall_t / 2]) cube([wall_t + 0.2, wall_t + 0.2, plate_h - 10], center = true);\n                }\n            }\n        }\n    }\n}\n\n// Assemble the complete model\nunion() {\n    // Main base\n    base();\n    \n    // Plate\n    translate([0, 0, -plate_h / 2 - plate_h / 2]) main_plate();\n    \n    // Supports\n    supports();\n    \n    // Posts\n    translate([0, 0, -post_h / 2 - post_h / 2]) main_post();\n    translate([0, 0, -post_h / 2 - post_h / 2]) main_post();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "plug",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 51,
      "code": "// OpenSCAD Realistic Wall Plate \u2013 Medium Complexity\n// 3D-printable wall plate with mounting holes and decorative grip\n\n// Parameters\nplate_width = 80;\nplate_depth = 60;\nplate_thickness = 4;\npost_height = 12;\npost_diameter = 2;\ngrip_length = 30;\ngrip_width = 20;\ngrip_height = 15;\nscrew_hole_diameter = 8;\n\n// Main plate body with mounting holes\nmodule plate() {\n    difference() {\n        // Main plate block\n        cube([plate_width, plate_depth, plate_thickness], center=true);\n        \n        // Screw holes (top and bottom)\n        for (x = [-1, 1])\n            for (y = [-1, 1])\n                translate([x * (plate_width/2 + 2), y * (plate_depth/2 + 2), -1])\n                    cylinder(h=screw_hole_diameter, d=screw_hole_diameter, center=true);\n        \n        // Grip grooves\n        for (i = [0:grip_length-1]) {\n            for (j = [0:grip_width-1]) {\n                translate([0, 0, i * grip_height + j * grip_height/2])\n                    rotate([90, 0, 0])\n                        cube([grip_width + 1, 1, 1], center=true);\n            }\n        }\n    }\n}\n\n// Decorative grip surface\nmodule grip() {\n    difference() {\n        // Main grip surface\n        cube([grip_width, grip_height, grip_length], center=true);\n        \n        // Grip grooves\n        for (i = [0:grip_length-1])\n            for (j = [0:grip_width-1])\n                translate([i * 2, j * 2, -1])\n                    cube([grip_width + 1, 1, 1], center=true);\n    }\n}\n\n// Screw collar\nmodule screw_collar() {\n    difference() {\n        cylinder(h=screw_hole_diameter, d=screw_hole_diameter, center=false);\n        cylinder(h=screw_hole_diameter + 1, d=screw_hole_diameter - 0.5, center=false);\n    }\n}\n\n// Assembly\nunion() {\n    // Main plate\n    translate([0, 0, 0]) {\n        plate();\n    }\n    \n    // Grip surface\n    translate([0, 0, plate_thickness/2 + 1]) {\n        grip();\n    }\n    \n    // Screw hole at top\n    translate([0, 0, plate_thickness/2 + 1]) {\n        screw_collar();\n    }\n}",
      "inference_error": null,
      "render_error": "Rendering timeout (>60s)",
      "vlm_response": null
    },
    {
      "object": "sphere array",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 28,
      "code": "// Realistic medium-complexity 3D-printable sphere model\n// Approx. 70 mm diameter, 25 mm thick, 1.5 mm wall thickness\n\n$fn = 30;           // Good for medium-complexity curves\n$pr = 1.5;           // Wall thickness for printing\n\nmodule sphere(d = 70, r = 30) {\n    // Main sphere profile\n    rotate_extrude(angle = 180)\n        translate([0, 0, 0])\n            circle(r = r);\n    \n    // Add slight taper on bottom for realism\n    translate([0, 0, -0.1])\n        scale([1, 1, 1.01])\n            sphere(d = r, r = r * 1.02);\n}\n\n// Create 12 spheres\nfor (i = [0:12]) {\n    sphere(r = 30 + i * 3);\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: ERROR: Recursion detected calling module 'sphere' in file sphere_array.scad, line 7\nTRACE: called by 'sphere' in file sphere_array.scad, line 16\nTRACE: called by 'scale' in file sphere_array.scad, lin",
      "vlm_response": null
    },
    {
      "object": "cube array",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 3,
      "code": "// Realistic medium-complexity cube array with 3D printing considerations\n// All sizes \u2248 120 mm, 180 mm, 240 mm, 300 mm for 0.4 mm walls\n\nwall_thickness = 0.4;\n\nmodule cube_array(size_w, size_h, size_l, wall_thickness) {\n    // Base plate with rounded top edge\n    difference() {\n        rounded_plate(size_w, size_h, size_l, wall_thickness);\n        // Add small fillets for 3D printing\n        translate([0, 0, -0.1]) cylinder(h = 0.5, r = 3.2, $fn = 48);\n    }\n    \n    // Side walls\n    translate([0, 0, wall_thickness/2]) cube([size_w, size_h, size_l], center = false);\n    translate([0, 0, -wall_thickness/2]) cube([size_w, size_h, size_l], center = false);\n    \n    // Top and bottom\n    translate([0, 0, size_l/2]) cube([size_w, size_h, size_l], center = false);\n    translate([0, 0, size_l/2]) cube([size_w, size_h, size_l], center = false);\n    \n    // Front face\n    difference() {\n        cube([size_w, size_h, size_l], center = false);\n        cube([size_w, size_h, size_l], center = false);\n    }\n    \n    // Rear face\n    difference() {\n        cube([size_w, size_h, size_l], center = false);\n        cube([size_w, size_h, size_l], center = false);\n    }\n    \n    // Back face\n    difference() {\n        cube([size_w, size_h, size_l], center = false);\n        cube([size_w, size_h, size_l], center = false);\n    }\n    \n    // Left side\n    translate([0, -size_h/2, wall_thickness/2]) cube([size_w, size_h, wall_thickness], center = false);\n    translate([0, -size_h/2, -wall_thickness/2]) cube([size_w, size_h, wall_thickness], center = false);\n    \n    // Right side\n    translate([0, size_h/2, wall_thickness/2]) cube([size_w, size_h, wall_thickness], center = false);\n    translate([0, size_h/2, -wall_thickness/2]) cube([size_w, size_h, wall_thickness], center = false);\n    \n    // Left edge\n    translate([0, size_h/2, wall_thickness/2]) cube([size_w, size_h, wall_thickness], center = false);\n    translate([0, size_h/2, -wall_thickness/2]) cube([size_w, size_h, wall_thickness], center = false);\n    \n    // Right edge\n    translate([0, -size_h/2, wall_thickness/2]) cube([size_w, size_h, wall_thickness], center = false);\n    translate([0, -size_h/2, -wall_thickness/2]) cube([size_w, size_h, wall_thickness], center = false);\n}\n\n// Create the 3D model\ncube_array(240, 240, 240, 0.4);",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "swivel mount",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 83,
      "code": "// Realistic 3D-print friendly 1:10 scale model of a 1920s-era wooden side table with tapered legs and 1:10 scale furniture details\n// Overall footprint is 80 mm x 60 mm x 50 mm (without mounting plate)\n\n$fn = 36;\n\nmodule table_top() {\n    difference() {\n        // Main wooden tabletop\n        cube([80, 60, 5], center = true);\n        \n        // Top-surface bevel for realistic wood grain\n        translate([0, 0, -0.01])\n            cube([80, 60, 0.02], center = true);\n    }\n    \n    // Table surface detail - slight indentation for realism\n    translate([0, 0, 0.01])\n        cube([80, 60, 0.02], center = true);\n}\n\nmodule tapered_leg(x, y, z) {\n    // Tapered wooden leg with realistic joints\n    difference() {\n        // Main leg block\n        cube([20, 20, 30]);\n        \n        // Tapered top edge\n        translate([0, 0, 30])\n            cube([22, 22, 32]);\n            \n        // Joint block\n        translate([0, 0, -10])\n            cube([15, 15, 25]);\n    }\n    \n    // Decorative joint cap\n    translate([0, 0, -10])\n        cylinder(h = 3, r = 8);\n}\n\nmodule leg_assembly(x, y, z) {\n    difference() {\n        // Main leg assembly\n        tapered_leg(x, y, z);\n        \n        // Reinforcement ribs\n        translate([0, 0, -20])\n            cube([3, 3, 30]);\n            \n        translate([0, 0, -10])\n            cube([2.5, 2.5, 30]);\n    }\n}\n\nmodule shelf() {\n    difference() {\n        // Main shelf support\n        cube([50, 40, 4], center = true);\n        \n        // Shelf detail - subtle curvature\n        translate([0, 20, 0])\n            cube([50, 20, 2], center = true);\n    }\n}\n\nmodule side_panel(x, y) {\n    // Side panel with realistic joinery\n    difference() {\n        // Main panel block\n        cube([50, 40, 30]);\n        \n        // Joinery lines\n        for (i = [0:2]) {\n            translate([0, 0, 30 + i*10])\n                cube([38, 38, 30]);\n        }\n    }\n    \n    // Legs on side panel\n    translate([0, 20, 0])\n        tapered_leg(x, 20, 0);\n    translate([50, 20, 0])\n        tapered_leg(x, 20, 0);\n    translate([-50, 20, 0])\n        tapered_leg(x, 20, 0);\n    translate([-50, -20, 0])\n        tapered_leg(x, 20, 0);\n}\n\nmodule back_panel() {\n    difference() {\n        // Main back panel\n        cube([70, 60, 30]);\n        \n        // Panel details\n        translate([0, 0, 15])\n            cube([65, 55, 25]);\n            \n        translate([0, 0, -15])\n            cube([70, 60, 25]);\n    }\n}\n\nmodule furniture_details() {\n    // Decorative drawer front\n    difference() {\n        cube([30, 20, 20]);\n        translate([0, 0, -10])\n            cube([32, 22, 22]);\n    }\n    \n    // Drawer front detail\n    translate([0, 0, -15])\n        cube([30, 20, 20]);\n            \n    // Legs on furniture\n    translate([0, 0, 20])\n        tapered_leg(20, 20, 0);\n    translate([50, 0, 20])\n        tapered_leg(20, 20, 0);\n    translate([-50, 0, 20])\n        tapered_leg(20, 20, 0);\n}\n\n// Main assembly\ndifference() {\n    union() {\n        table_top();\n        shelf();\n        side_panel(20, 10);\n        side_panel(-20, 10);\n        back_panel();\n        furniture_details();\n    }\n    \n    // Furniture details\n    furniture_details();\n    \n    // Leg connections\n    translate([20, 20, 0])\n        rotate([0, 0, 45])\n            tapered_leg(20, 20, 0);\n    translate([-20, 20, 0])\n        rotate([0, 0, -45])\n            tapered_leg(-20, 20, 0);\n    translate([20, -20, 0])\n        rotate([0, 0, 45])\n            tapered_leg(20, 20, 0);\n    translate([-20, -20, 0])\n        rotate([0, 0, -45])\n            tapered_leg(-20, 20, 0);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "cylinder array",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 73,
      "code": "// Realistic-style 3D-printable model of a 3D-printed pinball machine\n// All dimensions in mm, printable with no supports\n\n$fn = 36;\n\nmodule pinball_machine() {\n    // Main cabinet\n    difference() {\n        rounded_box(120, 60, 50);\n        difference() {\n            translate([0, 0, 0]) rounded_box(120, 60, 50);\n            translate([0, 0, 0]) cube([120, 60, 50]);\n        }\n    }\n\n    // Coin tray\n    translate([0, 0, 15]) {\n        difference() {\n            cube([100, 50, 20], center = true);\n            translate([0, 0, 1]) cube([100, 50, 20], center = true);\n        }\n    }\n\n    // Ball return mechanism\n    translate([0, 10, 10]) {\n        difference() {\n            cylinder(h = 40, r = 25, center = false);\n            cylinder(h = 35, r = 22, center = false);\n        }\n    }\n\n    // Ball bearings\n    for (x = [-40, 0, 40]) {\n        for (y = [-30, 0, 30]) {\n            translate([x, y, 0]) sphere(d = 5);\n        }\n    }\n\n    // Support arms\n    for (y = [-30, 0, 30]) {\n        difference() {\n            cylinder(h = 40, r = 15, center = true);\n            translate([0, 0, -20]) cylinder(h = 35, r = 12, center = true);\n        }\n    }\n\n    // Control panel\n    difference() {\n        cube([40, 20, 50], center = true);\n        translate([0, 0, -20]) cube([36, 16, 46], center = true);\n    }\n\n    // Power button\n    translate([10, 12, 35]) {\n        cylinder(h = 2, r = 3);\n    }\n\n    // Reset button\n    translate([10, 12, -35]) {\n        cylinder(h = 2, r = 3);\n    }\n\n    // LED indicators\n    translate([12, 20, 20]) {\n        sphere(d = 3);\n    }\n    translate([12, 20, -20]) {\n        sphere(d = 3);\n    }\n\n    // LCD screen\n    translate([10, 12, 30]) {\n        cube([20, 12, 6], center = true);\n    }\n}\n\n// Main module for 3D-printing\nmodule pinball_machine() {\n    pinball_machine();\n}",
      "inference_error": null,
      "render_error": "OpenSCAD STL creation failed: Geometries in cache: 1\nGeometry cache size in bytes: 0\nCGAL Polyhedrons in cache: 0\nCGAL cache size in bytes: 0\nTotal rendering time: 0:00:00.000\nCurrent top level object is empty.\n",
      "vlm_response": null
    },
    {
      "object": "attachment point",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 10,
      "code": "// Realistic Crystalline Cluster \u2013 OpenSCAD Code\n// Designed for 3D printing with no overhangs >45\u00b0, 1mm walls, 150 mm diameter\n\n// Overall parameters\ncluster_radius = 150;           // Diameter of the crystal cluster\ncluster_height = 50;            // Height of the central core\ncrystal_diameter = 12;         // Diameter of individual crystals\ncrystal_height = 15;            // Height of each crystal\ncrystal_depth = 25;              // Depth of each crystal\ncrystal_spacing = 80;           // Spacing between crystals\nwall_thickness = 1.5;         // Wall thickness for infill\n\n// Main crystal body \u2013 hollow ellipsoid\nmodule crystal_body() {\n    difference() {\n        // Outer sphere\n        sphere(r = cluster_radius);\n        \n        // Hollow core\n        difference() {\n            sphere(d = cluster_radius - 2 * wall_thickness);\n            translate([0, 0, -0.1]) \n                sphere(d = cluster_radius - 2 * wall_thickness);\n        }\n        \n        // Central cavity\n        translate([0, 0, 0]) \n            cube([cluster_radius - 10, cluster_radius - 10, cluster_height - 20], center = true);\n    }\n}\n\n// Individual crystal with realistic surface details\nmodule crystal(radius, height) {\n    difference() {\n        // Main crystal body\n        sphere(r = radius);\n        \n        // Add surface details\n        difference() {\n            translate([0, 0, -1]) \n                sphere(r = radius - 2 * wall_thickness);\n            \n            // Top surface detail\n            translate([0, 0, 0]) \n                cube([2, 2, height - 2], center = true);\n            \n            // Side surface detail\n            translate([radius - 2, 0, 0]) \n                cube([2, 2, height - 2], center = true);\n        }\n        \n        // Hollow interior\n        difference() {\n            translate([0, 0, -1]) \n                sphere(r = radius - 2 * wall_thickness);\n            \n            // Hollow base\n            translate([0, 0, -1]) \n                cube([2, 2, height - 2], center = true);\n        }\n    }\n}\n\n// Support pillars for stability\nmodule support_pillars() {\n    // Central pillar\n    cylinder(h = 30, r = 12);\n    \n    // Two side pillars\n    translate([0, 0, cluster_height / 2 - 15])\n        cylinder(h = 30, r = 12);\n    translate([0, 0, -cluster_height / 2 + 15])\n        cylinder(h = 30, r = 12);\n    \n    // Central support ring\n    cylinder(h = 15, r = 8);\n}\n\n// Assembly\ncolor(\"silver\") {\n    // Main crystal cluster\n    color(\"silver\")\n    difference() {\n        crystal_body();\n        \n        // Add crystal positions\n        for (i = [0:3]) {\n            angle = i * 120;\n            radius = cluster_radius * cos(angle);\n            height = height * sin(angle);\n            \n            translate([radius * cos(angle), radius * sin(angle), height * sin(angle)])\n                crystal(cluster_radius - 2 * wall_thickness, height);\n        }\n        \n        // Add support pillars\n        support_pillars();\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "mixed array",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 90,
      "code": "// Realistic wooden chair - medium complexity\n// Designed for 3D printing with minimal supports\n\n$fn = 30;\n\n// Main dimensions\nseat_width = 85;\nseat_depth = 60;\nseat_height = 45;\nbackrest_height = 50;\nleg_thickness = 8;\nleg_height = 35;\n\n// Seat surface\nmodule seat() {\n    difference() {\n        cube([seat_width, seat_depth, seat_height], center=true);\n        translate([0, 0, -0.5]) cube([seat_width - 10, seat_depth - 10, seat_height + 0.5], center=true);\n        // Rounded front edge for comfort\n        translate([seat_width/2 - 5, 0, seat_height/2 - 1]) cube([5, seat_depth, 2], center=true);\n    }\n}\n\n// Backrest with slats\nmodule backrest() {\n    difference() {\n        cube([seat_width - 20, seat_depth - 20, backrest_height], center=true);\n        // Hollow backrest for printability\n        translate([0, 0, -1.5]) cube([seat_width - 20 - 2, seat_depth - 20 - 2, backrest_height - 1], center=true);\n        // Slatted back support\n        translate([seat_width/2 - 10, seat_depth/2 - 10, seat_height - 5]) cube([12, 12, 2], center=true);\n    }\n}\n\n// Leg with foot rest\nmodule leg() {\n    difference() {\n        cylinder(h=leg_height, r=leg_thickness/2, center=false);\n        translate([0, 0, -leg_height/2]) cylinder(h=leg_height + 0.1, r=leg_thickness/2 + 0.2, center=false);\n        // Foot rest detail\n        translate([0, 0, -leg_height/2 - 3]) cube([2, 2, 1], center=true);\n    }\n}\n\n// Chair legs\nmodule legs() {\n    for(x = [0, 1]) {\n        translate([x * 15, 0, leg_height/2 + seat_height/2 + 5]) {\n            cylinder(h=leg_height, r=leg_thickness/2, center=false);\n        }\n    }\n}\n\n// Assembly\nmodule chair() {\n    union() {\n        // Seat\n        translate([0, 0, 0]) seat();\n        // Backrest\n        translate([0, 0, seat_height - backrest_height/2]) backrest();\n        // Legs\n        legs();\n        // Support frame underneath\n        translate([0, 0, -15]) cube([seat_width - 4, seat_depth - 4, 15], center=true);\n    }\n}\n\n// Render the chair\nchair();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "transformed cube",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 50,
      "code": "// Realistic Medium-Complexity Model\n// Overall dimensions: ~80mm height x 40mm width x 20mm depth\n\n// Base shell\ndifference() {\n    cube([80, 40, 20], center=true);\n    translate([0, 0, -1]) cube([80-4, 40-4, 20-1], center=true);\n}\n\n// Main body\ndifference() {\n    cube([70, 35, 15], center=true);\n    translate([0, 0, -0.5]) cube([70-4, 35-4, 15-1], center=true);\n}\n\n// Front face with windows\ndifference() {\n    translate([0, 0, 10.5]) cube([82, 36, 10], center=true);\n    translate([0, 0, -12]) cube([82-4, 36-4, 10-1], center=true);\n}\n\n// Side faces with ventilation slots\ndifference() {\n    translate([0, 0, 0]) cube([82, 36, 12], center=true);\n    translate([0, 0, -12]) cube([82-4, 36-4, 12-1], center=true);\n}\n\n// Rear face with mounting points\ndifference() {\n    cube([70, 35, 15], center=true);\n    translate([0, 0, -1]) cube([70-4, 35-4, 15-1], center=true);\n}\n\n// Rear support brace\ndifference() {\n    cube([40, 3, 10], center=true);\n    translate([0, 0, -5]) cube([40-4, 3-4, 10-1], center=true);\n}\n\n// Cable entry\ndifference() {\n    cube([40, 3, 12], center=true);\n    translate([0, 0, 5]) cube([40-4, 3-4, 12-1], center=true);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "irregular array",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 92,
      "code": "// Realistic Wooden Toy Chest (Medium Complexity)\n// Designed for 3D printing with minimal supports\n// Overall dimensions: 80mm W x 50mm D x 40mm H\n\n$fn = 32; // Medium resolution for smooth curves\n\n// Wall thickness for 3D printing\nwall = 2;\n\nmodule chest_body() {\n    difference() {\n        // Main body shell\n        cube([80, 50, 40]);\n        \n        // Hollow interior\n        translate([wall, wall, wall])\n            cube([76, 46, 36]);\n    }\n}\n\nmodule front_panel() {\n    difference() {\n        cube([80, 50, 30]);\n        translate([wall, wall, wall])\n            cube([76, 46, 30]);\n    }\n}\n\nmodule side_panel(x, y) {\n    difference() {\n        cube([80, 50, 40]);\n        translate([x, y, wall])\n            cube([76, 46, 36]);\n        translate([wall, wall, wall])\n            cube([76, 46, 30]);\n    }\n}\n\nmodule hinges() {\n    // Left hinge\n    translate([30, 25, 20])\n        rotate([180, 0, 0])\n        cylinder(h=20, r=3);\n    \n    // Right hinge\n    translate([-30, 25, 20])\n        rotate([180, 0, 0])\n        cylinder(h=20, r=3);\n}\n\nmodule handle() {\n    // Handle base\n    difference() {\n        cylinder(h=8, r=5);\n        translate([wall, wall, wall])\n            cylinder(h=10, r=3);\n    }\n    \n    // Handle grip\n    translate([wall, wall, wall])\n        cylinder(h=12, r=4);\n    \n    // End cap\n    translate([wall, wall, wall])\n        cylinder(h=2, r=3);\n}\n\nmodule bottom_support() {\n    difference() {\n        cube([80, 50, 4]);\n        translate([wall, wall, wall])\n            cube([76, 46, 36]);\n    }\n}\n\nmodule decorative_details() {\n    // Central spine\n    cube([wall, wall, wall]);\n    \n    // Top front\n    translate([wall, wall, wall])\n        cube([80, 50, 30]);\n    \n    // Side details\n    translate([wall, wall, wall])\n        cube([80, 50, 30]);\n    \n    translate([wall, wall, wall])\n        cube([80, 50, 30]);\n}\n\n// Main assembly\nunion() {\n    chest_body();\n    front_panel();\n    side_panel(-35, 35);\n    side_panel(35, -35);\n    \n    hinges();\n    handle();\n    bottom_support();\n    decorative_details();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "matrix transformation",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 13,
      "code": "// Realistic-style 3D-printable isometric model of a medium-complexity \n// mechanical gear with keyway, shaft, and pivot bearing.\n\n// Overall scale factor for 3D printing\nscale_factor = 0.9;\n\n// Main assembly\nunion() {\n    // Base disk (solid disk for 3D printing)\n    disk_base();\n    \n    // Disk with keyway\n    disk_keyway();\n    \n    // Shaft\n    shaft();\n    \n    // Pivot bearing\n    pivot_bearing();\n}\n\nmodule disk_base() {\n    difference() {\n        // Main disk body\n        cylinder(h=2, d=20, center=false);\n        \n        // Central hole for shaft\n        translate([0,0,2]) cylinder(h=2, d=8, center=false);\n        \n        // Keyway cut\n        translate([0,0,2]) rotate([90,0,0]) cube([10,10,2], center=true);\n    }\n}\n\nmodule disk_keyway() {\n    difference() {\n        // Keyway recess\n        translate([0,0,2]) cylinder(h=3, d=4, center=false);\n        \n        // Keyway channel\n        translate([0,0,2]) cylinder(h=1.5, d=2, center=false);\n        \n        // Central hole for shaft\n        translate([0,0,2]) cylinder(h=2, d=6, center=false);\n        \n        // Central hole for pivot\n        translate([0,0,2]) cylinder(h=2, d=4, center=false);\n    }\n}\n\nmodule shaft() {\n    // Main shaft\n    cylinder(h=15, d=3, center=false);\n    \n    // Shaft end cap\n    translate([0,0,-1]) cylinder(h=2, d=4, center=false);\n}\n\nmodule pivot_bearing() {\n    // Main bearing\n    cylinder(h=3, d=12, center=false);\n    \n    // Bearing block\n    translate([0,0,3]) cylinder(h=2, d=4, center=false);\n    \n    // Pivot pin\n    translate([0,0,3]) cylinder(h=2, d=1.5, center=true);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "composite shape",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 89,
      "code": "// Realistic 3D-Printable Model of a Victorian-era Mechanical Clock\n// Medium complexity, 3D-printable with minimal overhangs\n\n// Overall dimensions\nwidth = 80;\nheight = 60;\ndepth = 40;\nthickness = 20;\nwall_thickness = 2;\n\n// Main body\nmodule main_body() {\n    difference() {\n        // Outer shell\n        cube([width, height, depth], center=true);\n        \n        // Hollow interior\n        translate([0, 0, 0])\n            cube([width - 2, height - 2, depth - 4], center=true);\n    }\n}\n\n// Base plate with clock face\nmodule base_plate() {\n    difference() {\n        cube([width, height, 4], center=true);\n        \n        // Clock face cutout\n        translate([width/2 - 10, height/2 - 2, 0])\n            cube([20, 2, 3], center=true);\n    }\n}\n\n// Clock face with Roman numerals\nmodule clock_face() {\n    difference() {\n        // Main face\n        cube([width, height, 4], center=true);\n        \n        // Roman numerals\n        for(i = [0:2]) {\n            translate([width/2 - i * 3, height/2 - 2.5, i * 3])\n                cube([1.5, 1.2, 0.3], center=true);\n        }\n    }\n}\n\n// Hands\nmodule clock_hands() {\n    // Hour hand\n    translate([0, height/2 + 0.3, -0.5])\n        cylinder(h=2, r=1.5, center=true);\n    \n    // Minute hand\n    translate([0, height/2 + 0.3, 0.5])\n        cylinder(h=2, r=1.5, center=true);\n}\n\n// Pendulum\nmodule pendulum() {\n    cylinder(h=1.5, r=1.5, center=true);\n}\n\n// Chime\nmodule chime() {\n    difference() {\n        // Chime plate\n        translate([0, 0, depth/2 - 1])\n            cube([width - 4, height - 4, 2], center=true);\n        \n        // Chime pins\n        for(i = [0:4]) {\n            translate([0, 0, -0.5 + i * 1.5])\n                cylinder(h=1, r=0.8, center=true);\n        }\n    }\n}\n\n// Decorative elements\nmodule decorative_details() {\n    // Crown\n    translate([0, -height/2, 0])\n        cylinder(h=0.5, r=1.5, center=true);\n    \n    // Chimes\n    for(i = [0:1]) {\n        translate([0, height/2 - 1, 0.5 - i * 0.5])\n            cylinder(h=1, r=1, center=true);\n    }\n}\n\n// Assembly\nunion() {\n    // Main structure\n    main_body();\n    base_plate();\n    \n    // Decorative elements\n    decorative_details();\n    \n    // Clock face\n    clock_face();\n    \n    // Hands\n    clock_hands();\n    \n    // Pendulum\n    pendulum();\n    \n    // Chime\n    chime();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "repeating unit",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 98,
      "code": "// Realistic wooden box - medium complexity\n// Overall dimensions: 120mm x 80mm x 40mm\n\n$fn = 24;\n\n// Main box body\ndifference() {\n    cube([120, 80, 40], center = true);\n    // Top hollow\n    translate([0, 0, 10]) cube([116, 76, 36], center = true);\n    // Bottom hollow\n    translate([0, 0, -10]) cube([116, 76, 36], center = true);\n}\n\n// Handle\ndifference() {\n    translate([0, -40, 0]) cube([40, 40, 12]);\n    // Grip grooves\n    for (i = [-1:1]) {\n        translate([i * 10, 0, 2]) cube([2, 2, 1]);\n    }\n}\n\n// Box corners\ndifference() {\n    for (x = [-50, 50]) {\n        for (y = [-40, 40]) {\n            translate([x, y, 0]) cube([8, 8, 40]);\n            translate([x, y, 0]) cube([8, 8, 40]);\n        }\n    }\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "module",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 81,
      "code": "// Realistic 3D-printable wooden chest\n// Medium complexity, 3D-printable with no support structures\n\n$fn = 3;          // Smooth curves\nwall = 2;         // 2mm walls for 3D printing\n\nmodule wooden_chest(width = 120, height = 80, depth = 60) {\n    // Main body of chest\n    difference() {\n        cube([width, height, depth]);\n        // Hollow interior for material saving\n        translate([wall, wall, wall])\n            cube([width - 2*wall, height - 2*wall, depth - wall]);\n    }\n\n    // Chest lid with handle\n    translate([width/2 - 15, height/2 - 5, depth/2 - 5])\n        difference() {\n            cube([15, 10, 5]);\n            // Handle grip\n            translate([0, 0, 2])\n                rotate([90, 0, 0])\n                    cylinder(h = 3, r = 3);\n        }\n\n    // Back panel with drawer recesses\n    translate([width/2 - 15, -height/2 + 5, -depth/2 + 5])\n        cube([15, 10, wall]);\n    \n    // Drawer front\n    translate([width/2 - 15, -height/2 + 5, -depth/2 + 5])\n        cube([10, 8, wall]);\n    \n    // Drawer sides\n    for (x = [0:2]) {\n        translate([width/2 - 15 - x * 10, -height/2 + 5, -depth/2 + 5])\n            cube([10, 8, wall]);\n    }\n    \n    // Drawer bottom\n    translate([width/2 - 15, -height/2 + 5, -depth/2 + 5])\n        cube([10, 8, wall]);\n    \n    // Hinges\n    translate([width/2 + 8, height/2 - 10, -depth/2 + 5])\n        rotate([180, 0, 0])\n            cylinder(h = 6, r = 1.5);\n    translate([width/2 + 8, height/2 - 10, -depth/2 + 5])\n        rotate([180, 0, 0])\n            cylinder(h = 6, r = 1.5);\n    \n    // Legs\n    translate([-width/2 - 6, -height/2 - 5, -depth/2 - 5])\n        cube([6, 6, 6]);\n    translate([width/2 + 6, -height/2 - 5, -depth/2 - 5])\n        cube([6, 6, 6]);\n    translate([-width/2 - 6, height/2 + 5, -depth/2 - 5])\n        cube([6, 6, 6]);\n    translate([width/2 + 6, height/2 + 5, -depth/2 - 5])\n        cube([6, 6, 6]);\n    \n    // Support brackets\n    for (x = [-2:1:2]) {\n        translate([x * 10, -height/2 + 2, -depth/2 - 3])\n            cube([2, 2, 2]);\n    }\n    for (y = [-1:0.5:1]) {\n        translate([y * 10, height/2 + 2, -depth/2 - 3])\n            cube([2, 2, 2]);\n    }\n    \n    // Drawers\n    translate([0, 0, -depth/2 + 5])\n        cube([10, 8, wall]);\n    translate([0, 0, -depth/2 + 5])\n        cube([10, 8, wall]);\n    \n    translate([0, 0, -depth/2 + 5])\n        cube([10, 8, wall]);\n    translate([0, 0, -depth/2 + 5])\n        cube([10, 8, wall]);\n    \n    // Decorative wood grain\n    for (x = [-2:2:2]) {\n        for (y = [-1:0.5:1]) {\n            translate([x, y, -depth/2 - 1.5])\n                cube([1.5, 2, 1.5]);\n        }\n    }\n}\n\n// Render the chest\nwooden_chest();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no."
    },
    {
      "object": "unit cell",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 9,
      "code": "// Realistic 3D-Printable Cell with Base Plate & Handle\n// Overall dimensions: ~80mm x 50mm x 40mm (printable)\n\n$fn = 32;               // Medium smoothness for 3D printing\n\n// Main cell body\nmodule cell_body() {\n    difference() {\n        // Main cell cavity\n        scale([1.2, 1.2, 1])\n            cube([80, 50, 40], center=true);\n        \n        // Recessed bottom for print bed\n        translate([0, 0, -0.5])\n            cube([78, 48, 38], center=true);\n        \n        // Top rim for stability\n        difference() {\n            translate([0, 0, 0])\n                scale([1.3, 1.3, 1])\n                    cube([82, 52, 42], center=true);\n        }\n        \n        // Inner cavity for filament\n        translate([0, 0, 5])\n            cube([78, 48, 38], center=true);\n    }\n}\n\n// Base plate with four mounting holes\nmodule base_plate() {\n    difference() {\n        // Main plate\n        translate([0, 0, 0])\n            cube([80, 50, 4], center=true);\n        \n        // Mounting holes\n        for (x = [-25, 0, 25]) {\n            for (y = [-25, 0, 25]) {\n                translate([x, y, 0])\n                    cylinder(h=6, d=2.5, center=true);\n            }\n        }\n    }\n    \n    // Reinforcement ribs\n    translate([0, 0, 2.5])\n        cube([78, 48, 3], center=true);\n}\n\n// Handle with grip texture\nmodule handle() {\n    difference() {\n        // Main grip\n        translate([0, -15, -10])\n            cube([12, 20, 15], center=true);\n        \n        // Grip texture grooves\n        for (i = [-1, 0, 1]) {\n            translate([i * 8, 0, -15])\n                cube([2, 20, 15], center=true);\n        }\n        \n        // Screw mechanism hole\n        translate([0, -15, -10])\n            cylinder(h=8, d=2.5, center=true);\n    }\n}\n\n// Ventilation slots for print quality\nmodule ventilation_slots() {\n    for (z = [-15, 0, 15]) {\n        translate([0, -5, z])\n            cube([78, 48, 2], center=true);\n    }\n}\n\n// Wall thickness for 3D printing\nscale([1, 1, 1])\n    translate([0, 0, 0])\n        cell_body();\n\nscale([1.25, 1.25, 1.25])\n    translate([0, 0, 0])\n        base_plate();\n\nscale([1.3, 1.3, 1.3])\n    translate([0, 0, 0])\n        handle();",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "building block",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": false,
      "tokens_generated": 29,
      "code": "// Realistic-style medium-complexity 3D-printable building block\n// Overall footprint ~120 mm x 80 mm x 60 mm (suitable for FDM printing)\n\n// Overall dimensions for printing\nwall_thickness = 2;\nbase_width = 120;\nbase_depth = 80;\nheight = 60;\n\n// Main block body\nmodule block_body() {\n    difference() {\n        // Main block shape\n        hull() {\n            cube([base_width, base_depth, height], center=true);\n            translate([0, 0, -height/2 + 1]) sphere(r=8);\n        }\n        // Hollow out for 3D printing\n        cube([base_width - 2*wall_thickness, base_depth - 2*wall_thickness, height - 2*wall_thickness], center=true);\n    }\n}\n\n// Base with grip texture\nmodule base() {\n    difference() {\n        // Base plate\n        cube([base_width, base_depth, 4], center=true);\n        // Grip grooves\n        for (x = [-5:5:5])\n            for (y = [-3:3:3])\n                translate([x, y, -0.5]) cube([12, 12, 1], center=true);\n    }\n}\n\n// Top surface with slight chamfer\nmodule top() {\n    difference() {\n        // Top block\n        cube([base_width, base_depth, height], center=true);\n        // Chamfer edges\n        for (x = [-5:5:5])\n            for (y = [-3:3:3])\n                translate([x, y, height/2]) rotate([0, 0, 45]) cube([8, 8, 1], center=true);\n    }\n}\n\n// Front wall detail\nmodule front_wall() {\n    difference() {\n        cube([wall_thickness, wall_thickness, height], center=true);\n        translate([0, 0, height - 2*wall_thickness - 1]) cube([wall_thickness + 2, wall_thickness + 2, wall_thickness], center=true);\n    }\n}\n\n// Rear wall detail\nmodule rear_wall() {\n    difference() {\n        cube([wall_thickness, wall_thickness, height], center=true);\n        translate([0, 0, height - 2*wall_thickness - 1]) cube([wall_thickness + 2, wall_thickness + 2, wall_thickness], center=true);\n    }\n}\n\n// Door with hinge\nmodule door() {\n    difference() {\n        cube([wall_thickness * 2, wall_thickness * 2, 15], center=true);\n        translate([0, 0, 5]) cube([wall_thickness * 2 + 2, wall_thickness * 2 + 2, 15 - 2*wall_thickness], center=true);\n    }\n}\n\n// Door handle\nmodule door_handle() {\n    difference() {\n        cylinder(h=8, r=2, center=true);\n        translate([0, 0, -0.1]) sphere(r=1.5);\n    }\n}\n\n// Ventilation slots (simple cutouts)\nmodule vents() {\n    for (x = [-20, 0, 20])\n        for (y = [-10, 0, 10])\n            translate([x, y, -10]) cube([wall_thickness*2, wall_thickness*2, 2], center=true);\n}\n\n// Assembly\nunion() {\n    // Main block\n    block_body();\n\n    // Base\n    base();\n\n    // Front wall\n    front_wall();\n\n    // Rear wall\n    rear_wall();\n\n    // Top\n    top();\n\n    // Door\n    door();\n\n    // Hinges\n    door_handle();\n\n    // Ventilation slots\n    vents();\n}\n\n// Add texture details for realism\nmodule texture_details() {\n    for (x = [-20, 0, 20])\n        for (y = [-10, 0, 10])\n            translate([x, y, 10]) cube([wall_thickness, wall_thickness, 1], center=true);\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "no"
    },
    {
      "object": "constructor piece",
      "code_extracted": true,
      "render_success": true,
      "visual_similarity": true,
      "tokens_generated": 51,
      "code": "// Realistic 3D-printable furniture item \u2013 a modern side-table\n// Approx. 120 mm length x 120 mm width x 100 mm height\n\n// Overall dimensions for 3D printing\ntable_length = 120;\ntable_width = 120;\ntable_height = 100;\nleg_height = 50;\nbase_diameter = 60;\nwall_thickness = 2;\n\n// Wall thickness for 3D printing\nwall_thickness = 2;\n\n// Main table top\nmodule table_top() {\n    difference() {\n        // Main board with rounded top edges\n        cube([table_length, table_width, table_height], center=true);\n        // Chamfer edges\n        translate([0, 0, wall_thickness])\n            cube([table_length - 2*wall_thickness, table_width - 2*wall_thickness, table_height - 2*wall_thickness], center=true);\n    }\n}\n\n// Table legs\nmodule table_legs() {\n    for (x = [0, table_length - table_length/2 - 4]) {\n        for (y = [0, table_width - table_width/2 - 4]) {\n            translate([x, y, 0]) {\n                cylinder(h=leg_height, r=wall_thickness/2);\n            }\n        }\n    }\n}\n\n// Table frame\nmodule table_frame() {\n    difference() {\n        // Main frame structure\n        cube([table_length, table_width, table_height], center=true);\n        // Cable management cutouts\n        for (x = [0, table_length - table_length/2 - 4]) {\n            for (y = [0, table_width - table_width/2 - 4]) {\n                translate([x, y, -1])\n                    cube([table_length - 2*wall_thickness, table_width - 2*wall_thickness, 4], center=true);\n            }\n        }\n    }\n}\n\n// Table support bars\nmodule support_bars() {\n    for (x = [0, table_length - table_length/2 - 4]) {\n        for (y = [0, table_width - table_width/2 - 4]) {\n            translate([x, y, table_height/2])\n                cube([wall_thickness, wall_thickness, table_height - 2*wall_thickness]);\n        }\n    }\n}\n\n// Table base with caster wheels\nmodule table_base() {\n    difference() {\n        // Base plate\n        cube([base_diameter, base_diameter, 4], center=true);\n        // Spacing for caster wheels\n        for (i = [0:3]) {\n            translate([i*base_diameter/3, 0, -1])\n                cube([base_diameter*0.5, 4, 2], center=true);\n        }\n        // Spoke holes for caster wheels\n        for (i = [0:4]) {\n            translate([i*base_diameter/3, 0, -1])\n                cylinder(h=4, r=1.5, center=true);\n        }\n    }\n}\n\n// Table top surface\nmodule table_surface() {\n    difference() {\n        // Main surface\n        cube([table_length, table_width, table_height], center=true);\n        // Chamfer for 3D printing\n        translate([0, 0, 0])\n            cube([table_length - 2*wall_thickness, table_width - 2*wall_thickness, table_height - 2*wall_thickness], center=true);\n    }\n}\n\n// Decorative trim around leg joints\nmodule leg_joints() {\n    for (x = [0, table_length - table_length/2 - 4]) {\n        for (y = [0, table_width - table_width/2 - 4]) {\n            translate([x, y, 0]) {\n                difference() {\n                    cube([wall_thickness, wall_thickness, leg_height]);\n                    translate([x, y, leg_height/2])\n                        cube([wall_thickness, wall_thickness, leg_height]);\n                }\n            }\n        }\n    }\n}\n\n// Assembly\nunion() {\n    // Main components\n    table_top();\n    table_legs();\n    table_frame();\n    support_bars();\n    table_base();\n    table_surface();\n    leg_joints();\n}",
      "inference_error": null,
      "render_error": null,
      "vlm_response": "yes"
    },
    {
      "object": "hybrid shape",
      "code_extracted": true,
      "render_success": false,
      "visual_similarity": false,
      "tokens_generated": 20,
      "code": "// Realistic 3D-printable medium-complexity wooden box with visible grain and joints\n// Overall size: ~110 mm length, 50 mm height, 25 mm depth, 2 mm wall thickness\n\n$fn = 36;               // Good for curves without excessive support\n\n// Wall thickness for 2 mm walls\nwall = 2;\n\nmodule box() {\n    difference() {\n        // Main box body\n        cube([110, 50, 25]);\n\n        // Rounded top edge\n        translate([0, 0, 10])\n            cylinder(h = 2, r1 = 30, r2 = 30, center = false);\n\n        // Bottom edge\n        translate([0, 0, -10])\n            cylinder(h = 2, r1 = 30, r2 = 30, center = false);\n\n        // Front face\n        translate([0, 0, 0])\n            cube([110, 50, 25], center = true);\n\n        // Back face\n        translate([0, 0, -10])\n            cube([110, 50, 25], center = true);\n\n        // Left side face\n        translate([0, 25, 0])\n            cube([110, 2, 25], center = true);\n\n        // Right side face\n        translate([0, -25, 0])\n            cube([110, 2, 25], center = true);\n\n        // Side panels with grain details (hidden by 2 mm walls)\n        for (i = [-45:15:45]) {\n            translate([i, 2, 0])\n                cube([2, 2, 25 + i * 0.3], center = true);\n        }\n\n        // Top and bottom details\n        difference() {\n            translate([0, 0, 12.5])\n                cube([110, 50, 2.5], center = true);\n            translate([0, 0, -12.5])\n                cube([110, 50, 2.5], center = true);\n\n            // Reinforcement screw holes\n            for (x = [-45:15:45]) {\n                for (y = [-25:2:25]) {\n                    translate([x, y, 0])\n                        cylinder(h = 1.5, r = 1.5, center = true);\n                }\n            }\n        }\n\n        // Top and bottom feet\n        for (x = [-45:15:45])\n            for (y = [-25:2:25])\n                translate([x, y, -2])\n                    cylinder(h = 1, r = 3, center = true);\n    }\n}\n\n// Create the box\nbox();",
      "inference_error": null,
      "render_error": "Rendering timeout (>60s)",
      "vlm_response": null
    }
  ]
}